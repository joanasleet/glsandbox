#version 440

layout (quads, equal_spacing, cw) in;

uniform mat4 MVP;
uniform float time = 0.0;

/* scattering constants */
uniform vec3 v3CameraPos;

vec3 v3InvWavelength = vec3(1.0 / pow(0.650, 4.0), 1.0 / pow(0.570, 4.0), 1.0 / pow(0.475, 4.0));
float fCameraHeight = length(v3CameraPos);
float fOuterRadius = 10.25;
float radius = fOuterRadius;
float fInnerRadius = 10.0;
float fESun = 10.0;
float fKr = 0.0025;
float fKm = 0.0010;
float fPI = 3.141592654;
float fKrESun = fKr * fESun;
float fKmESun = fKm * fESun;
float fKr4PI = fKr * 4.0 * fPI;
float fKm4PI = fKm * 4.0 * fPI;
float fScale = 1.0 / (fOuterRadius - fInnerRadius);
float fScaleDepth = 0.25;
float fScaleOverScaleDepth = fScale / fScaleDepth;

const int nSamples = 2;
const float fSamples = 2.0;

vec3 sunPosition(float time) {
    const float timeScaleSun = 0.5;
    float t = time;
    vec3 sunPos = vec3(0.0, 0.0, -radius);
    float x = radius * sin(timeScaleSun * t) * cos(timeScaleSun * t );
    float y = radius * sin(timeScaleSun * t) * sin(timeScaleSun * t);
    float z = radius * cos(timeScaleSun * t);
    sunPos = vec3(x, y, -z);
    return sunPos;
}

vec3 v3LightPos = normalize(sunPosition(time));

out vec3 v3Direction;
out vec4 teColor;
out vec4 teSecColor;

float scale(float angle) {
    float x = 1.0 - angle;
    return (fScaleDepth * exp(-0.00287 + x * (0.459 + x * (3.83 + x * (-6.8 + x * 5.25)))));
}

void athmosScatter(vec3 pos) {

    vec3 v3Pos = pos;
    vec3 v3Ray = v3Pos - v3CameraPos;
    float fFar = length(v3Ray);
    v3Ray /= fFar;

    vec3 v3Start = v3CameraPos;
    float fHeight = length(v3Start);
    float fDepth = exp(-fScaleOverScaleDepth * (fInnerRadius - fCameraHeight));
    float fStartAngle = dot(v3Ray, v3Start) / fHeight;
    float fStartOffset = fDepth * scale(fStartAngle);

    float fSampleLength = fFar / fSamples;
    float fScaledLength = fSampleLength * fScale;
    vec3 v3SampleRay = v3Ray * fSampleLength;
    vec3 v3SamplePoint = v3Start + 0.5 * v3SampleRay;

    vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);
    for (int i = 0; i < nSamples; i++) {

        float fHeight = length(v3SamplePoint);
        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));
        float fLightAngle = dot(v3LightPos, v3SamplePoint) / fHeight;
        float fCameraAngle = dot(v3Ray, v3SamplePoint) / fHeight;
        float fScatter = (fStartOffset + fDepth * (scale(fLightAngle) - scale(fCameraAngle)));
        vec3 v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));
        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);
        v3SamplePoint += v3SampleRay;
    }

    teSecColor.rgb = v3FrontColor * fKmESun;
    teColor.rgb = v3FrontColor * (v3InvWavelength * fKrESun);
    v3Direction = v3CameraPos - v3Pos;
}

/* main outputs */
out float rad;
out vec2 teTex;
out vec4 tePos;
out vec3 teSunPos;

void main() {

    /* ~ ~ ~ ~ ~ vertex position ~ ~ ~ ~ ~ ~ */
    float u = gl_TessCoord.x;
    float omu = 1.0 - u;

    float v = gl_TessCoord.y;
    float omv = 1.0 - v;

    vec4 pos =
        (omu * omv * gl_in[0].gl_Position) +
        (u * omv * gl_in[1].gl_Position) +
        (u * v * gl_in[2].gl_Position) +
        (omu * v * gl_in[3].gl_Position);

    pos = vec4(radius * normalize(pos.xyz), 1.0);
    gl_Position = MVP * pos;
    /* ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ */


    /* ~ ~ ~ ~ ~ sun position ~ ~ ~ ~ ~ ~ */
    //teSunPos = sunPosition(time);
    /* ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ */


    /* ~ ~ ~ ~ ~ atmoscattering ~ ~ ~ ~ ~ */
    //v3Direction = athmosScatter(pos.xyz);
    athmosScatter(pos.xyz);
    /* ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ */


    /* ~ ~ ~ ~ ~ ~ output ~ ~ ~ ~ ~ ~ */
    teTex = gl_TessCoord.xy;
    tePos = pos;
    rad = radius;
    /* ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ */
}