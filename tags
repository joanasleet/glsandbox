!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS	src/common.h	19;"	d
AFX_DGBALLCONSTRAINT_H__7C9E1F9A_5EC6_48BE_8C9F_FB90132C6619_H	libs/Newton/include/dgBallConstraint.h	23;"	d
AFX_DGCOLLISIONCHAMFERCYLINDER_H__AS235640FER_H	libs/Newton/include/dgCollisionChamferCylinder.h	23;"	d
AFX_DGCOLLISIONCONE_H__AS235640FER_H	libs/Newton/include/dgCollisionCone.h	23;"	d
AFX_DGCOLLISIONCONVEXHULL_H__AS235640FER_H	libs/Newton/include/dgCollisionConvexHull.h	23;"	d
AFX_DGCORKSCREWCONSTRAINT_H__GRT672DF293FR_H	libs/Newton/include/dgCorkscrewConstraint.h	23;"	d
AFX_DGHINGECONSTRAINT_H__3FF7D7AA_90CC_4BA5_B2A4_D3BA51AD2FFD_H	libs/Newton/include/dgHingeConstraint.h	23;"	d
AFX_DGSLIDINGCONSTRAINT_H__3FF7D7AA_90CC_4BA5_B2A4_D3BA51AD2FFD_H	libs/Newton/include/dgSlidingConstraint.h	23;"	d
AFX_DGUNIVERSALCONSTRAINT_H__3FA456TR_INCLUDED	libs/Newton/include/dgUniversalConstraint.h	23;"	d
AFX_DGUSERCONSTRAINT_H__97A0E0E3_C511_4761_9346_BAEC6E6322BA_H	libs/Newton/include/dgUserConstraint.h	23;"	d
AFX_DG_H__FGRTY_5GR39H_98TQ_H	libs/Newton/include/dg.h	23;"	d
ANISOTROPIC_LVL	src/Material.h	6;"	d
ASCII_OFFSET	src/Mesh.c	800;"	d	file:
ASSERT_TRACE	libs/Newton/include/test.h	135;"	d
ASSERT_TRACE	libs/Newton/include/test.h	137;"	d
ASSERT_TRACE	libs/Newton/include/test.h	138;"	d
Abs	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector Abs () const$/;"	f	class:dgVector
Abs	libs/Newton/include/dgVector.h	/^	dgVector Abs () const$/;"	f	class:dgVector
AddDampingAcceleration	libs/Newton/include/dgDeformableBody.h	/^	virtual void AddDampingAcceleration() {}$/;"	f	class:dgDeformableBody
AddDampingAcceleration	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE void dgDynamicBody::AddDampingAcceleration()$/;"	f	class:dgDynamicBody
AddDampingAcceleration	libs/Newton/include/dgKinematicBody.h	/^	virtual void AddDampingAcceleration() {}$/;"	f	class:dgKinematicBody
AddEdge	libs/Newton/include/dgGraph.h	/^typename dgGraphNode<dgNodeData, dgEdgeData>::dgListNode* dgGraphNode<dgNodeData, dgEdgeData>::AddEdge (typename dgGraph<dgNodeData, dgEdgeData>::dgListNode* const node)$/;"	f	class:dgGraphNode
AddFace	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgEdge* dgPolyhedra::AddFace (dgInt32 count, const dgInt32* const index) $/;"	f	class:dgPolyhedra
AddFace	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgEdge* dgPolyhedra::AddFace (dgInt32 v0, dgInt32 v1, dgInt32 v2)$/;"	f	class:dgPolyhedra
AddFirst	libs/Newton/include/dgList.h	/^		void AddFirst(dgListNode* const node) $/;"	f	class:dgList::dgListNode
AddForce	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE void dgDynamicBody::AddForce (const dgVector& force)$/;"	f	class:dgDynamicBody
AddForce	libs/Newton/include/dgKinematicBody.h	/^	virtual void AddForce (const dgVector& force) {}$/;"	f	class:dgKinematicBody
AddHorizontal	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> AddHorizontal () const$/;"	f	class:dgTemplateVector
AddHorizontal	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector AddHorizontal () const$/;"	f	class:dgVector
AddImpulse	libs/Newton/include/dgDeformableBody.h	/^	virtual void AddImpulse (const dgVector& pointVeloc, const dgVector& pointPosit) {dgAssert(0);}$/;"	f	class:dgDeformableBody
AddInternallyGeneratedBody	libs/Newton/include/dgBroadPhase.h	/^	void AddInternallyGeneratedBody(dgBody* const body)$/;"	f	class:dgBroadPhase
AddLast	libs/Newton/include/dgList.h	/^		void AddLast(dgListNode* const node) $/;"	f	class:dgList::dgListNode
AddNode	libs/Newton/include/dgGraph.h	/^typename dgGraph<dgNodeData, dgEdgeData>::dgListNode* dgGraph<dgNodeData, dgEdgeData>::AddNode ()$/;"	f	class:dgGraph
AddRef	libs/Newton/include/dgCollision.h	/^DG_INLINE const dgCollision* dgCollision::AddRef () const$/;"	f	class:dgCollision
AddRef	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgCollisionInstance* dgCollisionInstance::AddRef () $/;"	f	class:dgCollisionInstance
AddRef	libs/Newton/include/dgRef.h	/^inline dgRef *dgRef::AddRef () $/;"	f	class:dgRef
AddRef	libs/Newton/include/dgRefCounter.h	/^inline void dgRefCounter::AddRef()$/;"	f	class:dgRefCounter
AddTorque	libs/Newton/include/dgDeformableBody.h	/^	virtual void AddTorque (const dgVector& torque) {}$/;"	f	class:dgDeformableBody
AddTorque	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE void dgDynamicBody::AddTorque (const dgVector& torque)$/;"	f	class:dgDynamicBody
AddTorque	libs/Newton/include/dgKinematicBody.h	/^	virtual void AddTorque (const dgVector& torque) {}$/;"	f	class:dgKinematicBody
Addtop	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::Addtop ()$/;"	f	class:dgList
Addtop	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::Addtop (const T &element)$/;"	f	class:dgList
Addtop	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::Addtop (dgListNode* const node)$/;"	f	class:dgList
AdjacentdFaces	libs/Newton/include/dgPolygonSoupBuilder.h	/^class AdjacentdFaces$/;"	c
AndNot	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector AndNot (const dgVector& data) const$/;"	f	class:dgVector
Append	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::Append ()$/;"	f	class:dgList
Append	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::Append (const T &element)$/;"	f	class:dgList
Append	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::Append (dgListNode* const node)$/;"	f	class:dgList
ApplyExtenalForces	libs/Newton/include/dgKinematicBody.h	/^	virtual void ApplyExtenalForces (dgFloat32 timestep, dgInt32 threadIndex) {}$/;"	f	class:dgKinematicBody
ApplyImpulsePair	libs/Newton/include/dgDeformableBody.h	/^	virtual void ApplyImpulsePair (const dgVector& linearImpulse, const dgVector& angularImpulse) {dgAssert(0);}$/;"	f	class:dgDeformableBody
ApplyImpulsesAtPoint	libs/Newton/include/dgDeformableBody.h	/^	virtual void ApplyImpulsesAtPoint (dgInt32 count, dgInt32 strideInBytes, const dgFloat32* const impulseArray, const dgFloat32* const pointArray) {dgAssert(0);}$/;"	f	class:dgDeformableBody
Attach	libs/Newton/include/dgNode.h	/^void dgNode<T>::Attach (T* const parent, bool addFirst)$/;"	f	class:dgNode
BEGIN_MUTEX_STALLED_ROBUST	libs/Newton/include/test.h	162;"	d
BIN	Makefile	/^BIN		=	bin$/;"	m
BLACK	libs/Newton/include/dgTree.h	/^		BLACK = false$/;"	e	enum:dgRedBackNode::REDBLACK_COLOR
BUFFER_OFFSET	src/Mesh.h	8;"	d
Begin	libs/Newton/include/dgList.h	/^		void Begin()$/;"	f	class:dgList::Iterator
Begin	libs/Newton/include/dgTree.h	/^		void Begin() $/;"	f	class:dgTree::Iterator
BeginConectedSurface	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE void dgPolyhedra::BeginConectedSurface() const$/;"	f	class:dgPolyhedra
BeginFace	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE void dgPolyhedra::BeginFace ()$/;"	f	class:dgPolyhedra
BoxIntersect	libs/Newton/include/dgAABBPolygonSoup.h	/^		DG_INLINE dgFloat32 BoxIntersect (const dgFastRayTest& ray, const dgFastRayTest& obbRay, const dgFastAABBInfo& obb, const dgTriplex* const vertexArray) const$/;"	f	class:dgAABBPolygonSoup::dgNode
BoxIntersect	libs/Newton/include/dgCollisionCompound.h	/^		DG_INLINE dgInt32 BoxIntersect (const dgFastRayTest& ray, const dgVector& boxP0, const dgVector& boxP1) const$/;"	f	class:dgCollisionCompound::dgNodeBase
BoxIntersect	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgFloat32 BoxIntersect (const dgVector& minBox, const dgVector& maxBox) const$/;"	f	class:dgFastRayTest
BoxPenetration	libs/Newton/include/dgAABBPolygonSoup.h	/^		DG_INLINE dgFloat32 BoxPenetration (const dgFastAABBInfo& obb, const dgTriplex* const vertexArray) const$/;"	f	class:dgAABBPolygonSoup::dgNode
BoxPenetration	libs/Newton/include/dgIntersections.h	/^DG_INLINE dgFloat32 BoxPenetration (const dgVector& minBox, const dgVector& maxBox)$/;"	f
BoxTest	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgInt32 BoxTest (const dgVector& minBox, const dgVector& maxBox) const$/;"	f	class:dgFastRayTest
BroadcastW	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector BroadcastW () const$/;"	f	class:dgVector
BroadcastX	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector BroadcastX () const$/;"	f	class:dgVector
BroadcastY	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector BroadcastY () const$/;"	f	class:dgVector
BroadcastZ	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector BroadcastZ () const$/;"	f	class:dgVector
CAMERA_H	src/Camera.h	2;"	d
CASE	staticbin/stb_image.c	2161;"	d	file:
CASE	staticbin/stb_image.c	2174;"	d	file:
CASE	staticbin/stb_image.c	2177;"	d	file:
CASE	staticbin/stb_image.c	2190;"	d	file:
CASE	staticbin/stb_image.c	533;"	d	file:
CASE	staticbin/stb_image.c	551;"	d	file:
CC	Makefile	/^CC		=	gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS	=	$(WALL) $(PENDAN) $(NOWARN) $(STD) $(DEBUG) -I$(LIBD) -I$(SRC) $(CHECK)$/;"	m
CHECK	Makefile	/^CHECK	=	-fsanitize=undefined$/;"	m
CLOCK_MONOTONIC	libs/Newton/include/dgTypes.h	901;"	d
CLOCK_REALTIME	libs/Newton/include/dgTypes.h	900;"	d
COMBO	staticbin/stb_image.c	532;"	d	file:
COMMON_H	src/common.h	2;"	d
CONFIG_SCRIPT	src/Engine.h	11;"	d
CONTEXT_H	src/Context.h	2;"	d
Cache	src/LuaScript.h	/^typedef lua_State Cache;$/;"	t
CalCulatePath	libs/Newton/include/dgPathFinder.h	/^const dgPathNode<NODEID, COST>* dgPathFinder<NODEID, COST>::CalCulatePath (NODEID source, NODEID goal)$/;"	f	class:dgPathFinder
CalcInvInertiaMatrix	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::CalcInvInertiaMatrix ()$/;"	f	class:dgBody
CalcObb	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::CalcObb (dgVector& origin, dgVector& size) const$/;"	f	class:dgCollisionInstance
CalculateInertiaAndCenterOfMass	libs/Newton/include/dgCollision.h	/^	virtual dgMatrix CalculateInertiaAndCenterOfMass (const dgMatrix& m_alignMatrix, const dgVector& localScale, const dgMatrix& matrix) const {dgAssert (0); return dgGetZeroMatrix();}$/;"	f	class:dgCollision
CalculateInertiaMatrix	libs/Newton/include/dgDeformableBody.h	/^	virtual dgMatrix CalculateInertiaMatrix () const {return dgGetZeroMatrix();}$/;"	f	class:dgDeformableBody
CalculateInvInertiaMatrix	libs/Newton/include/dgDeformableBody.h	/^	virtual dgMatrix CalculateInvInertiaMatrix () const {return dgGetZeroMatrix();}$/;"	f	class:dgDeformableBody
CalculateMassProperties	libs/Newton/include/dgCollision.h	/^	virtual dgFloat32 CalculateMassProperties (const dgMatrix& offset, dgVector& inertia, dgVector& crossInertia, dgVector& centerOfMass) const {dgAssert (0); return 0;}$/;"	f	class:dgCollision
CalculateMinExtend2d	libs/Newton/include/dgCollisionHeightField.h	/^DG_INLINE void dgCollisionHeightField::CalculateMinExtend2d (const dgVector& p0, const dgVector& p1, dgVector& boxP0, dgVector& boxP1) const$/;"	f	class:dgCollisionHeightField
CalculateMinExtend3d	libs/Newton/include/dgCollisionHeightField.h	/^DG_INLINE void dgCollisionHeightField::CalculateMinExtend3d (const dgVector& p0, const dgVector& p1, dgVector& boxP0, dgVector& boxP1) const$/;"	f	class:dgCollisionHeightField
CalculateSignature	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgInt32 dgCollisionInstance::CalculateSignature () const$/;"	f	class:dgCollisionInstance
CalculateSurfaceArea	libs/Newton/include/dgBroadPhase.h	/^	DG_INLINE dgFloat32 CalculateSurfaceArea(const dgBroadPhaseNode* const node0, const dgBroadPhaseNode* const node1, dgVector& minBox, dgVector& maxBox) const$/;"	f	class:dgBroadPhase
Camera	src/Camera.h	/^} Camera;$/;"	t	typeref:struct:__anon52
CheckStaticDynamic	libs/Newton/include/dgBroadPhaseDefault.h	/^	virtual void CheckStaticDynamic(dgBody* const body, dgFloat32 mass) {}$/;"	f	class:dgBroadPhaseDefault
CholeskyDecomposition	libs/Newton/include/dgGeneralMatrix.h	/^bool dgGeneralMatrix<T>::CholeskyDecomposition()$/;"	f	class:dgGeneralMatrix
Clear	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::Clear (T val)$/;"	f	class:dgGeneralMatrix
Clear	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::Clear (T val)$/;"	f	class:dgGeneralVector
Clear	libs/Newton/include/dgNode.h	/^inline void dgBaseNode::Clear()$/;"	f	class:dgBaseNode
CompProduct3	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> CompProduct3 (const dgTemplateVector<T>& A) const$/;"	f	class:dgTemplateVector
CompProduct3	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector CompProduct3 (const dgVector& A) const$/;"	f	class:dgVector
CompProduct4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> CompProduct4 (const dgTemplateVector<T>& A) const$/;"	f	class:dgTemplateVector
CompProduct4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector CompProduct4 (const dgVector& A) const$/;"	f	class:dgVector
CompareKeys	libs/Newton/include/dgTree.h	/^dgInt32 dgTree<OBJECT, KEY>::CompareKeys (const KEY &key0, const KEY &key1) const$/;"	f	class:dgTree
ConstraintsForceFeeback	libs/Newton/include/dgConstraint.h	/^typedef void (dgApi *ConstraintsForceFeeback) (const dgConstraint& me, dgFloat32 timestep, dgInt32 threadIndex);$/;"	t
Context	src/Context.h	/^} Context;$/;"	t	typeref:struct:__anon48
Copy	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::Copy (const dgGeneralVector<T> &src)$/;"	f	class:dgGeneralVector
CreateClone	libs/Newton/include/dgNode.h	/^dgRef *dgNode<T>::CreateClone () const$/;"	f	class:dgNode
CreateClone	libs/Newton/include/dgRef.h	/^inline dgRef *dgRef::CreateClone () const$/;"	f	class:dgRef
CrossProduct4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> CrossProduct4 (const dgTemplateVector &A, const dgTemplateVector &B) const$/;"	f	class:dgTemplateVector
CrossProduct4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector CrossProduct4 (const dgVector& A, const dgVector& B) const$/;"	f	class:dgVector
DEBUG	Makefile	/^DEBUG	=	-g -pg$/;"	m
DG_BILATERAL_CONSTRAINT	libs/Newton/include/dgConstraint.h	31;"	d
DG_BILATERAL_CONTRAINT_DOF	libs/Newton/include/dgBilateralConstraint.h	27;"	d
DG_BILATERAL_FRICTION_CONSTRAINT	libs/Newton/include/dgConstraint.h	33;"	d
DG_BODY_LRU_STEP	libs/Newton/include/dgWorldDynamicUpdate.h	34;"	d
DG_BROADPHASE_MAX_STACK_DEPTH	libs/Newton/include/dgBroadPhase.h	38;"	d
DG_CACHE_DIST_TOL	libs/Newton/include/dgBroadPhase.h	37;"	d
DG_CAPSULE_SEGMENTS	libs/Newton/include/dgCollisionCapsule.h	28;"	d
DG_CAPSULE_SEGMENTS	libs/Newton/include/dgCollisionTaperedCapsule.h	30;"	d
DG_CAP_SEGMENTS	libs/Newton/include/dgCollisionCapsule.h	27;"	d
DG_CAP_SEGMENTS	libs/Newton/include/dgCollisionTaperedCapsule.h	29;"	d
DG_CHAMFERCYLINDER_BRAKES	libs/Newton/include/dgCollisionChamferCylinder.h	28;"	d
DG_CHAMFERCYLINDER_SLICES	libs/Newton/include/dgCollisionChamferCylinder.h	27;"	d
DG_CLASS_ALLOCATOR	libs/Newton/include/dgMemory.h	60;"	d
DG_CLASS_ALLOCATOR_DELETE	libs/Newton/include/dgMemory.h	52;"	d
DG_CLASS_ALLOCATOR_DELETE_ARRAY	libs/Newton/include/dgMemory.h	53;"	d
DG_CLASS_ALLOCATOR_DELETE_ARRAY_DUMMY	libs/Newton/include/dgMemory.h	57;"	d
DG_CLASS_ALLOCATOR_DELETE_DUMMY	libs/Newton/include/dgMemory.h	56;"	d
DG_CLASS_ALLOCATOR_NEW	libs/Newton/include/dgMemory.h	50;"	d
DG_CLASS_ALLOCATOR_NEW_ARRAY	libs/Newton/include/dgMemory.h	51;"	d
DG_CLASS_ALLOCATOR_NEW_ARRAY_DUMMY	libs/Newton/include/dgMemory.h	55;"	d
DG_CLASS_ALLOCATOR_NEW_DUMMY	libs/Newton/include/dgMemory.h	54;"	d
DG_CLIP_MAX_COUNT	libs/Newton/include/dgCollisionConvex.h	27;"	d
DG_CLIP_MAX_POINT_COUNT	libs/Newton/include/dgCollisionConvex.h	28;"	d
DG_COLLISION_COMPOUND_FRACTURED_H	libs/Newton/include/dgCollisionCompoundFractured.h	23;"	d
DG_COMPOUND_STACK_DEPTH	libs/Newton/include/dgCollisionCompound.h	33;"	d
DG_CONE_SEGMENTS	libs/Newton/include/dgCollisionCone.h	27;"	d
DG_CONSTRAINT_MAX_ROWS	libs/Newton/include/dgConstraint.h	35;"	d
DG_CONVEX_POLYGON_MAX_VERTEX_COUNT	libs/Newton/include/dgCollisionConvexPolygon.h	28;"	d
DG_COUNT_FLOAT_OPS	libs/Newton/include/dgGeneralVector.h	28;"	d
DG_CYLINDER_SEGMENTS	libs/Newton/include/dgCollisionCylinder.h	27;"	d
DG_CYLINDER_SEGMENTS	libs/Newton/include/dgCollisionTaperedCylinder.h	27;"	d
DG_ErrTolerance	libs/Newton/include/dgDynamicBody.h	33;"	d
DG_ErrTolerance2	libs/Newton/include/dgDynamicBody.h	34;"	d
DG_FREEZE_MAG	libs/Newton/include/dgDynamicBody.h	30;"	d
DG_FREEZE_MAG2	libs/Newton/include/dgDynamicBody.h	31;"	d
DG_FREEZZING_VELOCITY_DRAG	libs/Newton/include/dgWorldDynamicUpdate.h	38;"	d
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgBody.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgBody
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgBody.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:struct:dgLineBox
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgBroadPhase.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgBroadPhaseNode
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollision.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgCollision
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollision.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgCollisionInfo
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollisionBVH.h	/^	} DG_GCC_VECTOR_ALIGMENT;$/;"	m	class:dgCollisionBVH	typeref:struct:dgCollisionBVH::dgBVHRay
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollisionCompound.h	/^	} DG_GCC_VECTOR_ALIGMENT;$/;"	m	class:dgCollisionCompound	typeref:class:dgCollisionCompound::dgNodeBase
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollisionCompound.h	/^	} DG_GCC_VECTOR_ALIGMENT;$/;"	m	class:dgCollisionCompound	typeref:class:dgCollisionCompound::dgOOBBTestData
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollisionConvex.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgCollisionConvex
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollisionConvexPolygon.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgCollisionConvexPolygon
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollisionMesh.h	/^	}DG_GCC_VECTOR_ALIGMENT;$/;"	m	class:dgCollisionMesh	typeref:class:dgCollisionMesh::dgMeshVertexListIndexList
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollisionMesh.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgPolygonMeshDesc
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgCollisionMesh.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgCollisionMeshRayHitDesc
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgConstraint.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgConstraint
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgConstraint.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgContraintDescritor
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgConstraint.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgJacobian
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgConstraint.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgJacobianPair
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgContact.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgCollisionParamProxy
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgContact.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgContact
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgContact.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgContactMaterial
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgContact.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgContactPoint
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgDeformableBody.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgDeformableBody
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgDynamicBody.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgDynamicBody
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgIntersections.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgFastAABBInfo
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgIntersections.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgFastRayTest
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgKinematicBody.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgKinematicBody
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgMatrix.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgMatrix
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgObb.h	/^} DG_GCC_VECTOR_ALIGMENT; $/;"	v	typeref:class:dgObb
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgPlane.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgBigPlane
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgPlane.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgPlane
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgPolyhedra.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgEdge
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgQuaternion.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgQuaternion
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgTypes.h	192;"	d
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgTypes.h	196;"	d
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgVector.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgBigVector
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgVector.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgVector
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgVector.h	/^}DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgVector
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgWorld.h	/^} DG_GCC_VECTOR_ALIGMENT ;$/;"	v	typeref:class:dgWorld
DG_GCC_VECTOR_ALIGMENT	libs/Newton/include/dgWorldDynamicUpdate.h	/^} DG_GCC_VECTOR_ALIGMENT;$/;"	v	typeref:class:dgJacobianMatrixElement
DG_GOOGOL_SIZE	libs/Newton/include/dgGoogol.h	34;"	d
DG_IMPULSIVE_CONTACT_PENETRATION	libs/Newton/include/dgContact.h	40;"	d
DG_INDEX_COUNT_BITS	libs/Newton/include/dgAABBPolygonSoup.h	47;"	d
DG_INFINITE_MASS	libs/Newton/include/dgBody.h	39;"	d
DG_INLINE	libs/Newton/include/dgTypes.h	177;"	d
DG_INLINE	libs/Newton/include/dgTypes.h	179;"	d
DG_MAX_BOUND	libs/Newton/include/dgConstraint.h	27;"	d
DG_MAX_CHAMFERCYLINDER_DIR_COUNT	libs/Newton/include/dgCollisionChamferCylinder.h	29;"	d
DG_MAX_COLLIDING_FACES	libs/Newton/include/dgCollisionMesh.h	31;"	d
DG_MAX_COLLIDING_INDICES	libs/Newton/include/dgCollisionMesh.h	32;"	d
DG_MAX_COLLISION_AABB_PADDING	libs/Newton/include/dgCollisionInstance.h	26;"	d
DG_MAX_CONTATCS	libs/Newton/include/dgContact.h	37;"	d
DG_MAX_CONTINUE_COLLISON_STEPS	libs/Newton/include/dgWorldDynamicUpdate.h	53;"	d
DG_MAX_DESTROYED_BODIES_BY_FORCE	libs/Newton/include/dgWorld.h	39;"	d
DG_MAX_PATH_ENUMERATION_CHILDREN	libs/Newton/include/dgPathFinder.h	32;"	d
DG_MAX_SKELETON_JOINT_COUNT	libs/Newton/include/dgWorldDynamicUpdate.h	36;"	d
DG_MAX_SPEED_ATT	libs/Newton/include/dgDynamicBody.h	29;"	d
DG_MAX_THREADS_HIVE_COUNT	libs/Newton/include/dgTypes.h	165;"	d
DG_MAX_TIMESTEP	libs/Newton/include/NewtonClass.h	31;"	d
DG_MEMORY_BIN_ENTRIES	libs/Newton/include/dgMemory.h	84;"	d
DG_MEMORY_BIN_SIZE	libs/Newton/include/dgMemory.h	83;"	d
DG_MEMORY_GRANULARITY	libs/Newton/include/dgMemory.h	81;"	d
DG_MEMORY_GRANULARITY_BITS	libs/Newton/include/dgMemory.h	77;"	d
DG_MEMORY_SIZE	libs/Newton/include/dgMemory.h	82;"	d
DG_MESH_EFFECT_BVH_STACK_DEPTH	libs/Newton/include/dgMeshEffect.h	42;"	d
DG_MESH_EFFECT_INITIAL_VERTEX_SIZE	libs/Newton/include/dgMeshEffect.h	36;"	d
DG_MESH_EFFECT_POINT_SPLITED	libs/Newton/include/dgMeshEffect.h	38;"	d
DG_MESH_EFFECT_PRECISION_BITS	libs/Newton/include/dgMeshEffect.h	31;"	d
DG_MESH_EFFECT_PRECISION_SCALE	libs/Newton/include/dgMeshEffect.h	32;"	d
DG_MESH_EFFECT_PRECISION_SCALE_INV	libs/Newton/include/dgMeshEffect.h	33;"	d
DG_MINIMUM_MASS	libs/Newton/include/dgBody.h	38;"	d
DG_MIN_BOUND	libs/Newton/include/dgConstraint.h	28;"	d
DG_MIN_SPEED_ATT	libs/Newton/include/dgDynamicBody.h	28;"	d
DG_MIN_TIMESTEP	libs/Newton/include/NewtonClass.h	32;"	d
DG_MSC_VECTOR_ALIGMENT	libs/Newton/include/dgTypes.h	193;"	d
DG_MSC_VECTOR_ALIGMENT	libs/Newton/include/dgTypes.h	195;"	d
DG_NORMAL_CONSTRAINT	libs/Newton/include/dgConstraint.h	32;"	d
DG_PROFILER_EVENT_NAME_SIZE	libs/Newton/include/dgThreadProfiler.h	27;"	d
DG_PRUNE_CONTACT_TOLERANCE	libs/Newton/include/dgWorld.h	36;"	d
DG_PSD_DAMP_TOL	libs/Newton/include/dgWorldDynamicUpdate.h	30;"	d
DG_REDUCE_CONTACT_TOLERANCE	libs/Newton/include/dgWorld.h	35;"	d
DG_RESTING_CONTACT_PENETRATION	libs/Newton/include/dgContact.h	38;"	d
DG_SCALAR_VECTOR_CLASS	libs/Newton/include/dgTypes.h	137;"	d
DG_SCALAR_VECTOR_CLASS	libs/Newton/include/dgTypes.h	143;"	d
DG_SKELETON_BASEW_UNIQUE_ID	libs/Newton/include/dgSkeletonContainer.h	26;"	d
DG_SKELETON_BIT_SHIFT_KEY	libs/Newton/include/dgSkeletonContainer.h	25;"	d
DG_SLEEP_ENTRIES	libs/Newton/include/dgWorld.h	38;"	d
DG_SMALL_ISLAND_COUNT	libs/Newton/include/dgWorldDynamicUpdate.h	35;"	d
DG_SOFTBODY_BASE_SIZE	libs/Newton/include/dgCollisionDeformableMesh.h	34;"	d
DG_SOLVER_MAX_ERROR	libs/Newton/include/dgWorldDynamicUpdate.h	39;"	d
DG_SPHERE_VERTEX_COUNT	libs/Newton/include/dgCollisionSphere.h	28;"	d
DG_SSE4_INSTRUCTIONS_SET	libs/Newton/include/dgTypes.h	113;"	d
DG_SSE4_INSTRUCTIONS_SET	libs/Newton/include/dgTypes.h	129;"	d
DG_SSE4_INSTRUCTIONS_SET	libs/Newton/include/dgTypes.h	141;"	d
DG_SSE4_INSTRUCTIONS_SET	libs/Newton/include/dgTypes.h	93;"	d
DG_THREAD_POOL_JOB_SIZE	libs/Newton/include/dgThreadHive.h	33;"	d
DG_TIMESTEP	libs/Newton/include/NewtonClass.h	30;"	d
DG_TRACE	libs/Newton/include/dgDebug.h	28;"	d
DG_TRACK_MEMORY_LEAKS_ENTRIES	libs/Newton/include/dgMemory.h	149;"	d
DG_VECTOR_SIMD_SIZE	libs/Newton/include/dgTypes.h	184;"	d
DG_VERTEXLIST_INDEXLIST_TOL	libs/Newton/include/dgMeshEffect.h	37;"	d
DLL_DECLSPEC	libs/Newton/include/dgTypes.h	173;"	d
DWORD	libs/Newton/include/pthread.h	1360;"	d
DWORD	libs/Newton/include/pthread.h	312;"	d
DWORD_PTR	libs/Newton/include/pthread.h	/^typedef unsigned long DWORD_PTR;$/;"	t
DefList	src/Util.h	145;"	d
DeleteEdge	libs/Newton/include/dgGraph.h	/^void dgGraphNode<dgNodeData, dgEdgeData>::DeleteEdge(typename dgGraphNode<dgNodeData, dgEdgeData>::dgListNode* const edge)$/;"	f	class:dgGraphNode
DeleteEdge	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE void dgPolyhedra::DeleteEdge (dgInt32 v0, dgInt32 v1)$/;"	f	class:dgPolyhedra
DeleteHalfEdge	libs/Newton/include/dgGraph.h	/^void dgGraphNode<dgNodeData, dgEdgeData>::DeleteHalfEdge(typename dgGraphNode<dgNodeData, dgEdgeData>::dgListNode* const edge)$/;"	f	class:dgGraphNode
DeleteNode	libs/Newton/include/dgGraph.h	/^void dgGraph<dgNodeData, dgEdgeData>::DeleteNode (typename dgGraph<dgNodeData, dgEdgeData>::dgListNode* const node)$/;"	f	class:dgGraph
Detach	libs/Newton/include/dgNode.h	/^void dgNode<T>::Detach ()$/;"	f	class:dgNode
DotProduct	libs/Newton/include/dgGeneralVector.h	/^T dgGeneralVector<T>::DotProduct (const dgGeneralVector<T> &A) const $/;"	f	class:dgGeneralVector
DotProduct	libs/Newton/include/dgQuaternion.h	/^inline dgFloat32 dgQuaternion::DotProduct (const dgQuaternion &QB) const$/;"	f	class:dgQuaternion
DotProduct4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> DotProduct4 (const dgTemplateVector &A) const$/;"	f	class:dgTemplateVector
DotProduct4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector DotProduct4 (const dgVector &A) const$/;"	f	class:dgVector
DotProduct4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector DotProduct4 (const dgVector& A) const$/;"	f	class:dgVector
DrawFunc	src/Mesh.h	/^typedef void (*DrawFunc)(GLenum, GLint *, GLsizei);$/;"	t
DrawFuncs	src/LookupManager.c	/^DrawFunc DrawFuncs[] = {$/;"	v
DrawMode	src/LookupManager.c	/^GLuint DrawMode[] = {$/;"	v
E2BIG	libs/Newton/include/need_errno.h	89;"	d
EACCES	libs/Newton/include/need_errno.h	95;"	d
EAGAIN	libs/Newton/include/need_errno.h	93;"	d
EBADF	libs/Newton/include/need_errno.h	91;"	d
EBUSY	libs/Newton/include/need_errno.h	97;"	d
ECHILD	libs/Newton/include/need_errno.h	92;"	d
EDEADLK	libs/Newton/include/need_errno.h	115;"	d
EDEADLK	libs/Newton/include/pthread.h	285;"	d
EDEADLK	libs/Newton/include/pthread.h	287;"	d
EDEADLOCK	libs/Newton/include/need_errno.h	139;"	d
EDOM	libs/Newton/include/need_errno.h	113;"	d
EEXIST	libs/Newton/include/need_errno.h	98;"	d
EFAULT	libs/Newton/include/need_errno.h	96;"	d
EFBIG	libs/Newton/include/need_errno.h	107;"	d
EILSEQ	libs/Newton/include/need_errno.h	130;"	d
EINTR	libs/Newton/include/need_errno.h	86;"	d
EINVAL	libs/Newton/include/need_errno.h	103;"	d
EIO	libs/Newton/include/need_errno.h	87;"	d
EISDIR	libs/Newton/include/need_errno.h	102;"	d
EMFILE	libs/Newton/include/need_errno.h	105;"	d
EMLINK	libs/Newton/include/need_errno.h	111;"	d
ENAMETOOLONG	libs/Newton/include/need_errno.h	119;"	d
END_MUTEX_STALLED_ROBUST	libs/Newton/include/test.h	169;"	d
ENFILE	libs/Newton/include/need_errno.h	104;"	d
ENGINE_H	src/Engine.h	2;"	d
ENODEV	libs/Newton/include/need_errno.h	100;"	d
ENOENT	libs/Newton/include/need_errno.h	84;"	d
ENOEXEC	libs/Newton/include/need_errno.h	90;"	d
ENOLCK	libs/Newton/include/need_errno.h	122;"	d
ENOMEM	libs/Newton/include/need_errno.h	94;"	d
ENOSPC	libs/Newton/include/need_errno.h	108;"	d
ENOSYS	libs/Newton/include/need_errno.h	123;"	d
ENOSYS	libs/Newton/include/pthread.h	280;"	d
ENOTDIR	libs/Newton/include/need_errno.h	101;"	d
ENOTEMPTY	libs/Newton/include/need_errno.h	127;"	d
ENOTRECOVERABLE	libs/Newton/include/need_errno.h	134;"	d
ENOTRECOVERABLE	libs/Newton/include/pthread.h	296;"	d
ENOTSUP	libs/Newton/include/pthread.h	272;"	d
ENOTTY	libs/Newton/include/need_errno.h	106;"	d
ENXIO	libs/Newton/include/need_errno.h	88;"	d
EOWNERDEAD	libs/Newton/include/need_errno.h	133;"	d
EOWNERDEAD	libs/Newton/include/pthread.h	293;"	d
EPERM	libs/Newton/include/need_errno.h	83;"	d
EPIPE	libs/Newton/include/need_errno.h	112;"	d
ERANGE	libs/Newton/include/need_errno.h	114;"	d
EROFS	libs/Newton/include/need_errno.h	110;"	d
ERR_LOG_NAME	src/Util.h	13;"	d
ERR_SEVERITY	src/LookupManager.c	/^const char *ERR_SEVERITY[] = {$/;"	v
ERR_SOURCE	src/LookupManager.c	/^const char *ERR_SOURCE[] = {$/;"	v
ERR_TYPE	src/LookupManager.c	/^const char *ERR_TYPE[] = {$/;"	v
ESPIPE	libs/Newton/include/need_errno.h	109;"	d
ESRCH	libs/Newton/include/need_errno.h	85;"	d
ETIMEDOUT	libs/Newton/include/implement.h	63;"	d
ETIMEDOUT	libs/Newton/include/pthread.h	276;"	d
EXCEPTION_PTW32_SERVICES	libs/Newton/include/implement.h	534;"	d
EXDEV	libs/Newton/include/need_errno.h	99;"	d
EigenVectors	libs/Newton/include/dgMatrix.h	/^DG_INLINE void dgMatrix::EigenVectors (const dgMatrix& initialGuess)$/;"	f	class:dgMatrix
End	libs/Newton/include/dgList.h	/^		void End()$/;"	f	class:dgList::Iterator
End	libs/Newton/include/dgTree.h	/^		void End()  $/;"	f	class:dgTree::Iterator
EndConectedSurface	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE void dgPolyhedra::EndConectedSurface() const$/;"	f	class:dgPolyhedra
Engine	src/Engine.h	/^} Engine;$/;"	t	typeref:struct:__anon43
EnumerateChildren	libs/Newton/include/dgPathFinder.h	/^dgInt32 dgPathFinder<NODEID, COST>::EnumerateChildren(NODEID parent, NODEID array[]) const$/;"	f	class:dgPathFinder
Evalue	libs/Newton/include/dgPlane.h	/^DG_INLINE dgFloat32 dgPlane::Evalue (const dgFloat32* const point) const$/;"	f	class:dgPlane
Evalue	libs/Newton/include/dgPlane.h	/^DG_INLINE dgFloat32 dgPlane::Evalue (const dgVector& point) const$/;"	f	class:dgPlane
Evalue	libs/Newton/include/dgPlane.h	/^DG_INLINE dgFloat64 dgBigPlane::Evalue (const dgBigVector &point) const$/;"	f	class:dgBigPlane
Evalue	libs/Newton/include/dgPlane.h	/^DG_INLINE dgFloat64 dgBigPlane::Evalue (const dgFloat32* const point) const$/;"	f	class:dgBigPlane
Evalue	libs/Newton/include/dgPlane.h	/^DG_INLINE dgFloat64 dgBigPlane::Evalue (const dgFloat64* const point) const$/;"	f	class:dgBigPlane
Evalue	libs/Newton/include/dgPlane.h	/^DG_INLINE dgFloat64 dgBigPlane::Evalue (const dgVector &point) const$/;"	f	class:dgBigPlane
EvaluePlane	libs/Newton/include/dgGoogol.h	/^	dgGoogol EvaluePlane (const dgHugeVector& point) const $/;"	f	class:dgHugeVector
ExpandCapacityIfNeessesary	libs/Newton/include/dgArray.h	/^bool dgArray<T>::ExpandCapacityIfNeessesary (dgInt32 index, dgInt32 stride) const$/;"	f	class:dgArray
FALSE	src/common.h	23;"	d
FAST_BITS	staticbin/stb_image.c	631;"	d	file:
FONTMAP_SIZE	src/Mesh.c	801;"	d	file:
FONTMAP_SIZE_F	src/Mesh.c	802;"	d	file:
Find	libs/Newton/include/dgHeap.h	/^dgInt32 dgHeapBase<OBJECT,KEY>::Find (KEY key)$/;"	f	class:dgHeapBase
Find	libs/Newton/include/dgHeap.h	/^dgInt32 dgHeapBase<OBJECT,KEY>::Find (OBJECT &obj)$/;"	f	class:dgHeapBase
Find	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::Find (const T &element) const$/;"	f	class:dgList
Find	libs/Newton/include/dgNode.h	/^T* dgNode<T>::Find (const char* const name) const$/;"	f	class:dgNode
Find	libs/Newton/include/dgNode.h	/^T* dgNode<T>::Find (dgUnsigned32 nameCRC) const $/;"	f	class:dgNode
Find	libs/Newton/include/dgNode.h	/^inline dgBaseNode *dgBaseNode::Find (const char* const name) const$/;"	f	class:dgBaseNode
Find	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::Find (KEY key) const$/;"	f	class:dgTree
FindEdge	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgEdge *dgPolyhedra::FindEdge (dgInt32 i0, dgInt32 i1) const$/;"	f	class:dgPolyhedra
FindEdgeNode	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgPolyhedra::dgTreeNode* dgPolyhedra::FindEdgeNode (dgInt32 i0, dgInt32 i1) const$/;"	f	class:dgPolyhedra
FindGreater	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::FindGreater (KEY key) const$/;"	f	class:dgTree
FindGreaterEqual	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::FindGreaterEqual (KEY key) const$/;"	f	class:dgTree
FindLessEqual	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::FindLessEqual (KEY key) const$/;"	f	class:dgTree
Floor	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector Floor () const$/;"	f	class:dgVector
Flush	libs/Newton/include/dgHeap.h	/^void dgHeapBase<OBJECT,KEY>::Flush () $/;"	f	class:dgHeapBase
GLFW_DLL	src/common.h	15;"	d
GaussianPivotStep	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::GaussianPivotStep ($/;"	f	class:dgGeneralMatrix
GetAABB	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::GetAABB (dgVector &p0, dgVector &p1) const$/;"	f	class:dgBody
GetAABB	libs/Newton/include/dgConvexHull3d.h	/^inline void dgConvexHull3d::GetAABB (dgBigVector& boxP0, dgBigVector& boxP1) const$/;"	f	class:dgConvexHull3d
GetAdjacentFaceEdgeNormalArray	libs/Newton/include/dgCollisionMesh.h	/^	DG_INLINE const dgInt32* GetAdjacentFaceEdgeNormalArray(const dgInt32* const faceIndexArray, dgInt32 indexCount) const$/;"	f	class:dgPolygonMeshDesc
GetAlignMatrix	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const dgMatrix& dgCollisionInstance::GetAlignMatrix () const$/;"	f	class:dgCollisionInstance
GetAllocator	libs/Newton/include/dgCollision.h	/^DG_INLINE dgMemoryAllocator* dgCollision::GetAllocator() const$/;"	f	class:dgCollision
GetAllocator	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgMemoryAllocator* dgCollisionInstance::GetAllocator() const$/;"	f	class:dgCollisionInstance
GetAllocator	libs/Newton/include/dgList.h	/^dgMemoryAllocator* dgList<T>::GetAllocator () const$/;"	f	class:dgList
GetAllocator	libs/Newton/include/dgTree.h	/^dgMemoryAllocator* dgTree<OBJECT, KEY>::GetAllocator () const$/;"	f	class:dgTree
GetAllocator	libs/Newton/include/dgWorld.h	/^inline dgMemoryAllocator* dgWorld::GetAllocator() const$/;"	f	class:dgWorld
GetAngularDamping	libs/Newton/include/dgDeformableBody.h	/^	virtual dgVector GetAngularDamping () const {return m_dummy;}$/;"	f	class:dgDeformableBody
GetAngularDamping	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE dgVector dgDynamicBody::GetAngularDamping () const$/;"	f	class:dgDynamicBody
GetAngularDamping	libs/Newton/include/dgKinematicBody.h	/^	virtual dgVector GetAngularDamping () const {return m_dummy;}$/;"	f	class:dgKinematicBody
GetApparentMass	libs/Newton/include/dgBody.h	/^DG_INLINE dgVector dgBody::GetApparentMass() const$/;"	f	class:dgBody
GetAttribute	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgMeshEffect::dgVertexAtribute& dgMeshEffect::GetAttribute (dgInt32 index) const $/;"	f	class:dgMeshEffect
GetAttributePool	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgFloat64* dgMeshEffect::GetAttributePool() const $/;"	f	class:dgMeshEffect
GetAutoSleep	libs/Newton/include/dgBody.h	/^DG_INLINE bool dgBody::GetAutoSleep () const$/;"	f	class:dgBody
GetBackNode	libs/Newton/include/dgAABBPolygonSoup.h	/^	DG_INLINE void* GetBackNode(const void* const root) const $/;"	f	class:dgAABBPolygonSoup
GetBody	libs/Newton/include/dgBodyMasterList.h	/^	dgBody* GetBody() const	{ return m_body;}$/;"	f	class:dgBodyMasterListRow
GetBody	libs/Newton/include/dgBroadPhase.h	/^	virtual dgBody* GetBody() const$/;"	f	class:dgBroadPhaseBodyNode
GetBody	libs/Newton/include/dgBroadPhase.h	/^	virtual dgBody* GetBody() const$/;"	f	class:dgBroadPhaseNode
GetBody0	libs/Newton/include/dgConstraint.h	/^inline dgBody* dgConstraint::GetBody0 () const$/;"	f	class:dgConstraint
GetBody1	libs/Newton/include/dgConstraint.h	/^inline dgBody* dgConstraint::GetBody1 () const$/;"	f	class:dgConstraint
GetBoxMaxRadius	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgFloat32 dgCollisionInstance::GetBoxMaxRadius () const$/;"	f	class:dgCollisionInstance
GetBoxMinRadius	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgFloat32 dgCollisionInstance::GetBoxMinRadius () const$/;"	f	class:dgCollisionInstance
GetBoxOrigin	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgVector dgCollisionInstance::GetBoxOrigin() const$/;"	f	class:dgCollisionInstance
GetBoxSize	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgVector dgCollisionInstance::GetBoxSize() const$/;"	f	class:dgCollisionInstance
GetBreakImpulse	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgFloat32 dgCollisionInstance::GetBreakImpulse() const$/;"	f	class:dgCollisionInstance
GetBroadPhase	libs/Newton/include/dgBody.h	/^DG_INLINE dgBroadPhaseNode* dgBody::GetBroadPhase() const$/;"	f	class:dgBody
GetBroadPhase	libs/Newton/include/dgWorld.h	/^inline dgBroadPhase* dgWorld::GetBroadPhase() const$/;"	f	class:dgWorld
GetBroadPhaseAggregate	libs/Newton/include/dgBody.h	/^DG_INLINE dgBroadPhaseAggregate* dgBody::GetBroadPhaseAggregate() const$/;"	f	class:dgBody
GetBytesCapacity	libs/Newton/include/dgArray.h	/^dgInt32 dgArray<T>::GetBytesCapacity () const$/;"	f	class:dgArray
GetCentreOfMass	libs/Newton/include/dgBody.h	/^DG_INLINE const dgVector& dgBody::GetCentreOfMass () const$/;"	f	class:dgBody
GetChild	libs/Newton/include/dgNode.h	/^T* dgNode<T>::GetChild () const$/;"	f	class:dgNode
GetChild	libs/Newton/include/dgNode.h	/^inline dgBaseNode *dgBaseNode::GetChild () const$/;"	f	class:dgBaseNode
GetChildShape	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const dgCollision* dgCollisionInstance::GetChildShape() const $/;"	f	class:dgCollisionInstance
GetClosestDistance	libs/Newton/include/dgContact.h	/^inline dgFloat32 dgContact::GetClosestDistance() const$/;"	f	class:dgContact
GetColCount	libs/Newton/include/dgGeneralMatrix.h	/^dgInt32 dgGeneralMatrix<T>::GetColCount() const$/;"	f	class:dgGeneralMatrix
GetCollision	libs/Newton/include/dgBody.h	/^DG_INLINE dgCollisionInstance* dgBody::GetCollision () const$/;"	f	class:dgBody
GetCollisionHandle	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const void* dgCollisionInstance::GetCollisionHandle () const$/;"	f	class:dgCollisionInstance
GetCollisionInfo	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::GetCollisionInfo(dgCollisionInfo* const info) const$/;"	f	class:dgCollisionInstance
GetCollisionMode	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE bool dgCollisionInstance::GetCollisionMode() const$/;"	f	class:dgCollisionInstance
GetCollisionPrimityType	libs/Newton/include/dgCollision.h	/^DG_INLINE dgCollisionID dgCollision::GetCollisionPrimityType () const$/;"	f	class:dgCollision
GetCollisionPrimityType	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgCollisionID dgCollisionInstance::GetCollisionPrimityType () const$/;"	f	class:dgCollisionInstance
GetCollisionWithLinkedBodies	libs/Newton/include/dgBody.h	/^DG_INLINE bool dgBody::GetCollisionWithLinkedBodies () const$/;"	f	class:dgBody
GetColor	libs/Newton/include/dgTree.h	/^inline dgRedBackNode::REDBLACK_COLOR  dgRedBackNode::GetColor () const$/;"	f	class:dgRedBackNode
GetCombinedScaleType	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgCollisionInstance::dgScaleType dgCollisionInstance::GetCombinedScaleType(dgCollisionInstance::dgScaleType type) const$/;"	f	class:dgCollisionInstance
GetContinueCollisionMode	libs/Newton/include/dgBody.h	/^DG_INLINE bool dgBody::GetContinueCollisionMode () const$/;"	f	class:dgBody
GetConvexVertexCount	libs/Newton/include/dgCollision.h	/^DG_INLINE dgInt32 dgCollision::GetConvexVertexCount() const $/;"	f	class:dgCollision
GetConvexVertexCount	libs/Newton/include/dgCollisionConvex.h	/^	virtual dgInt32 GetConvexVertexCount() const { return m_vertexCount;}$/;"	f	class:dgCollisionConvex
GetConvexVertexCount	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgInt32 dgCollisionInstance::GetConvexVertexCount() const $/;"	f	class:dgCollisionInstance
GetCostFromParent	libs/Newton/include/dgPathFinder.h	/^COST dgPathFinder<NODEID, COST>::GetCostFromParent(const dgPathNode<NODEID, COST>& node) const$/;"	f	class:dgPathFinder
GetCount	libs/Newton/include/dgAABBPolygonSoup.h	/^			DG_INLINE dgUnsigned32 GetCount() const $/;"	f	class:dgAABBPolygonSoup::dgNode::dgLeafNodePtr
GetCount	libs/Newton/include/dgHeap.h	/^dgInt32 dgHeapBase<OBJECT,KEY>::GetCount() const$/;"	f	class:dgHeapBase
GetCount	libs/Newton/include/dgList.h	/^dgInt32 dgList<T>::GetCount() const$/;"	f	class:dgList
GetCount	libs/Newton/include/dgTree.h	/^dgInt32 dgTree<OBJECT, KEY>::GetCount() const$/;"	f	class:dgTree
GetDebugCollisionCallback	libs/Newton/include/dgCollisionMesh.h	/^	dgCollisionMeshCollisionCallback GetDebugCollisionCallback() const { return m_debugCallback;} $/;"	f	class:dgCollisionMesh
GetDebugRayCastCallback	libs/Newton/include/dgCollisionBVH.h	/^	dgCollisionBVHUserRayCastCallback GetDebugRayCastCallback() const { return m_userRayCastCallback;} $/;"	f	class:dgCollisionBVH
GetDebugRayCastCallback	libs/Newton/include/dgCollisionHeightField.h	/^	dgCollisionHeightFieldRayCastCallback GetDebugRayCastCallback() const { return m_userRayCastCallback;} $/;"	f	class:dgCollisionHeightField
GetDestructorCallback	libs/Newton/include/dgBody.h	/^DG_INLINE dgBody::OnBodyDestroy dgBody::GetDestructorCallback () const$/;"	f	class:dgBody
GetDiagonal	libs/Newton/include/dgConvexHull3d.h	/^inline dgFloat64 dgConvexHull3d::GetDiagonal() const$/;"	f	class:dgConvexHull3d
GetEdgeCount	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgInt32 dgPolyhedra::GetEdgeCount() const$/;"	f	class:dgPolyhedra
GetElementSize	libs/Newton/include/dgArray.h	/^dgInt32 dgArray<T>::GetElementSize() const$/;"	f	class:dgArray
GetElementsCapacity	libs/Newton/include/dgArray.h	/^dgInt32 dgArray<T>::GetElementsCapacity () const$/;"	f	class:dgArray
GetElementsCount	libs/Newton/include/dgStack.h	/^dgInt32 dgStack<T>::GetElementsCount() const$/;"	f	class:dgStack
GetEstimatedCostToGoal	libs/Newton/include/dgPathFinder.h	/^COST dgPathFinder<NODEID, COST>::GetEstimatedCostToGoal(NODEID id) const$/;"	f	class:dgPathFinder
GetExtForceAndTorqueCallback	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE dgBody::OnApplyExtForceAndTorque dgDynamicBody::GetExtForceAndTorqueCallback () const$/;"	f	class:dgDynamicBody
GetExtForceAndTorqueCallback	libs/Newton/include/dgKinematicBody.h	/^	virtual OnApplyExtForceAndTorque GetExtForceAndTorqueCallback () const {return NULL;}$/;"	f	class:dgKinematicBody
GetFaceId	libs/Newton/include/dgCollisionMesh.h	/^	DG_INLINE dgInt32 GetFaceId(const dgInt32* const faceIndexArray, dgInt32 indexCount) const$/;"	f	class:dgPolygonMeshDesc
GetFaceIndexCount	libs/Newton/include/dgCollisionMesh.h	/^	DG_INLINE dgInt32 GetFaceIndexCount(dgInt32 indexCount) const$/;"	f	class:dgPolygonMeshDesc
GetFaceSize	libs/Newton/include/dgCollisionMesh.h	/^	DG_INLINE dgFloat32 GetFaceSize(const dgInt32* const faceIndexArray, dgInt32 indexCount) const$/;"	f	class:dgPolygonMeshDesc
GetFirst	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::GetFirst() const$/;"	f	class:dgList
GetFirst	libs/Newton/include/dgNode.h	/^T* dgNode<T>::GetFirst() const$/;"	f	class:dgNode
GetFirstLayer	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgMeshEffect* dgMeshEffect::GetFirstLayer ()$/;"	f	class:dgMeshEffect
GetFloatOps	libs/Newton/include/dgGeneralVector.h	/^dgInt32 dgGeneralVector<T>::GetFloatOps()$/;"	f	class:dgGeneralVector
GetForce	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE const dgVector& dgDynamicBody::GetForce() const$/;"	f	class:dgDynamicBody
GetForce	libs/Newton/include/dgKinematicBody.h	/^	virtual const dgVector& GetForce() const {return m_dummy;}$/;"	f	class:dgKinematicBody
GetFreeze	libs/Newton/include/dgBody.h	/^DG_INLINE bool dgBody::GetFreeze () const$/;"	f	class:dgBody
GetFrontNode	libs/Newton/include/dgAABBPolygonSoup.h	/^	DG_INLINE void* GetFrontNode(const void* const root) const $/;"	f	class:dgAABBPolygonSoup
GetGlobalMatrix	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const dgMatrix& dgCollisionInstance::GetGlobalMatrix () const$/;"	f	class:dgCollisionInstance
GetGroupID	libs/Newton/include/dgBody.h	/^DG_INLINE dgUnsigned32 dgBody::GetGroupID () const$/;"	f	class:dgBody
GetHead	libs/Newton/include/dgFastQueue.h	/^const T& dgFastQueue<T, sizeInPowerOfTwo>::GetHead() const$/;"	f	class:dgFastQueue
GetHeight	libs/Newton/include/dgCollisionCapsule.h	/^	dgFloat32 GetHeight() const {return m_height;}$/;"	f	class:dgCollisionCapsule
GetHighKey	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgInt32 dgPolyhedra::dgPairKey::GetHighKey () const $/;"	f	class:dgPolyhedra::dgPairKey
GetHullVertexArray	libs/Newton/include/dgConvexHull4d.h	/^inline const dgHullVector* dgConvexHull4d::GetHullVertexArray() const$/;"	f	class:dgConvexHull4d
GetId	libs/Newton/include/dgConstraint.h	/^inline dgUnsigned32 dgConstraint::GetId () const$/;"	f	class:dgConstraint
GetId	libs/Newton/include/dgPathFinder.h	/^NODEID dgPathNode<NODEID, COST>::GetId () const$/;"	f	class:dgPathNode
GetId	libs/Newton/include/dgSkeletonContainer.h	/^	dgInt32 GetId () const {return m_id;}$/;"	f	class:dgSkeletonContainer
GetIndex	libs/Newton/include/dgAABBPolygonSoup.h	/^			DG_INLINE dgUnsigned32 GetIndex() const $/;"	f	class:dgAABBPolygonSoup::dgNode::dgLeafNodePtr
GetIndirectLock	libs/Newton/include/dgThreadHive.h	/^DG_INLINE void dgThreadHive::GetIndirectLock (dgThread::dgCriticalSection* const criticalSectionLock, bool yield) const$/;"	f	class:dgThreadHive
GetInertiaMatrix	libs/Newton/include/dgBody.h	/^DG_INLINE const dgMatrix& dgBody::GetInertiaMatrix () const $/;"	f	class:dgBody
GetInertiaMatrix	libs/Newton/include/dgDeformableBody.h	/^	virtual const dgMatrix& GetInertiaMatrix () const {return dgGetZeroMatrix();}$/;"	f	class:dgDeformableBody
GetInfo	libs/Newton/include/dgList.h	/^		T& GetInfo()$/;"	f	class:dgList::dgListNode
GetInfo	libs/Newton/include/dgTree.h	/^		OBJECT& GetInfo()$/;"	f	class:dgTree::dgTreeNode
GetInt	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector GetInt () const$/;"	f	class:dgVector
GetInvMass	libs/Newton/include/dgBody.h	/^DG_INLINE dgVector dgBody::GetInvMass() const$/;"	f	class:dgBody
GetInvScale	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const dgVector& dgCollisionInstance::GetInvScale () const$/;"	f	class:dgCollisionInstance
GetJointCount	libs/Newton/include/dgSkeletonContainer.h	/^	dgInt32 GetJointCount () const {return m_nodeCount - 1;}$/;"	f	class:dgSkeletonContainer
GetKey	libs/Newton/include/dgTree.h	/^		KEY GetKey () const$/;"	f	class:dgTree::Iterator
GetKey	libs/Newton/include/dgTree.h	/^		const KEY& GetKey() const$/;"	f	class:dgTree::dgTreeNode
GetLRU	libs/Newton/include/dgBroadPhase.h	/^	DG_INLINE dgUnsigned32 GetLRU() const$/;"	f	class:dgBroadPhase
GetLast	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::GetLast() const$/;"	f	class:dgList
GetLast	libs/Newton/include/dgNode.h	/^T* dgNode<T>::GetLast() const$/;"	f	class:dgNode
GetLastVertexIndex	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgInt32 dgPolyhedra::GetLastVertexIndex() const$/;"	f	class:dgPolyhedra
GetLeft	libs/Newton/include/dgBroadPhase.h	/^	virtual dgBroadPhaseNode* GetLeft() const$/;"	f	class:dgBroadPhaseNode
GetLeft	libs/Newton/include/dgBroadPhase.h	/^	virtual dgBroadPhaseNode* GetLeft() const$/;"	f	class:dgBroadPhaseTreeNode
GetLeft	libs/Newton/include/dgTree.h	/^		dgTreeNode* GetLeft () const$/;"	f	class:dgTree::dgTreeNode
GetLinearDamping	libs/Newton/include/dgDeformableBody.h	/^	virtual dgFloat32 GetLinearDamping () const {return dgFloat32 (0.0f);}$/;"	f	class:dgDeformableBody
GetLinearDamping	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE dgFloat32 dgDynamicBody::GetLinearDamping () const$/;"	f	class:dgDynamicBody
GetLinearDamping	libs/Newton/include/dgKinematicBody.h	/^	virtual dgFloat32 GetLinearDamping () const {return dgFloat32 (0.0f);}$/;"	f	class:dgKinematicBody
GetLink0	libs/Newton/include/dgConstraint.h	/^inline dgBodyMasterListRow::dgListNode* dgConstraint::GetLink0()	const$/;"	f	class:dgConstraint
GetLink1	libs/Newton/include/dgConstraint.h	/^inline dgBodyMasterListRow::dgListNode* dgConstraint::GetLink1()	const$/;"	f	class:dgConstraint
GetLocalMatrix	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const dgMatrix& dgCollisionInstance::GetLocalMatrix () const$/;"	f	class:dgCollisionInstance
GetLocalVertexPool	libs/Newton/include/dgPolygonSoupDatabase.h	/^inline dgFloat32* dgPolygonSoupDatabase::GetLocalVertexPool() const$/;"	f	class:dgPolygonSoupDatabase
GetLowKey	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgInt32 dgPolyhedra::dgPairKey::GetLowKey () const $/;"	f	class:dgPolyhedra::dgPairKey
GetMark	libs/Newton/include/dgConvexHull3d.h	/^	dgInt32 GetMark() const {return m_mark;}$/;"	f	class:dgConvexHull3DFace
GetMark	libs/Newton/include/dgConvexHull4d.h	/^	dgInt32 GetMark() const { return m_mark; }$/;"	f	class:dgConvexHull4dTetraherum
GetMass	libs/Newton/include/dgBody.h	/^DG_INLINE dgVector dgBody::GetMass() const$/;"	f	class:dgBody
GetMasterList	libs/Newton/include/dgBody.h	/^DG_INLINE dgBodyMasterList::dgListNode* dgBody::GetMasterList() const$/;"	f	class:dgBody
GetMaterial	libs/Newton/include/dgContact.h	/^inline const dgContactMaterial* dgContact::GetMaterial() const$/;"	f	class:dgContact
GetMaterialID	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgInt32 dgMeshEffect::GetMaterialID (dgIndexArray* const handle, dgInt32 materialHandle) const$/;"	f	class:dgMeshEffect
GetMaterialIndexCount	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgInt32 dgMeshEffect::GetMaterialIndexCount (dgIndexArray* const handle, dgInt32 materialHandle) const$/;"	f	class:dgMeshEffect
GetMatrix	libs/Newton/include/dgBody.h	/^DG_INLINE const dgMatrix& dgBody::GetMatrix() const$/;"	f	class:dgBody
GetMatrixUpdateCallback	libs/Newton/include/dgBody.h	/^DG_INLINE dgBody::OnMatrixUpdateCallback dgBody::GetMatrixUpdateCallback () const$/;"	f	class:dgBody
GetMax	libs/Newton/include/dgVector.h	/^	dgVector GetMax (const dgVector& data) const$/;"	f	class:dgVector
GetMaxCount	libs/Newton/include/dgHeap.h	/^dgInt32 dgHeapBase<OBJECT,KEY>::GetMaxCount() const$/;"	f	class:dgHeapBase
GetMaxDOF	libs/Newton/include/dgConstraint.h	/^inline dgInt32 dgConstraint::GetMaxDOF() const$/;"	f	class:dgConstraint
GetMemWrites	libs/Newton/include/dgGeneralVector.h	/^dgInt32 dgGeneralVector<T>::GetMemWrites()$/;"	f	class:dgGeneralVector
GetMin	libs/Newton/include/dgVector.h	/^	dgVector GetMin (const dgVector& data) const$/;"	f	class:dgVector
GetName	libs/Newton/include/dgRef.h	/^inline const char* dgRef::GetName () const$/;"	f	class:dgRef
GetNameID	libs/Newton/include/dgRef.h	/^inline dgUnsigned32 dgRef::GetNameID () const$/;"	f	class:dgRef
GetNetForce	libs/Newton/include/dgBody.h	/^DG_INLINE const dgVector& dgBody::GetNetForce() const$/;"	f	class:dgBody
GetNetTorque	libs/Newton/include/dgBody.h	/^DG_INLINE const dgVector& dgBody::GetNetTorque() const$/;"	f	class:dgBody
GetNext	libs/Newton/include/dgList.h	/^		dgListNode *GetNext() const$/;"	f	class:dgList::dgListNode
GetNext	libs/Newton/include/dgNode.h	/^T* dgNode<T>::GetNext() const$/;"	f	class:dgNode
GetNext	libs/Newton/include/dgPathFinder.h	/^const dgPathNode<NODEID, COST>* dgPathNode<NODEID, COST>::GetNext() const$/;"	f	class:dgPathNode
GetNextLayer	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgMeshEffect* dgMeshEffect::GetNextLayer (dgMeshEffect* const layerSegment)$/;"	f	class:dgMeshEffect
GetNode	libs/Newton/include/dgAABBPolygonSoup.h	/^			DG_INLINE dgNode* GetNode (const void* const root) const$/;"	f	class:dgAABBPolygonSoup::dgNode::dgLeafNodePtr
GetNode	libs/Newton/include/dgList.h	/^		dgListNode *GetNode() const$/;"	f	class:dgList::Iterator
GetNode	libs/Newton/include/dgTree.h	/^		dgTreeNode* GetNode() const$/;"	f	class:dgTree::Iterator
GetNodeAABB	libs/Newton/include/dgAABBPolygonSoup.h	/^	DG_INLINE void GetNodeAABB(const void* const root, dgVector& p0, dgVector& p1) const $/;"	f	class:dgAABBPolygonSoup
GetNodeFromInfo	libs/Newton/include/dgList.h	/^typename dgList<T>::dgListNode *dgList<T>::GetNodeFromInfo (T &info) const$/;"	f	class:dgList
GetNodeFromInfo	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::GetNodeFromInfo (OBJECT &info) const$/;"	f	class:dgTree
GetNodeFromNodeData	libs/Newton/include/dgGraph.h	/^typename dgGraph<dgNodeData, dgEdgeData>::dgListNode* dgGraph<dgNodeData, dgEdgeData>::GetNodeFromNodeData(dgNodeData* const nodeData)$/;"	f	class:dgGraph
GetNormalIndex	libs/Newton/include/dgCollisionMesh.h	/^	DG_INLINE dgInt32 GetNormalIndex(const dgInt32* const faceIndexArray, dgInt32 indexCount) const$/;"	f	class:dgPolygonMeshDesc
GetNormalPool	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgFloat64* dgMeshEffect::GetNormalPool() const $/;"	f	class:dgMeshEffect
GetObbOrigin	libs/Newton/include/dgCollision.h	/^DG_INLINE const dgVector& dgCollision::GetObbOrigin() const$/;"	f	class:dgCollision
GetObbSize	libs/Newton/include/dgCollision.h	/^DG_INLINE dgVector dgCollision::GetObbSize() const$/;"	f	class:dgCollision
GetOmega	libs/Newton/include/dgBody.h	/^DG_INLINE const dgVector& dgBody::GetOmega() const$/;"	f	class:dgBody
GetParent	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const dgCollisionInstance* dgCollisionInstance::GetParent () const$/;"	f	class:dgCollisionInstance
GetParent	libs/Newton/include/dgNode.h	/^T* dgNode<T>::GetParent () const$/;"	f	class:dgNode
GetParent	libs/Newton/include/dgNode.h	/^inline dgBaseNode *dgBaseNode::GetParent () const$/;"	f	class:dgBaseNode
GetParent	libs/Newton/include/dgPathFinder.h	/^const dgPathNode<NODEID, COST>* dgPathNode<NODEID, COST>::GetParent() const$/;"	f	class:dgPathNode
GetParent	libs/Newton/include/dgTree.h	/^		dgTreeNode* GetParent ()$/;"	f	class:dgTree::dgTreeNode
GetPosition	libs/Newton/include/dgBody.h	/^DG_INLINE const dgVector& dgBody::GetPosition() const$/;"	f	class:dgBody
GetPrev	libs/Newton/include/dgList.h	/^		dgListNode *GetPrev() const$/;"	f	class:dgList::dgListNode
GetPrev	libs/Newton/include/dgNode.h	/^T* dgNode<T>::GetPrev() const$/;"	f	class:dgNode
GetPropertiesCount	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgInt32 dgMeshEffect::GetPropertiesCount() const$/;"	f	class:dgMeshEffect
GetPropertiesStrideInByte	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgInt32 dgMeshEffect::GetPropertiesStrideInByte() const $/;"	f	class:dgMeshEffect
GetRadius	libs/Newton/include/dgCollisionCapsule.h	/^	dgFloat32 GetRadius() const {return m_radius;}$/;"	f	class:dgCollisionCapsule
GetRadius	libs/Newton/include/dgPolygonSoupDatabase.h	/^inline dgFloat32 dgPolygonSoupDatabase::GetRadius() const$/;"	f	class:dgPolygonSoupDatabase
GetRef	libs/Newton/include/dgRefCounter.h	/^inline int dgRefCounter::GetRef() const$/;"	f	class:dgRefCounter
GetRefCount	libs/Newton/include/dgCollision.h	/^DG_INLINE dgInt32 dgCollision::GetRefCount() const$/;"	f	class:dgCollision
GetRefCount	libs/Newton/include/dgRef.h	/^inline dgInt32 dgRef::GetRefCount() const$/;"	f	class:dgRef
GetRight	libs/Newton/include/dgBroadPhase.h	/^	virtual dgBroadPhaseNode* GetRight() const$/;"	f	class:dgBroadPhaseNode
GetRight	libs/Newton/include/dgBroadPhase.h	/^	virtual dgBroadPhaseNode* GetRight() const$/;"	f	class:dgBroadPhaseTreeNode
GetRight	libs/Newton/include/dgTree.h	/^		dgTreeNode* GetRight () const$/;"	f	class:dgTree::dgTreeNode
GetRoot	libs/Newton/include/dgNode.h	/^T* dgNode<T>::GetRoot () const$/;"	f	class:dgNode
GetRoot	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::GetRoot () const$/;"	f	class:dgTree
GetRootNode	libs/Newton/include/dgAABBPolygonSoup.h	/^	DG_INLINE void* GetRootNode() const $/;"	f	class:dgAABBPolygonSoup
GetRotation	libs/Newton/include/dgBody.h	/^DG_INLINE const dgQuaternion& dgBody::GetRotation() const$/;"	f	class:dgBody
GetRowCount	libs/Newton/include/dgGeneralMatrix.h	/^dgInt32 dgGeneralMatrix<T>::GetRowCount() const$/;"	f	class:dgGeneralMatrix
GetRowCount	libs/Newton/include/dgGeneralVector.h	/^dgInt32 dgGeneralVector<T>::GetRowCount() const$/;"	f	class:dgGeneralVector
GetRttiType	libs/Newton/include/dgRef.h	/^inline dgUnsigned32 dgRef::GetRttiType()$/;"	f	class:dgRef
GetScalar	libs/Newton/include/dgVector.h	/^	DG_INLINE dgFloat32 GetScalar () const$/;"	f	class:dgVector
GetScale	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const dgVector& dgCollisionInstance::GetScale () const$/;"	f	class:dgCollisionInstance
GetScaleType	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgCollisionInstance::dgScaleType dgCollisionInstance::GetScaleType() const$/;"	f	class:dgCollisionInstance
GetSelfCollision	libs/Newton/include/dgBroadPhaseAggregate.h	/^	bool GetSelfCollision() const $/;"	f	class:dgBroadPhaseAggregate
GetShape	libs/Newton/include/dgCollisionCompound.h	/^		DG_INLINE dgCollisionInstance* GetShape() const $/;"	f	class:dgCollisionCompound::dgNodeBase
GetSibling	libs/Newton/include/dgNode.h	/^T* dgNode<T>::GetSibling () const$/;"	f	class:dgNode
GetSibling	libs/Newton/include/dgNode.h	/^inline dgBaseNode *dgBaseNode::GetSibling () const$/;"	f	class:dgBaseNode
GetSignMask	libs/Newton/include/dgVector.h	/^	DG_INLINE dgInt32 GetSignMask() const$/;"	f	class:dgVector
GetSignature	libs/Newton/include/dgCollision.h	/^DG_INLINE dgUnsigned32 dgCollision::GetSignature () const$/;"	f	class:dgCollision
GetSignature	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgUnsigned32 dgCollisionInstance::GetSignature () const$/;"	f	class:dgCollisionInstance
GetSizeInBytes	libs/Newton/include/dgStack.h	/^dgInt32 dgStack<T>::GetSizeInBytes() const$/;"	f	class:dgStack
GetSleepState	libs/Newton/include/dgBody.h	/^DG_INLINE bool dgBody::GetSleepState () const$/;"	f	class:dgBody
GetStiffness	libs/Newton/include/dgConstraint.h	/^inline dgFloat32 dgConstraint::GetStiffness() const$/;"	f	class:dgConstraint
GetStrideInBytes	libs/Newton/include/dgPolygonSoupDatabase.h	/^inline dgInt32 dgPolygonSoupDatabase::GetStrideInBytes() const$/;"	f	class:dgPolygonSoupDatabase
GetTagId	libs/Newton/include/dgPolygonSoupDatabase.h	/^inline dgUnsigned32 dgPolygonSoupDatabase::GetTagId(const dgInt32* const face, dgInt32 indexCount) const$/;"	f	class:dgPolygonSoupDatabase
GetTimeOfImpact	libs/Newton/include/dgContact.h	/^inline dgFloat32 dgContact::GetTimeOfImpact() const$/;"	f	class:dgContact
GetTorque	libs/Newton/include/dgDeformableBody.h	/^	virtual const dgVector& GetTorque() const {return m_dummy;}$/;"	f	class:dgDeformableBody
GetTorque	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE const dgVector& dgDynamicBody::GetTorque() const$/;"	f	class:dgDynamicBody
GetTorque	libs/Newton/include/dgKinematicBody.h	/^	virtual const dgVector& GetTorque() const {return m_dummy;}$/;"	f	class:dgKinematicBody
GetTwin	libs/Newton/include/dgConvexHull3d.h	/^	dgList<dgConvexHull3DFace>::dgListNode* GetTwin(dgInt32 index) const { return m_twin[index];}$/;"	f	class:dgConvexHull3DFace
GetType	libs/Newton/include/dgBody.h	/^DG_INLINE dgBody::dgType dgBody::GetType () const$/;"	f	class:dgBody
GetTypeId	libs/Newton/include/dgRef.h	/^inline dgUnsigned32 dgRef::GetTypeId () const$/;"	f	class:dgRef
GetTypeId	libs/Newton/include/dgRtti.h	/^inline dgUnsigned32 dgRtti::GetTypeId() const$/;"	f	class:dgRtti
GetUV0Pool	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgFloat64* dgMeshEffect::GetUV0Pool() const $/;"	f	class:dgMeshEffect
GetUV1Pool	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgFloat64* dgMeshEffect::GetUV1Pool() const $/;"	f	class:dgMeshEffect
GetUmbraClipSize	libs/Newton/include/dgCollision.h	/^DG_INLINE dgFloat32 dgCollision::GetUmbraClipSize () const$/;"	f	class:dgCollision
GetUmbraClipSize	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgFloat32 dgCollisionInstance::GetUmbraClipSize () const$/;"	f	class:dgCollisionInstance
GetUniqueID	libs/Newton/include/dgBody.h	/^DG_INLINE dgInt32 dgBody::GetUniqueID () const $/;"	f	class:dgBody
GetUserData	libs/Newton/include/dgBody.h	/^DG_INLINE void* dgBody::GetUserData() const$/;"	f	class:dgBody
GetUserData	libs/Newton/include/dgContact.h	/^inline void* dgContactMaterial::GetUserData () const$/;"	f	class:dgContactMaterial
GetUserData0	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void* dgCollisionInstance::GetUserData0 () const$/;"	f	class:dgCollisionInstance
GetUserData1	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void* dgCollisionInstance::GetUserData1 () const$/;"	f	class:dgCollisionInstance
GetUserDataID	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgUnsigned32 dgCollisionInstance::GetUserDataID () const$/;"	f	class:dgCollisionInstance
GetUserFlag0	libs/Newton/include/dgRef.h	/^inline bool dgRef::GetUserFlag0 () const$/;"	f	class:dgRef
GetUserFlag1	libs/Newton/include/dgRef.h	/^inline bool dgRef::GetUserFlag1 () const$/;"	f	class:dgRef
GetVal	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgInt64 dgPolyhedra::dgPairKey::GetVal () const $/;"	f	class:dgPolyhedra::dgPairKey
GetVelocity	libs/Newton/include/dgBody.h	/^DG_INLINE const dgVector& dgBody::GetVelocity() const$/;"	f	class:dgBody
GetVelocityAtPoint	libs/Newton/include/dgBody.h	/^DG_INLINE dgVector dgBody::GetVelocityAtPoint (const dgVector& point) const$/;"	f	class:dgBody
GetVertex	libs/Newton/include/dgConvexHull3d.h	/^inline const dgBigVector& dgConvexHull3d::GetVertex(dgInt32 index) const$/;"	f	class:dgConvexHull3d
GetVertex	libs/Newton/include/dgConvexHull4d.h	/^inline const dgBigVector& dgConvexHull4d::GetVertex(dgInt32 index) const$/;"	f	class:dgConvexHull4d
GetVertex	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgBigVector& dgMeshEffect::GetVertex (dgInt32 index) const$/;"	f	class:dgMeshEffect
GetVertexCount	libs/Newton/include/dgConvexHull3d.h	/^inline dgInt32 dgConvexHull3d::GetVertexCount() const$/;"	f	class:dgConvexHull3d
GetVertexCount	libs/Newton/include/dgConvexHull4d.h	/^inline dgInt32 dgConvexHull4d::GetVertexCount() const$/;"	f	class:dgConvexHull4d
GetVertexCount	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgInt32 dgMeshEffect::GetVertexCount() const$/;"	f	class:dgMeshEffect
GetVertexCount	libs/Newton/include/dgPolygonSoupDatabase.h	/^inline dgInt32 dgPolygonSoupDatabase::GetVertexCount()	const$/;"	f	class:dgPolygonSoupDatabase
GetVertexIndex	libs/Newton/include/dgConvexHull4d.h	/^inline dgInt32 dgConvexHull4d::GetVertexIndex(dgInt32 index) const$/;"	f	class:dgConvexHull4d
GetVertexNormals	libs/Newton/include/dgCollisionCompoundFractured.h	/^		const dgFloat32* GetVertexNormals() const {return m_normal;};$/;"	f	class:dgCollisionCompoundFractured::dgVertexBuffer
GetVertexPool	libs/Newton/include/dgConvexHull3d.h	/^inline const dgBigVector* dgConvexHull3d::GetVertexPool() const$/;"	f	class:dgConvexHull3d
GetVertexPool	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgFloat64* dgMeshEffect::GetVertexPool () const $/;"	f	class:dgMeshEffect
GetVertexPositions	libs/Newton/include/dgCollisionCompoundFractured.h	/^		const dgFloat32* GetVertexPositions() const {return m_vertex;};$/;"	f	class:dgCollisionCompoundFractured::dgVertexBuffer
GetVertexStrideInByte	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgInt32 dgMeshEffect::GetVertexStrideInByte() const $/;"	f	class:dgMeshEffect
GetVertexToEdgeMapping	libs/Newton/include/dgCollisionConvex.h	/^	virtual const dgConvexSimplexEdge** GetVertexToEdgeMapping() const {return NULL;}$/;"	f	class:dgCollisionConvex
GetVertexToEdgeMapping	libs/Newton/include/dgCollisionConvexHull.h	/^	virtual const dgConvexSimplexEdge** GetVertexToEdgeMapping() const {return m_vertexToEdgeMapping;}$/;"	f	class:dgCollisionConvexHull
GetVertexUVs	libs/Newton/include/dgCollisionCompoundFractured.h	/^		const dgFloat32* GetVertexUVs() const {return m_uv;};$/;"	f	class:dgCollisionCompoundFractured::dgVertexBuffer
GetVolume	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgFloat32 dgCollisionInstance::GetVolume () const$/;"	f	class:dgCollisionInstance
GetWorld	libs/Newton/include/dgBody.h	/^DG_INLINE dgWorld* dgBody::GetWorld() const$/;"	f	class:dgBody
GetWorld	libs/Newton/include/dgBroadPhase.h	/^	dgWorld* GetWorld() const { return m_world;}$/;"	f	class:dgBroadPhase
GetWorld	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE const dgWorld* dgCollisionInstance::GetWorld() const$/;"	f	class:dgCollisionInstance
GlobalLock	libs/Newton/include/dgThreadHive.h	/^DG_INLINE void dgThreadHive::GlobalLock(bool yield) const$/;"	f	class:dgThreadHive
GlobalUnlock	libs/Newton/include/dgThreadHive.h	/^DG_INLINE void dgThreadHive::GlobalUnlock() const$/;"	f	class:dgThreadHive
HANDLE	libs/Newton/include/pthread.h	1357;"	d
HANDLE	libs/Newton/include/pthread.h	308;"	d
HAVE_C_INLINE	libs/Newton/include/config.h	130;"	d
HAVE_C_INLINE	libs/Newton/include/config.h	148;"	d
HAVE_C_INLINE	libs/Newton/include/config.h	44;"	d
HAVE_GCC_ATOMIC_BUILTINS	libs/Newton/include/config.h	55;"	d
HAVE_MODE_T	libs/Newton/include/config.h	125;"	d
HAVE_MODE_T	libs/Newton/include/config.h	134;"	d
HAVE_MODE_T	libs/Newton/include/config.h	137;"	d
HAVE_MODE_T	libs/Newton/include/config.h	47;"	d
HAVE_MODE_T	libs/Newton/include/pthread.h	250;"	d
HAVE_MODE_T	libs/Newton/include/pthread.h	252;"	d
HAVE_MODE_T	libs/Newton/include/sched.h	101;"	d
HAVE_MODE_T	libs/Newton/include/sched.h	103;"	d
HAVE_MODE_T	libs/Newton/include/semaphore.h	100;"	d
HAVE_MODE_T	libs/Newton/include/semaphore.h	102;"	d
HAVE_PTW32_CONFIG_H	libs/Newton/include/pthread.h	115;"	d
HAVE_SIGNAL_H	libs/Newton/include/config.h	147;"	d
HAVE_SIGNAL_H	libs/Newton/include/config.h	17;"	d
HAVE_SIGNAL_H	libs/Newton/include/pthread.h	114;"	d
HAVE_SIGSET_T	libs/Newton/include/config.h	14;"	d
HAVE_STRUCT_TIMESPEC	libs/Newton/include/config.h	126;"	d
HAVE_STRUCT_TIMESPEC	libs/Newton/include/config.h	135;"	d
HAVE_STRUCT_TIMESPEC	libs/Newton/include/config.h	58;"	d
HAVE_STRUCT_TIMESPEC	libs/Newton/include/pthread.h	113;"	d
HAVE_STRUCT_TIMESPEC	libs/Newton/include/pthread.h	249;"	d
HAVE_STRUCT_TIMESPEC	libs/Newton/include/pthread.h	317;"	d
HAVE_STRUCT_TIMESPEC	libs/Newton/include/sched.h	100;"	d
HAVE_STRUCT_TIMESPEC	libs/Newton/include/semaphore.h	99;"	d
HAVE_TASM32	libs/Newton/include/config.h	20;"	d
IARATIO	src/Mesh.c	799;"	d	file:
INFO_LOG_NAME	src/Util.h	14;"	d
INLINE	libs/Newton/include/implement.h	83;"	d
INLINE	libs/Newton/include/implement.h	85;"	d
INPUTMANAGER_H	src/InputManager.h	2;"	d
IS_ROBUST	libs/Newton/include/test.h	182;"	d
Identity	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::Identity ()$/;"	f	class:dgGeneralMatrix
IncLRU	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgInt32 dgPolyhedra::IncLRU() const$/;"	f	class:dgPolyhedra
IncMark	libs/Newton/include/dgConvexHull4d.h	/^inline dgInt32 dgConvexHull4d::IncMark ()$/;"	f	class:dgConvexHull4d
Init	libs/Newton/include/dgBilateralConstraint.h	/^	virtual void Init (){dgAssert (0);}$/;"	f	class:dgBilateralConstraint
Initdata	libs/Newton/include/dgTree.h	/^inline void dgRedBackNode::Initdata (dgRedBackNode* const parent)$/;"	f	class:dgRedBackNode
Insert	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::Insert (const OBJECT &element, KEY key)$/;"	f	class:dgTree
Insert	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::Insert (const OBJECT &element, KEY key, bool& elementWasInTree)$/;"	f	class:dgTree
Insert	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::Insert (typename dgTree<OBJECT, KEY>::dgTreeNode* const node, KEY key)$/;"	f	class:dgTree
Insert	libs/Newton/include/dgWorldDynamicUpdate.h	/^	void Insert (T info) $/;"	f	class:dgQueue
InsertAfter	libs/Newton/include/dgList.h	/^void dgList<T>::InsertAfter (dgListNode* const root, dgListNode* const node)$/;"	f	class:dgList
InsertBefore	libs/Newton/include/dgList.h	/^void dgList<T>::InsertBefore (dgListNode* const root, dgListNode* const node)$/;"	f	class:dgList
IntToPointer	libs/Newton/include/dgTypes.h	666;"	d
InvMagSqrt	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector InvMagSqrt () const$/;"	f	class:dgVector
InvSqrt	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector InvSqrt () const$/;"	f	class:dgVector
Inverse	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix dgMatrix::Inverse () const$/;"	f	class:dgMatrix
Inverse	libs/Newton/include/dgQuaternion.h	/^inline dgQuaternion dgQuaternion::Inverse () const $/;"	f	class:dgQuaternion
IsActive	libs/Newton/include/dgConstraint.h	/^inline bool dgConstraint::IsActive() const$/;"	f	class:dgConstraint
IsAggregate	libs/Newton/include/dgBroadPhase.h	/^	virtual bool IsAggregate() const$/;"	f	class:dgBroadPhaseNode
IsAggregate	libs/Newton/include/dgBroadPhaseAggregate.h	/^	virtual bool IsAggregate() const$/;"	f	class:dgBroadPhaseAggregate
IsAlive	libs/Newton/include/dgRef.h	/^inline bool dgRef::IsAlive() const$/;"	f	class:dgRef
IsBilateral	libs/Newton/include/dgBilateralConstraint.h	/^	virtual bool IsBilateral () const {return true;}$/;"	f	class:dgBilateralConstraint
IsBilateral	libs/Newton/include/dgConstraint.h	/^inline bool dgConstraint::IsBilateral() const$/;"	f	class:dgConstraint
IsCollidable	libs/Newton/include/dgBody.h	/^DG_INLINE bool dgBody::IsCollidable() const$/;"	f	class:dgBody
IsCollidable	libs/Newton/include/dgConstraint.h	/^inline bool dgConstraint::IsCollidable () const$/;"	f	class:dgConstraint
IsDeformable	libs/Newton/include/dgContact.h	/^inline bool dgContact::IsDeformable() const $/;"	f	class:dgContact
IsDeformable	libs/Newton/include/dgDeformableBody.h	/^inline bool dgDeformableBody::IsDeformable() const$/;"	f	class:dgDeformableBody
IsDeformable	libs/Newton/include/dgDeformableContact.h	/^inline bool dgDeformableContact::IsDeformable() const $/;"	f	class:dgDeformableContact
IsEmpty	libs/Newton/include/dgFastQueue.h	/^bool dgFastQueue<T, sizeInPowerOfTwo>::IsEmpty() const$/;"	f	class:dgFastQueue
IsEmpty	libs/Newton/include/dgWorldDynamicUpdate.h	/^	bool IsEmpty () const $/;"	f	class:dgQueue
IsFull	libs/Newton/include/dgFastQueue.h	/^bool dgFastQueue<T, sizeInPowerOfTwo>::IsFull() const$/;"	f	class:dgFastQueue
IsInEquilibrium	libs/Newton/include/dgKinematicBody.h	/^	virtual bool IsInEquilibrium  () const {return true;}$/;"	f	class:dgKinematicBody
IsInTree	libs/Newton/include/dgTree.h	/^inline dgUnsigned32 dgRedBackNode::IsInTree () const$/;"	f	class:dgRedBackNode
IsLeaf	libs/Newton/include/dgAABBPolygonSoup.h	/^			DG_INLINE dgUnsigned32 IsLeaf () const $/;"	f	class:dgAABBPolygonSoup::dgNode::dgLeafNodePtr
IsLeafNode	libs/Newton/include/dgBroadPhase.h	/^	virtual bool IsLeafNode() const$/;"	f	class:dgBroadPhaseBodyNode
IsLeafNode	libs/Newton/include/dgBroadPhase.h	/^	virtual bool IsLeafNode() const$/;"	f	class:dgBroadPhaseNode
IsLeafNode	libs/Newton/include/dgBroadPhaseAggregate.h	/^	virtual bool IsLeafNode() const$/;"	f	class:dgBroadPhaseAggregate
IsPersistentRoot	libs/Newton/include/dgBroadPhase.h	/^	virtual bool IsPersistentRoot() const$/;"	f	class:dgBroadPhaseNode
IsRTTIType	libs/Newton/include/dgBody.h	/^DG_INLINE dgInt32 dgBody::IsRTTIType (dgUnsigned32 rtti) const$/;"	f	class:dgBody
IsType	libs/Newton/include/dgCollision.h	/^DG_INLINE dgInt32 dgCollision::IsType (dgRTTI type) const $/;"	f	class:dgCollision
IsType	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgInt32 dgCollisionInstance::IsType (dgCollision::dgRTTI type) const $/;"	f	class:dgCollisionInstance
IsType	libs/Newton/include/dgRef.h	/^inline bool dgRef::IsType (dgUnsigned32 typeId) const$/;"	f	class:dgRef
IsTypeByName	libs/Newton/include/dgRef.h	/^inline bool dgRef::IsTypeByName (const char *typeName) const$/;"	f	class:dgRef
IsTypeID	libs/Newton/include/dgRtti.h	/^inline bool dgRtti::IsTypeID (dgUnsigned32 id) const$/;"	f	class:dgRtti
Iterator	libs/Newton/include/dgList.h	/^		Iterator (const dgList<T> &me)$/;"	f	class:dgList::Iterator
Iterator	libs/Newton/include/dgList.h	/^	class Iterator$/;"	c	class:dgList
Iterator	libs/Newton/include/dgTree.h	/^		Iterator(const dgTree<OBJECT,KEY> &me)$/;"	f	class:dgTree::Iterator
Iterator	libs/Newton/include/dgTree.h	/^	class Iterator$/;"	c	class:dgTree
Kill	libs/Newton/include/dgRef.h	/^inline void dgRef::Kill() $/;"	f	class:dgRef
LIBD	Makefile	/^LIBD	=	libs$/;"	m
LIBS	Makefile	/^LIBS	=	-lm -lGLEW -lGL -lglfw -llua$/;"	m
LOOKUPMANAGER_H	src/LookupManager.h	2;"	d
LUA_SCRIPT_H	src/LuaScript.h	2;"	d
LinearCombine	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::LinearCombine (T scale, const dgGeneralVector<T> &A, const dgGeneralVector<T> &B)$/;"	f	class:dgGeneralVector
Lock	libs/Newton/include/dgThread.h	/^DG_INLINE void dgThread::dgCriticalSection::Lock(bool yield)$/;"	f	class:dgThread::dgCriticalSection
MAIN_H	src/main.h	2;"	d
MAKE_SOFTWARE_EXCEPTION	libs/Newton/include/implement.h	520;"	d
MATERIAL_H	src/Material.h	2;"	d
MATRIXMATH_H	src/MatrixMath.h	2;"	d
MAX	src/common.h	20;"	d
MEASURE	src/Util.h	115;"	d
MESH_H	src/Mesh.h	2;"	d
MILLI_SEC	src/Timestep.h	4;"	d
MIN_JOINT_PIN_LENGTH	libs/Newton/include/dgConstraint.h	37;"	d
MV	src/Shader.c	/^void MV(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
MVP	src/Shader.c	/^void MVP(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
MVPnoTrans	src/Shader.c	/^void MVPnoTrans(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
MVnoTrans	src/Shader.c	/^void MVnoTrans(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
MakeBox1	libs/Newton/include/dgIntersections.h	/^	DG_INLINE void MakeBox1 (dgInt32 indexCount, const dgInt32* const indexArray, dgInt32 stride, const dgFloat32* const vertexArray, dgVector& minBox, dgVector& maxBox) const$/;"	f	class:dgFastAABBInfo
MakeBox2	libs/Newton/include/dgIntersections.h	/^	DG_INLINE void MakeBox2 (const dgMatrix& faceMatrix, dgInt32 indexCount, const dgInt32* const indexArray, dgInt32 stride, const dgFloat32* const vertexArray, dgVector& minBox, dgVector& maxBox) const$/;"	f	class:dgFastAABBInfo
MakeFaceMatrix	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgMatrix MakeFaceMatrix (const dgVector& faceNormal, dgInt32 indexCount, const dgInt32* const indexArray, dgInt32 stride, const dgFloat32* const vertexArray) const$/;"	f	class:dgFastAABBInfo
Material	src/Material.h	/^} Material;$/;"	t	typeref:struct:__anon46
MatrixTimeMatrix	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::MatrixTimeMatrix (const dgGeneralMatrix<T>& A, const dgGeneralMatrix<T>& B)$/;"	f	class:dgGeneralMatrix
MatrixTimeMatrixTranspose	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::MatrixTimeMatrixTranspose (const dgGeneralMatrix<T>& A, const dgGeneralMatrix<T>& Bt)$/;"	f	class:dgGeneralMatrix
MatrixTimeVectorTranspose	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::MatrixTimeVectorTranspose (const dgGeneralVector<T> &v, dgGeneralVector<T> &out)$/;"	f	class:dgGeneralMatrix
MaxValue	libs/Newton/include/dgHeap.h	/^KEY dgHeapBase<OBJECT,KEY>::MaxValue() const $/;"	f	class:dgHeapBase
Maximum	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::Maximum () const$/;"	f	class:dgTree
Merge	libs/Newton/include/dgList.h	/^void dgList<T>::Merge (dgList<T>& list)$/;"	f	class:dgList
Mesh	src/Mesh.h	/^} Mesh;$/;"	t	typeref:struct:__anon44
Minimum	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::Minimum () const$/;"	f	class:dgTree
MoveHigh	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector MoveHigh (const dgVector& data) const$/;"	f	class:dgVector
MoveLow	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector MoveLow (const dgVector& data) const$/;"	f	class:dgVector
NEED_CALLOC	libs/Newton/include/config.h	115;"	d
NEED_CALLOC	libs/Newton/include/config.h	32;"	d
NEED_CREATETHREAD	libs/Newton/include/config.h	113;"	d
NEED_CREATETHREAD	libs/Newton/include/config.h	26;"	d
NEED_DUPLICATEHANDLE	libs/Newton/include/config.h	112;"	d
NEED_DUPLICATEHANDLE	libs/Newton/include/config.h	23;"	d
NEED_ERRNO	libs/Newton/include/config.h	114;"	d
NEED_ERRNO	libs/Newton/include/config.h	29;"	d
NEED_ERRNO	libs/Newton/include/pthread.h	245;"	d
NEED_ERRNO	libs/Newton/include/sched.h	96;"	d
NEED_ERRNO	libs/Newton/include/semaphore.h	95;"	d
NEED_FTIME	libs/Newton/include/config.h	116;"	d
NEED_FTIME	libs/Newton/include/config.h	35;"	d
NEED_PROCESS_AFFINITY_MASK	libs/Newton/include/config.h	119;"	d
NEED_PROCESS_AFFINITY_MASK	libs/Newton/include/config.h	61;"	d
NEED_SEM	libs/Newton/include/config.h	38;"	d
NEED_SEM	libs/Newton/include/pthread.h	246;"	d
NEED_SEM	libs/Newton/include/sched.h	97;"	d
NEED_SEM	libs/Newton/include/semaphore.h	96;"	d
NEED_UNICODE_CONSTS	libs/Newton/include/config.h	118;"	d
NEED_UNICODE_CONSTS	libs/Newton/include/config.h	41;"	d
NEWTON_API	libs/Newton/include/Newton.h	31;"	d
NEWTON_API	libs/Newton/include/Newton.h	35;"	d
NEWTON_API	libs/Newton/include/Newton.h	37;"	d
NEWTON_API	libs/Newton/include/Newton.h	41;"	d
NEWTON_API	libs/Newton/include/Newton.h	43;"	d
NEWTON_BROADPHASE_DEFAULT	libs/Newton/include/Newton.h	80;"	d
NEWTON_BROADPHASE_PERSINTENT	libs/Newton/include/Newton.h	81;"	d
NEWTON_DEFORMABLE_BODY	libs/Newton/include/Newton.h	85;"	d
NEWTON_DEPRECATED_API	libs/Newton/include/Newton.h	50;"	d
NEWTON_DEPRECATED_API	libs/Newton/include/Newton.h	52;"	d
NEWTON_DEPRECATED_API	libs/Newton/include/Newton.h	55;"	d
NEWTON_DYNAMIC_BODY	libs/Newton/include/Newton.h	83;"	d
NEWTON_KINEMATIC_BODY	libs/Newton/include/Newton.h	84;"	d
NEWTON_MAJOR_VERSION	libs/Newton/include/Newton.h	26;"	d
NEWTON_MINOR_VERSION	libs/Newton/include/Newton.h	27;"	d
Newton	libs/Newton/include/NewtonClass.h	/^class Newton:$/;"	c
NewtonAllocMemory	libs/Newton/include/Newton.h	/^	typedef void* (*NewtonAllocMemory) (int sizeInBytes);$/;"	t
NewtonApplyForceAndTorque	libs/Newton/include/Newton.h	/^	typedef void (*NewtonApplyForceAndTorque) (const NewtonBody* const body, dFloat timestep, int threadIndex);$/;"	t
NewtonBallCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonBallCallback) (const NewtonJoint* const ball, dFloat timestep);$/;"	t
NewtonBody	libs/Newton/include/Newton.h	/^	typedef struct NewtonBody{} NewtonBody;$/;"	s
NewtonBody	libs/Newton/include/Newton.h	/^	typedef struct NewtonBody{} NewtonBody;$/;"	t	typeref:struct:NewtonBody
NewtonBodyDestructor	libs/Newton/include/Newton.h	/^	typedef void (*NewtonBodyDestructor) (const NewtonBody* const body);$/;"	t
NewtonBodyIterator	libs/Newton/include/Newton.h	/^	typedef int (*NewtonBodyIterator) (const NewtonBody* const body, void* const userData);$/;"	t
NewtonBoxParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonBoxParam$/;"	s
NewtonBoxParam	libs/Newton/include/Newton.h	/^	} NewtonBoxParam;$/;"	t	typeref:struct:NewtonBoxParam
NewtonCapsuleParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonCapsuleParam$/;"	s
NewtonCapsuleParam	libs/Newton/include/Newton.h	/^	} NewtonCapsuleParam;$/;"	t	typeref:struct:NewtonCapsuleParam
NewtonChamferCylinderParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonChamferCylinderParam$/;"	s
NewtonChamferCylinderParam	libs/Newton/include/Newton.h	/^	} NewtonChamferCylinderParam;$/;"	t	typeref:struct:NewtonChamferCylinderParam
NewtonClothPatchMaterial	libs/Newton/include/Newton.h	/^	typedef struct NewtonClothPatchMaterial$/;"	s
NewtonClothPatchMaterial	libs/Newton/include/Newton.h	/^	} NewtonClothPatchMaterial;$/;"	t	typeref:struct:NewtonClothPatchMaterial
NewtonCollision	libs/Newton/include/Newton.h	/^	typedef struct NewtonCollision{} NewtonCollision;$/;"	s
NewtonCollision	libs/Newton/include/Newton.h	/^	typedef struct NewtonCollision{} NewtonCollision;$/;"	t	typeref:struct:NewtonCollision
NewtonCollisionCopyConstructionCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonCollisionCopyConstructionCallback) (const NewtonWorld* const newtonWorld, NewtonCollision* const collision, const NewtonCollision* const sourceCollision);$/;"	t
NewtonCollisionDestructorCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonCollisionDestructorCallback) (const NewtonWorld* const newtonWorld, const NewtonCollision* const collision);$/;"	t
NewtonCollisionInfoRecord	libs/Newton/include/Newton.h	/^	typedef struct NewtonCollisionInfoRecord$/;"	s
NewtonCollisionInfoRecord	libs/Newton/include/Newton.h	/^	} NewtonCollisionInfoRecord;$/;"	t	typeref:struct:NewtonCollisionInfoRecord
NewtonCollisionIterator	libs/Newton/include/Newton.h	/^	typedef void (*NewtonCollisionIterator) (void* const userData, int vertexCount, const dFloat* const faceArray, int faceId);$/;"	t
NewtonCollisionTreeParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonCollisionTreeParam$/;"	s
NewtonCollisionTreeParam	libs/Newton/include/Newton.h	/^	} NewtonCollisionTreeParam;$/;"	t	typeref:struct:NewtonCollisionTreeParam
NewtonCollisionTreeRayCastCallback	libs/Newton/include/Newton.h	/^	typedef dFloat (*NewtonCollisionTreeRayCastCallback) (const NewtonBody* const body, const NewtonCollision* const treeCollision, dFloat intersection, dFloat* const normal, int faceId, void* const usedData);$/;"	t
NewtonCompoundCollisionParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonCompoundCollisionParam$/;"	s
NewtonCompoundCollisionParam	libs/Newton/include/Newton.h	/^	} NewtonCompoundCollisionParam;$/;"	t	typeref:struct:NewtonCompoundCollisionParam
NewtonConeParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonConeParam$/;"	s
NewtonConeParam	libs/Newton/include/Newton.h	/^	} NewtonConeParam;$/;"	t	typeref:struct:NewtonConeParam
NewtonConstraintDestructor	libs/Newton/include/Newton.h	/^	typedef void (*NewtonConstraintDestructor) (const NewtonJoint* const me);$/;"	t
NewtonContactsProcess	libs/Newton/include/Newton.h	/^	typedef void (*NewtonContactsProcess) (const NewtonJoint* const contact, dFloat timestep, int threadIndex);$/;"	t
NewtonConvexHullGetVetexData	libs/Newton/include/Newton.h	/^	NEWTON_DEPRECATED_API inline int NewtonConvexHullGetVetexData (const NewtonCollision* const convexHullCollision, dFloat** const vertexData, int* strideInBytes)$/;"	f
NewtonConvexHullParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonConvexHullParam$/;"	s
NewtonConvexHullParam	libs/Newton/include/Newton.h	/^	} NewtonConvexHullParam;$/;"	t	typeref:struct:NewtonConvexHullParam
NewtonCorkscrewCallback	libs/Newton/include/Newton.h	/^	typedef unsigned (*NewtonCorkscrewCallback) (const NewtonJoint* const corkscrew, NewtonHingeSliderUpdateDesc* const desc);$/;"	t
NewtonCylinderParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonCylinderParam$/;"	s
NewtonCylinderParam	libs/Newton/include/Newton.h	/^	} NewtonCylinderParam;$/;"	t	typeref:struct:NewtonCylinderParam
NewtonDeadBodies	libs/Newton/include/NewtonClass.h	/^class NewtonDeadBodies: public dgTree<dgBody*, void* >$/;"	c
NewtonDeadJoints	libs/Newton/include/NewtonClass.h	/^class NewtonDeadJoints: public dgTree<dgConstraint*, void* >$/;"	c
NewtonDeformableMeshParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonDeformableMeshParam$/;"	s
NewtonDeformableMeshParam	libs/Newton/include/Newton.h	/^	} NewtonDeformableMeshParam;$/;"	t	typeref:struct:NewtonDeformableMeshParam
NewtonDeformableMeshSegment	libs/Newton/include/Newton.h	/^	typedef struct NewtonDeformableMeshSegment{} NewtonDeformableMeshSegment;$/;"	s
NewtonDeformableMeshSegment	libs/Newton/include/Newton.h	/^	typedef struct NewtonDeformableMeshSegment{} NewtonDeformableMeshSegment;$/;"	t	typeref:struct:NewtonDeformableMeshSegment
NewtonDeserializeCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonDeserializeCallback) (void* const serializeHandle, void* const buffer, int size);$/;"	t
NewtonFractureCompoundCollisionOnEmitChunk	libs/Newton/include/Newton.h	/^	typedef void (*NewtonFractureCompoundCollisionOnEmitChunk) (NewtonBody* const chunkBody, NewtonFracturedCompoundMeshPart* const fracturexChunkMesh, const NewtonCollision* const fracturedCompountCollision);$/;"	t
NewtonFractureCompoundCollisionOnEmitCompoundFractured	libs/Newton/include/Newton.h	/^	typedef void (*NewtonFractureCompoundCollisionOnEmitCompoundFractured) (NewtonBody* const fracturedBody);$/;"	t
NewtonFractureCompoundCollisionReconstructMainMeshCallBack	libs/Newton/include/Newton.h	/^	typedef void (*NewtonFractureCompoundCollisionReconstructMainMeshCallBack) (NewtonBody* const body, NewtonFracturedCompoundMeshPart* const mainMesh, const NewtonCollision* const fracturedCompountCollision);$/;"	t
NewtonFracturedCompoundMeshPart	libs/Newton/include/Newton.h	/^	typedef struct NewtonFracturedCompoundMeshPart{} NewtonFracturedCompoundMeshPart;$/;"	s
NewtonFracturedCompoundMeshPart	libs/Newton/include/Newton.h	/^	typedef struct NewtonFracturedCompoundMeshPart{} NewtonFracturedCompoundMeshPart;$/;"	t	typeref:struct:NewtonFracturedCompoundMeshPart
NewtonFreeMemory	libs/Newton/include/Newton.h	/^	typedef void (*NewtonFreeMemory) (void* const ptr, int sizeInBytes);$/;"	t
NewtonGetTicksCountCallback	libs/Newton/include/Newton.h	/^	typedef unsigned (*NewtonGetTicksCountCallback) ();$/;"	t
NewtonHeightFieldCollisionParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonHeightFieldCollisionParam$/;"	s
NewtonHeightFieldCollisionParam	libs/Newton/include/Newton.h	/^	} NewtonHeightFieldCollisionParam;$/;"	t	typeref:struct:NewtonHeightFieldCollisionParam
NewtonHeightFieldRayCastCallback	libs/Newton/include/Newton.h	/^	typedef dFloat (*NewtonHeightFieldRayCastCallback) (const NewtonBody* const body, const NewtonCollision* const heightFieldCollision, dFloat intersection, int row, int col, dFloat* const normal, int faceId, void* const usedData);$/;"	t
NewtonHingeCallback	libs/Newton/include/Newton.h	/^	typedef unsigned (*NewtonHingeCallback) (const NewtonJoint* const hinge, NewtonHingeSliderUpdateDesc* const desc);$/;"	t
NewtonHingeSliderUpdateDesc	libs/Newton/include/Newton.h	/^	typedef struct NewtonHingeSliderUpdateDesc$/;"	s
NewtonHingeSliderUpdateDesc	libs/Newton/include/Newton.h	/^	} NewtonHingeSliderUpdateDesc;$/;"	t	typeref:struct:NewtonHingeSliderUpdateDesc
NewtonIslandUpdate	libs/Newton/include/Newton.h	/^	typedef int (*NewtonIslandUpdate) (const NewtonWorld* const newtonWorld, const void* islandHandle, int bodyCount);$/;"	t
NewtonJobTask	libs/Newton/include/Newton.h	/^	typedef void (*NewtonJobTask) (NewtonWorld* const world, void* const userData, int threadIndex);$/;"	t
NewtonJoint	libs/Newton/include/Newton.h	/^	typedef struct NewtonJoint{} NewtonJoint;$/;"	s
NewtonJoint	libs/Newton/include/Newton.h	/^	typedef struct NewtonJoint{} NewtonJoint;$/;"	t	typeref:struct:NewtonJoint
NewtonJointIterator	libs/Newton/include/Newton.h	/^	typedef void (*NewtonJointIterator) (const NewtonJoint* const joint, void* const userData);$/;"	t
NewtonJointRecord	libs/Newton/include/Newton.h	/^	typedef struct NewtonJointRecord$/;"	s
NewtonJointRecord	libs/Newton/include/Newton.h	/^	} NewtonJointRecord;$/;"	t	typeref:struct:NewtonJointRecord
NewtonMaterial	libs/Newton/include/Newton.h	/^	typedef struct NewtonMaterial{} NewtonMaterial;$/;"	s
NewtonMaterial	libs/Newton/include/Newton.h	/^	typedef struct NewtonMaterial{} NewtonMaterial;$/;"	t	typeref:struct:NewtonMaterial
NewtonMesh	libs/Newton/include/Newton.h	/^	typedef struct NewtonMesh{} NewtonMesh;$/;"	s
NewtonMesh	libs/Newton/include/Newton.h	/^	typedef struct NewtonMesh{} NewtonMesh;$/;"	t	typeref:struct:NewtonMesh
NewtonOnAABBOverlap	libs/Newton/include/Newton.h	/^	typedef int  (*NewtonOnAABBOverlap) (const NewtonMaterial* const material, const NewtonBody* const body0, const NewtonBody* const body1, int threadIndex);$/;"	t
NewtonOnBodyDeserializationCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonOnBodyDeserializationCallback) (NewtonBody* const body, void* const userData, NewtonDeserializeCallback function, void* const serializeHandle);$/;"	t
NewtonOnBodySerializationCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonOnBodySerializationCallback) (NewtonBody* const body, void* const userData, NewtonSerializeCallback function, void* const serializeHandle);$/;"	t
NewtonOnCompoundSubCollisionAABBOverlap	libs/Newton/include/Newton.h	/^	typedef int  (*NewtonOnCompoundSubCollisionAABBOverlap) (const NewtonMaterial* const material, const NewtonBody* const body0, const void* const collsionNode0, const NewtonBody* const body1, const void* const collsionNode1, int threadIndex);$/;"	t
NewtonOnJointDeserializationCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonOnJointDeserializationCallback) (NewtonBody* const body0, NewtonBody* const body1, NewtonDeserializeCallback function, void* const serializeHandle);$/;"	t
NewtonOnJointSerializationCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonOnJointSerializationCallback) (const NewtonJoint* const joint, NewtonSerializeCallback function, void* const serializeHandle);$/;"	t
NewtonOnUserCollisionSerializationCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonOnUserCollisionSerializationCallback) (void* const userData, NewtonSerializeCallback function, void* const serializeHandle);$/;"	t
NewtonReportProgress	libs/Newton/include/Newton.h	/^	typedef bool (*NewtonReportProgress) (dFloat normalizedProgressPercent, void* const userData);$/;"	t
NewtonSceneCollisionParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonSceneCollisionParam$/;"	s
NewtonSceneCollisionParam	libs/Newton/include/Newton.h	/^	} NewtonSceneCollisionParam;$/;"	t	typeref:struct:NewtonSceneCollisionParam
NewtonSerializeCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonSerializeCallback) (void* const serializeHandle, const void* const buffer, int size);$/;"	t
NewtonSetTransform	libs/Newton/include/Newton.h	/^	typedef void (*NewtonSetTransform) (const NewtonBody* const body, const dFloat* const matrix, int threadIndex);$/;"	t
NewtonSkeletonContainer	libs/Newton/include/Newton.h	/^	typedef struct NewtonSkeletonContainer{} NewtonSkeletonContainer;$/;"	s
NewtonSkeletonContainer	libs/Newton/include/Newton.h	/^	typedef struct NewtonSkeletonContainer{} NewtonSkeletonContainer;$/;"	t	typeref:struct:NewtonSkeletonContainer
NewtonSkeletontDestructor	libs/Newton/include/Newton.h	/^	typedef void (*NewtonSkeletontDestructor) (const NewtonSkeletonContainer* const me);$/;"	t
NewtonSliderCallback	libs/Newton/include/Newton.h	/^	typedef unsigned (*NewtonSliderCallback) (const NewtonJoint* const slider, NewtonHingeSliderUpdateDesc* const desc);$/;"	t
NewtonSphereParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonSphereParam$/;"	s
NewtonSphereParam	libs/Newton/include/Newton.h	/^	} NewtonSphereParam;$/;"	t	typeref:struct:NewtonSphereParam
NewtonTaperedCapsuleParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonTaperedCapsuleParam$/;"	s
NewtonTaperedCapsuleParam	libs/Newton/include/Newton.h	/^	} NewtonTaperedCapsuleParam;$/;"	t	typeref:struct:NewtonTaperedCapsuleParam
NewtonTaperedCylinderParam	libs/Newton/include/Newton.h	/^	typedef struct NewtonTaperedCylinderParam$/;"	s
NewtonTaperedCylinderParam	libs/Newton/include/Newton.h	/^	} NewtonTaperedCylinderParam;$/;"	t	typeref:struct:NewtonTaperedCylinderParam
NewtonTreeCollisionCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonTreeCollisionCallback) (const NewtonBody* const bodyWithTreeCollision, const NewtonBody* const body, int faceID, $/;"	t
NewtonTreeCollisionFaceCallback	libs/Newton/include/Newton.h	/^	typedef int (*NewtonTreeCollisionFaceCallback) (void* const context, const dFloat* const polygon, int strideInBytes, const int* const indexArray, int indexCount);$/;"	t
NewtonTreeCollisionGetFaceAtribute	libs/Newton/include/Newton.h	/^	NEWTON_DEPRECATED_API inline int NewtonTreeCollisionGetFaceAtribute (const NewtonCollision* const treeCollision, const int* const faceIndexArray, int indexCount)$/;"	f
NewtonTreeCollisionSetFaceAtribute	libs/Newton/include/Newton.h	/^	NEWTON_DEPRECATED_API inline void NewtonTreeCollisionSetFaceAtribute (const NewtonCollision* const treeCollision, const int* const faceIndexArray, int indexCount, int attribute)$/;"	f
NewtonUniversalCallback	libs/Newton/include/Newton.h	/^	typedef unsigned (*NewtonUniversalCallback) (const NewtonJoint* const universal, NewtonHingeSliderUpdateDesc* const desc);$/;"	t
NewtonUserBilateralCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonUserBilateralCallback) (const NewtonJoint* const userJoint, dFloat timestep, int threadIndex);$/;"	t
NewtonUserBilateralGetInfoCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonUserBilateralGetInfoCallback) (const NewtonJoint* const userJoint, NewtonJointRecord* const info);$/;"	t
NewtonUserJoint	libs/Newton/include/NewtonClass.h	/^class NewtonUserJoint: public dgUserConstraint  $/;"	c
NewtonUserMeshCollisionAABBTest	libs/Newton/include/Newton.h	/^	typedef int (*NewtonUserMeshCollisionAABBTest) (void* const userData, const dFloat* const boxP0, const dFloat* const boxP1);$/;"	t
NewtonUserMeshCollisionCollideCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonUserMeshCollisionCollideCallback) (NewtonUserMeshCollisionCollideDesc* const collideDescData, const void* const continueCollisionHandle);$/;"	t
NewtonUserMeshCollisionCollideDesc	libs/Newton/include/Newton.h	/^	typedef struct NewtonUserMeshCollisionCollideDesc$/;"	s
NewtonUserMeshCollisionCollideDesc	libs/Newton/include/Newton.h	/^	} NewtonUserMeshCollisionCollideDesc;$/;"	t	typeref:struct:NewtonUserMeshCollisionCollideDesc
NewtonUserMeshCollisionContinueOveralapTest	libs/Newton/include/Newton.h	/^	NEWTON_DEPRECATED_API inline int NewtonUserMeshCollisionContinueOveralapTest (const NewtonUserMeshCollisionCollideDesc* const collideDescData, const void* const continueCollisionHandle, const dFloat* const minAabb, const dFloat* const maxAabb)$/;"	f
NewtonUserMeshCollisionDestroyCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonUserMeshCollisionDestroyCallback) (void* const userData);$/;"	t
NewtonUserMeshCollisionGetCollisionInfo	libs/Newton/include/Newton.h	/^	typedef void (*NewtonUserMeshCollisionGetCollisionInfo) (void* const userData, NewtonCollisionInfoRecord* const infoRecord);$/;"	t
NewtonUserMeshCollisionGetFacesInAABB	libs/Newton/include/Newton.h	/^	typedef int (*NewtonUserMeshCollisionGetFacesInAABB) (void* const userData, const dFloat* const p0, const dFloat* const p1,$/;"	t
NewtonUserMeshCollisionRayHitCallback	libs/Newton/include/Newton.h	/^	typedef dFloat (*NewtonUserMeshCollisionRayHitCallback) (NewtonUserMeshCollisionRayHitDesc* const lineDescData);$/;"	t
NewtonUserMeshCollisionRayHitDesc	libs/Newton/include/Newton.h	/^	typedef struct NewtonUserMeshCollisionRayHitDesc$/;"	s
NewtonUserMeshCollisionRayHitDesc	libs/Newton/include/Newton.h	/^	} NewtonUserMeshCollisionRayHitDesc;$/;"	t	typeref:struct:NewtonUserMeshCollisionRayHitDesc
NewtonWorld	libs/Newton/include/Newton.h	/^	typedef struct NewtonWorld{} NewtonWorld;$/;"	s
NewtonWorld	libs/Newton/include/Newton.h	/^	typedef struct NewtonWorld{} NewtonWorld;$/;"	t	typeref:struct:NewtonWorld
NewtonWorldConvexCastReturnInfo	libs/Newton/include/Newton.h	/^	typedef struct NewtonWorldConvexCastReturnInfo$/;"	s
NewtonWorldConvexCastReturnInfo	libs/Newton/include/Newton.h	/^	} NewtonWorldConvexCastReturnInfo;$/;"	t	typeref:struct:NewtonWorldConvexCastReturnInfo
NewtonWorldDestroyListenerCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonWorldDestroyListenerCallback) (const NewtonWorld* const world, void* const listenerUserData);$/;"	t
NewtonWorldDestructorCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonWorldDestructorCallback) (const NewtonWorld* const world);$/;"	t
NewtonWorldListenerBodyDestroyCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonWorldListenerBodyDestroyCallback) (const NewtonWorld* const world, void* const listenerUserData, NewtonBody* const body);$/;"	t
NewtonWorldRayFilterCallback	libs/Newton/include/Newton.h	/^	typedef dFloat (*NewtonWorldRayFilterCallback)(const NewtonBody* const body, const NewtonCollision* const shapeHit, const dFloat* const hitContact, const dFloat* const hitNormal, dLong collisionID, void* const userData, dFloat intersectParam);$/;"	t
NewtonWorldRayPrefilterCallback	libs/Newton/include/Newton.h	/^	typedef unsigned (*NewtonWorldRayPrefilterCallback)(const NewtonBody* const body, const NewtonCollision* const collision, void* const userData);$/;"	t
NewtonWorldSetCollisionConstructorDestuctorCallback	libs/Newton/include/Newton.h	/^	NEWTON_DEPRECATED_API inline void NewtonWorldSetCollisionConstructorDestuctorCallback (const NewtonWorld* const newtonWorld, NewtonCollisionCopyConstructionCallback constructor, NewtonCollisionDestructorCallback destructor)$/;"	f
NewtonWorldUpdateListenerCallback	libs/Newton/include/Newton.h	/^	typedef void (*NewtonWorldUpdateListenerCallback) (const NewtonWorld* const world, void* const listenerUserData, dFloat timestep);$/;"	t
Norm	libs/Newton/include/dgGeneralVector.h	/^T dgGeneralVector<T>::Norm () const$/;"	f	class:dgGeneralVector
Norm2	libs/Newton/include/dgGeneralVector.h	/^T dgGeneralVector<T>::Norm2 () const$/;"	f	class:dgGeneralVector
Normalize	libs/Newton/include/dgQuaternion.h	/^inline void dgQuaternion::Normalize () $/;"	f	class:dgQuaternion
OBJECTS	Makefile	/^OBJECTS =	$(patsubst %.c, $(BIN)\/%.o, $(SOURCES))$/;"	m
OBJECT_H	src/Object.h	2;"	d
OLD_WIN32CS	libs/Newton/include/benchtest.h	/^  OLD_WIN32CS,$/;"	e	enum:__anon16
OLD_WIN32MUTEX	libs/Newton/include/benchtest.h	/^  OLD_WIN32MUTEX$/;"	e	enum:__anon16
Object	src/Object.h	/^} Object;$/;"	t	typeref:struct:__anon47
OnAABBOverlap	libs/Newton/include/dgContact.h	/^	typedef bool (dgApi *OnAABBOverlap) (const dgContactMaterial& material, const dgBody& body0, const dgBody& body1, dgInt32 threadIndex);$/;"	t	class:dgContactMaterial
OnApplyExtForceAndTorque	libs/Newton/include/dgBody.h	/^	typedef void (dgApi *OnApplyExtForceAndTorque) (dgBody& me, dgFloat32 timestep, dgInt32 threadIndex);$/;"	t	class:dgBody
OnBodiesInAABB	libs/Newton/include/dgBody.h	/^typedef dgInt32(dgApi *OnBodiesInAABB) (dgBody* body, void* const userData);$/;"	t
OnBodyDeserialize	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnBodyDeserialize) (dgBody& me, void* const userData, dgDeserialize funt, void* const serilalizeObject);$/;"	t	class:dgWorld
OnBodyDestroy	libs/Newton/include/dgBody.h	/^	typedef void (dgApi *OnBodyDestroy) (dgBody& me);$/;"	t	class:dgBody
OnBodySerialize	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnBodySerialize) (dgBody& me, void* const userData, dgSerialize funt, void* const serilalizeObject);$/;"	t	class:dgWorld
OnCollisionInstanceDestroy	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnCollisionInstanceDestroy) (const dgWorld* const world, const dgCollisionInstance* const collision);$/;"	t	class:dgWorld
OnCollisionInstanceDuplicate	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnCollisionInstanceDuplicate) (const dgWorld* const world, dgCollisionInstance* const collision, const dgCollisionInstance* const sourceCollision);$/;"	t	class:dgWorld
OnCompoundCollisionPrefilter	libs/Newton/include/dgContact.h	/^	typedef bool (dgApi *OnCompoundCollisionPrefilter) (const dgContactMaterial& material, const dgBody* bodyA, const void* collisionNodeA, const dgBody* bodyB, const void* collisionNodeB, dgInt32 threadIndex);$/;"	t	class:dgContactMaterial
OnConstraintDestroy	libs/Newton/include/dgConstraint.h	/^typedef void (dgApi *OnConstraintDestroy) (dgConstraint& me);$/;"	t
OnContactCallback	libs/Newton/include/dgContact.h	/^	typedef void (dgApi *OnContactCallback) (dgContact& contactJoint, dgFloat32 timestep, dgInt32 threadIndex);$/;"	t	class:dgContactMaterial
OnDebugCollisionMeshCallback	libs/Newton/include/dgCollision.h	/^	typedef void (dgApi *OnDebugCollisionMeshCallback) (void* userData, int vertexCount, const dgFloat32* FaceArray, int faceId);$/;"	t	class:dgCollision
OnEmitFractureChunkCallBack	libs/Newton/include/dgCollisionCompoundFractured.h	/^	typedef void (*OnEmitFractureChunkCallBack) (dgBody* const body, dgConectivityGraph::dgListNode* const chunkMeshNode, const dgCollisionInstance* const myInstance);$/;"	t	class:dgCollisionCompoundFractured
OnEmitNewCompundFractureCallBack	libs/Newton/include/dgCollisionCompoundFractured.h	/^	typedef void (*OnEmitNewCompundFractureCallBack) (dgBody* const body);$/;"	t	class:dgCollisionCompoundFractured
OnIslandUpdate	libs/Newton/include/dgWorld.h	/^	typedef dgUnsigned32 (dgApi *OnIslandUpdate) (const dgWorld* const world, void* island, dgInt32 bodyCount);$/;"	t	class:dgWorld
OnJointDeserializationCallback	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnJointDeserializationCallback) (const dgBody* const body0, const dgBody* const body1, dgDeserialize funt, void* const serilalizeObject);$/;"	t	class:dgWorld
OnJointSerializationCallback	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnJointSerializationCallback) (const dgUserConstraint* const joint, dgSerialize funt, void* const serilalizeObject);$/;"	t	class:dgWorld
OnListenerBodyDestroyCallback	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnListenerBodyDestroyCallback) (const dgWorld* const world, void* const listener, dgBody* const body);$/;"	t	class:dgWorld
OnListenerDestroyCallback	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnListenerDestroyCallback) (const dgWorld* const world, void* const listener);$/;"	t	class:dgWorld
OnListenerUpdateCallback	libs/Newton/include/dgWorld.h	/^	typedef void (dgApi *OnListenerUpdateCallback) (const dgWorld* const world, void* const listener, dgFloat32 timestep);$/;"	t	class:dgWorld
OnMatrixUpdateCallback	libs/Newton/include/dgBody.h	/^	typedef void (dgApi *OnMatrixUpdateCallback) (const dgBody& me, const dgMatrix& matrix, dgInt32 threadIndex);$/;"	t	class:dgBody
OnRayCastAction	libs/Newton/include/dgBody.h	/^typedef dgFloat32(dgApi *OnRayCastAction) (const dgBody* const body, const dgCollisionInstance* const collision, const dgVector& contact, const dgVector& normal, dgInt64 collisionID, void* const userData, dgFloat32 intersetParam);$/;"	t
OnRayPrecastAction	libs/Newton/include/dgBody.h	/^typedef dgUnsigned32(dgApi *OnRayPrecastAction) (const dgBody* const body, const dgCollisionInstance* const collision, void* const userData);$/;"	t
OnReconstructFractureMainMeshCallBack	libs/Newton/include/dgCollisionCompoundFractured.h	/^	typedef void (*OnReconstructFractureMainMeshCallBack) (dgBody* const body, dgConectivityGraph::dgListNode* const mainMeshNode, const dgCollisionInstance* const myInstance);$/;"	t	class:dgCollisionCompoundFractured
OnUserMeshAABBOverlapTest	libs/Newton/include/dgCollisionUserMesh.h	/^	typedef dgInt32 (dgApi *OnUserMeshAABBOverlapTest) (void* const userData, const dgVector& boxP0, const dgVector& boxP1);$/;"	t	class:dgCollisionUserMesh
OnUserMeshCollideCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	typedef void (dgApi *OnUserMeshCollideCallback) (void* const collideData, const void* const continueHandle);$/;"	t	class:dgCollisionUserMesh
OnUserMeshCollisionInfo	libs/Newton/include/dgCollisionUserMesh.h	/^	typedef void (dgApi *OnUserMeshCollisionInfo) (void* userData, dgCollisionInfo* infoRecord);$/;"	t	class:dgCollisionUserMesh
OnUserMeshDestroyCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	typedef void (dgApi *OnUserMeshDestroyCallback) (void* const userData);$/;"	t	class:dgCollisionUserMesh
OnUserMeshFacesInAABB	libs/Newton/include/dgCollisionUserMesh.h	/^	typedef void (dgApi *OnUserMeshFacesInAABB) (void* userData, const dgFloat32* p0, const dgFloat32* p1, const dgFloat32** vertexArray, dgInt32* vertexCount, dgInt32* vertexStrideInBytes, const dgInt32* indexList, dgInt32 maxIndexCount, const dgInt32* faceAttribute);$/;"	t	class:dgCollisionUserMesh
OnUserMeshRayHitCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	typedef dgFloat32 (dgApi *OnUserMeshRayHitCallback) (dgCollisionMeshRayHitDesc& rayHitdata);$/;"	t	class:dgCollisionUserMesh
OnUserMeshSerialize	libs/Newton/include/dgCollisionUserMesh.h	/^	typedef void (dgApi *OnUserMeshSerialize) (void* const userSerializeData, dgSerialize function, void* const serilalizeObject);$/;"	t	class:dgCollisionUserMesh
OverlapTest	libs/Newton/include/dgBody.h	41;"	d
P	src/Shader.c	/^void P(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
PAPCFUNC	libs/Newton/include/implement.h	/^typedef VOID (APIENTRY *PAPCFUNC)(DWORD dwParam);$/;"	t
PCBIN	Makefile	/^PCBIN	=	staticbin$/;"	m
PI	src/MatrixMath.h	9;"	d
PNG_TYPE	staticbin/stb_image.c	2072;"	d	file:
PREFILTER_RAYCAST	libs/Newton/include/dgCollision.h	40;"	d
PTHREAD_BARRIER_SERIAL_THREAD	libs/Newton/include/pthread.h	/^  PTHREAD_BARRIER_SERIAL_THREAD = -1$/;"	e	enum:__anon3
PTHREAD_CANCELED	libs/Newton/include/pthread.h	665;"	d
PTHREAD_CANCEL_ASYNCHRONOUS	libs/Newton/include/pthread.h	/^  PTHREAD_CANCEL_ASYNCHRONOUS   = 0,$/;"	e	enum:__anon3
PTHREAD_CANCEL_DEFERRED	libs/Newton/include/pthread.h	/^  PTHREAD_CANCEL_DEFERRED       = 1,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_CANCEL_DISABLE	libs/Newton/include/pthread.h	/^  PTHREAD_CANCEL_DISABLE        = 1,$/;"	e	enum:__anon3
PTHREAD_CANCEL_ENABLE	libs/Newton/include/pthread.h	/^  PTHREAD_CANCEL_ENABLE         = 0,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_COND_INITIALIZER	libs/Newton/include/pthread.h	703;"	d
PTHREAD_CREATE_DETACHED	libs/Newton/include/pthread.h	/^  PTHREAD_CREATE_DETACHED       = 1,$/;"	e	enum:__anon3
PTHREAD_CREATE_JOINABLE	libs/Newton/include/pthread.h	/^  PTHREAD_CREATE_JOINABLE       = 0,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_DESTRUCTOR_ITERATIONS	libs/Newton/include/pthread.h	507;"	d
PTHREAD_DESTRUCTOR_ITERATIONS	libs/Newton/include/pthread.h	508;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER	libs/Newton/include/pthread.h	695;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP	libs/Newton/include/pthread.h	701;"	d
PTHREAD_EXPLICIT_SCHED	libs/Newton/include/pthread.h	/^  PTHREAD_EXPLICIT_SCHED        = 1,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_H	libs/Newton/include/pthread.h	34;"	d
PTHREAD_INHERIT_SCHED	libs/Newton/include/pthread.h	/^  PTHREAD_INHERIT_SCHED         = 0,$/;"	e	enum:__anon3
PTHREAD_KEYS_MAX	libs/Newton/include/pthread.h	513;"	d
PTHREAD_KEYS_MAX	libs/Newton/include/pthread.h	514;"	d
PTHREAD_MUTEX_ADAPTIVE_NP	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_ADAPTIVE_NP = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_DEFAULT	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL$/;"	e	enum:__anon4
PTHREAD_MUTEX_ERRORCHECK	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_ERRORCHECK_NP	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_FAST_NP	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_INITIALIZER	libs/Newton/include/pthread.h	693;"	d
PTHREAD_MUTEX_NORMAL	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_RECURSIVE	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_RECURSIVE_NP	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon4
PTHREAD_MUTEX_ROBUST	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_ROBUST          = 1,$/;"	e	enum:__anon3
PTHREAD_MUTEX_STALLED	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_STALLED         = 0,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_MUTEX_TIMED_NP	libs/Newton/include/pthread.h	/^  PTHREAD_MUTEX_TIMED_NP = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon4
PTHREAD_ONCE_INIT	libs/Newton/include/pthread.h	675;"	d
PTHREAD_PROCESS_PRIVATE	libs/Newton/include/pthread.h	/^  PTHREAD_PROCESS_PRIVATE       = 0,$/;"	e	enum:__anon3
PTHREAD_PROCESS_SHARED	libs/Newton/include/pthread.h	/^  PTHREAD_PROCESS_SHARED        = 1,$/;"	e	enum:__anon3
PTHREAD_RECURSIVE_MUTEX_INITIALIZER	libs/Newton/include/pthread.h	694;"	d
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP	libs/Newton/include/pthread.h	700;"	d
PTHREAD_RWLOCK_INITIALIZER	libs/Newton/include/pthread.h	705;"	d
PTHREAD_SCOPE_PROCESS	libs/Newton/include/pthread.h	/^  PTHREAD_SCOPE_PROCESS         = 0,$/;"	e	enum:__anon3
PTHREAD_SCOPE_SYSTEM	libs/Newton/include/pthread.h	/^  PTHREAD_SCOPE_SYSTEM          = 1,  \/* Default *\/$/;"	e	enum:__anon3
PTHREAD_SPINLOCK_INITIALIZER	libs/Newton/include/pthread.h	707;"	d
PTHREAD_STACK_MIN	libs/Newton/include/pthread.h	516;"	d
PTHREAD_STACK_MIN	libs/Newton/include/pthread.h	517;"	d
PTHREAD_THREADS_MAX	libs/Newton/include/pthread.h	523;"	d
PTHREAD_THREADS_MAX	libs/Newton/include/pthread.h	524;"	d
PTW32_ALERTABLE_ASYNC_CANCEL	libs/Newton/include/pthread.h	/^  PTW32_ALERTABLE_ASYNC_CANCEL              = 0x0002  \/* Can cancel blocked threads. *\/$/;"	e	enum:ptw32_features
PTW32_ATTR_VALID	libs/Newton/include/implement.h	184;"	d
PTW32_BUILD	libs/Newton/include/config.h	11;"	d
PTW32_CDECL	libs/Newton/include/pthread.h	570;"	d
PTW32_CONFIG_H	libs/Newton/include/config.h	4;"	d
PTW32_CONTEXT_H	libs/Newton/include/context.h	38;"	d
PTW32_DLLPORT	libs/Newton/include/need_errno.h	64;"	d
PTW32_DLLPORT	libs/Newton/include/need_errno.h	66;"	d
PTW32_DLLPORT	libs/Newton/include/need_errno.h	69;"	d
PTW32_DLLPORT	libs/Newton/include/pthread.h	552;"	d
PTW32_DLLPORT	libs/Newton/include/pthread.h	554;"	d
PTW32_DLLPORT	libs/Newton/include/pthread.h	557;"	d
PTW32_DLLPORT	libs/Newton/include/sched.h	81;"	d
PTW32_DLLPORT	libs/Newton/include/sched.h	83;"	d
PTW32_DLLPORT	libs/Newton/include/sched.h	86;"	d
PTW32_DLLPORT	libs/Newton/include/semaphore.h	80;"	d
PTW32_DLLPORT	libs/Newton/include/semaphore.h	82;"	d
PTW32_DLLPORT	libs/Newton/include/semaphore.h	85;"	d
PTW32_EPS_CANCEL	libs/Newton/include/implement.h	551;"	d
PTW32_EPS_EXIT	libs/Newton/include/implement.h	550;"	d
PTW32_FALSE	libs/Newton/include/pthread.h	/^  PTW32_FALSE = 0,$/;"	e	enum:__anon1
PTW32_FTIME	libs/Newton/include/test.h	65;"	d
PTW32_FTIME	libs/Newton/include/test.h	69;"	d
PTW32_FTIME	libs/Newton/include/test.h	72;"	d
PTW32_INCLUDE_WINDOWS_H	libs/Newton/include/pthread.h	194;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_64	libs/Newton/include/implement.h	751;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_64	libs/Newton/include/implement.h	879;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG	libs/Newton/include/implement.h	811;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG	libs/Newton/include/implement.h	886;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_LONG	libs/Newton/include/implement.h	889;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR	libs/Newton/include/implement.h	870;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR	libs/Newton/include/implement.h	896;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_PTR	libs/Newton/include/implement.h	900;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE	libs/Newton/include/implement.h	905;"	d
PTW32_INTERLOCKED_COMPARE_EXCHANGE_SIZE	libs/Newton/include/implement.h	911;"	d
PTW32_INTERLOCKED_DECREMENT_64	libs/Newton/include/implement.h	798;"	d
PTW32_INTERLOCKED_DECREMENT_64	libs/Newton/include/implement.h	883;"	d
PTW32_INTERLOCKED_DECREMENT_LONG	libs/Newton/include/implement.h	858;"	d
PTW32_INTERLOCKED_DECREMENT_LONG	libs/Newton/include/implement.h	894;"	d
PTW32_INTERLOCKED_DECREMENT_SIZE	libs/Newton/include/implement.h	909;"	d
PTW32_INTERLOCKED_DECREMENT_SIZE	libs/Newton/include/implement.h	915;"	d
PTW32_INTERLOCKED_EXCHANGE_64	libs/Newton/include/implement.h	763;"	d
PTW32_INTERLOCKED_EXCHANGE_64	libs/Newton/include/implement.h	880;"	d
PTW32_INTERLOCKED_EXCHANGE_ADD_64	libs/Newton/include/implement.h	774;"	d
PTW32_INTERLOCKED_EXCHANGE_ADD_64	libs/Newton/include/implement.h	881;"	d
PTW32_INTERLOCKED_EXCHANGE_ADD_LONG	libs/Newton/include/implement.h	834;"	d
PTW32_INTERLOCKED_EXCHANGE_ADD_LONG	libs/Newton/include/implement.h	892;"	d
PTW32_INTERLOCKED_EXCHANGE_ADD_SIZE	libs/Newton/include/implement.h	907;"	d
PTW32_INTERLOCKED_EXCHANGE_ADD_SIZE	libs/Newton/include/implement.h	913;"	d
PTW32_INTERLOCKED_EXCHANGE_LONG	libs/Newton/include/implement.h	823;"	d
PTW32_INTERLOCKED_EXCHANGE_LONG	libs/Newton/include/implement.h	891;"	d
PTW32_INTERLOCKED_EXCHANGE_PTR	libs/Newton/include/implement.h	874;"	d
PTW32_INTERLOCKED_EXCHANGE_PTR	libs/Newton/include/implement.h	897;"	d
PTW32_INTERLOCKED_EXCHANGE_PTR	libs/Newton/include/implement.h	901;"	d
PTW32_INTERLOCKED_EXCHANGE_SIZE	libs/Newton/include/implement.h	906;"	d
PTW32_INTERLOCKED_EXCHANGE_SIZE	libs/Newton/include/implement.h	912;"	d
PTW32_INTERLOCKED_INCREMENT_64	libs/Newton/include/implement.h	786;"	d
PTW32_INTERLOCKED_INCREMENT_64	libs/Newton/include/implement.h	882;"	d
PTW32_INTERLOCKED_INCREMENT_LONG	libs/Newton/include/implement.h	846;"	d
PTW32_INTERLOCKED_INCREMENT_LONG	libs/Newton/include/implement.h	893;"	d
PTW32_INTERLOCKED_INCREMENT_SIZE	libs/Newton/include/implement.h	908;"	d
PTW32_INTERLOCKED_INCREMENT_SIZE	libs/Newton/include/implement.h	914;"	d
PTW32_INTERLOCKED_LONG	libs/Newton/include/implement.h	96;"	d
PTW32_INTERLOCKED_LONGPTR	libs/Newton/include/implement.h	99;"	d
PTW32_INTERLOCKED_PVOID	libs/Newton/include/implement.h	98;"	d
PTW32_INTERLOCKED_PVOID_PTR	libs/Newton/include/implement.h	101;"	d
PTW32_INTERLOCKED_SIZE	libs/Newton/include/implement.h	97;"	d
PTW32_INTERLOCKED_SIZEPTR	libs/Newton/include/implement.h	100;"	d
PTW32_INTERLOCKED_VOLATILE	libs/Newton/include/implement.h	92;"	d
PTW32_INTERLOCKED_VOLATILE	libs/Newton/include/implement.h	94;"	d
PTW32_LEVEL	libs/Newton/include/pthread.h	100;"	d
PTW32_LEVEL	libs/Newton/include/pthread.h	101;"	d
PTW32_LEVEL	libs/Newton/include/pthread.h	108;"	d
PTW32_LEVEL	libs/Newton/include/pthread.h	1363;"	d
PTW32_LEVEL	libs/Newton/include/pthread.h	86;"	d
PTW32_LEVEL	libs/Newton/include/pthread.h	89;"	d
PTW32_LEVEL	libs/Newton/include/pthread.h	94;"	d
PTW32_LEVEL	libs/Newton/include/pthread.h	95;"	d
PTW32_LEVEL_MAX	libs/Newton/include/pthread.h	105;"	d
PTW32_LEVEL_MAX	libs/Newton/include/pthread.h	1364;"	d
PTW32_MAX	libs/Newton/include/implement.h	555;"	d
PTW32_MIN	libs/Newton/include/implement.h	556;"	d
PTW32_OBJECT_AUTO_INIT	libs/Newton/include/benchtest.h	60;"	d
PTW32_OBJECT_AUTO_INIT	libs/Newton/include/implement.h	219;"	d
PTW32_OBJECT_INVALID	libs/Newton/include/implement.h	220;"	d
PTW32_PROGCTR	libs/Newton/include/context.h	40;"	d
PTW32_PROGCTR	libs/Newton/include/context.h	43;"	d
PTW32_PROGCTR	libs/Newton/include/context.h	47;"	d
PTW32_PROGCTR	libs/Newton/include/context.h	51;"	d
PTW32_PROGCTR	libs/Newton/include/context.h	55;"	d
PTW32_PROGCTR	libs/Newton/include/context.h	59;"	d
PTW32_PROGCTR	libs/Newton/include/context.h	63;"	d
PTW32_PROGCTR	libs/Newton/include/context.h	67;"	d
PTW32_ROBUST_CONSISTENT	libs/Newton/include/implement.h	/^  PTW32_ROBUST_CONSISTENT,$/;"	e	enum:ptw32_robust_state_t_
PTW32_ROBUST_INCONSISTENT	libs/Newton/include/implement.h	/^  PTW32_ROBUST_INCONSISTENT,$/;"	e	enum:ptw32_robust_state_t_
PTW32_ROBUST_NOTRECOVERABLE	libs/Newton/include/implement.h	/^  PTW32_ROBUST_NOTRECOVERABLE$/;"	e	enum:ptw32_robust_state_t_
PTW32_RWLOCK_MAGIC	libs/Newton/include/implement.h	371;"	d
PTW32_SCHED_LEVEL	libs/Newton/include/sched.h	179;"	d
PTW32_SCHED_LEVEL	libs/Newton/include/sched.h	42;"	d
PTW32_SCHED_LEVEL	libs/Newton/include/sched.h	45;"	d
PTW32_SCHED_LEVEL	libs/Newton/include/sched.h	50;"	d
PTW32_SCHED_LEVEL	libs/Newton/include/sched.h	51;"	d
PTW32_SCHED_LEVEL	libs/Newton/include/sched.h	56;"	d
PTW32_SCHED_LEVEL	libs/Newton/include/sched.h	57;"	d
PTW32_SCHED_LEVEL	libs/Newton/include/sched.h	64;"	d
PTW32_SCHED_LEVEL_MAX	libs/Newton/include/sched.h	180;"	d
PTW32_SCHED_LEVEL_MAX	libs/Newton/include/sched.h	61;"	d
PTW32_SEMAPHORE_LEVEL	libs/Newton/include/semaphore.h	166;"	d
PTW32_SEMAPHORE_LEVEL	libs/Newton/include/semaphore.h	42;"	d
PTW32_SEMAPHORE_LEVEL	libs/Newton/include/semaphore.h	45;"	d
PTW32_SEMAPHORE_LEVEL	libs/Newton/include/semaphore.h	50;"	d
PTW32_SEMAPHORE_LEVEL	libs/Newton/include/semaphore.h	51;"	d
PTW32_SEMAPHORE_LEVEL	libs/Newton/include/semaphore.h	56;"	d
PTW32_SEMAPHORE_LEVEL	libs/Newton/include/semaphore.h	57;"	d
PTW32_SEMAPHORE_LEVEL	libs/Newton/include/semaphore.h	64;"	d
PTW32_SEMAPHORE_LEVEL_MAX	libs/Newton/include/semaphore.h	167;"	d
PTW32_SEMAPHORE_LEVEL_MAX	libs/Newton/include/semaphore.h	61;"	d
PTW32_SERVICES_ERROR	libs/Newton/include/implement.h	540;"	d
PTW32_SERVICES_FACILITY	libs/Newton/include/implement.h	539;"	d
PTW32_SPIN_INVALID	libs/Newton/include/implement.h	285;"	d
PTW32_SPIN_LOCKED	libs/Newton/include/implement.h	287;"	d
PTW32_SPIN_UNLOCKED	libs/Newton/include/implement.h	286;"	d
PTW32_SPIN_USE_MUTEX	libs/Newton/include/implement.h	288;"	d
PTW32_STRUCT_TIMEB	libs/Newton/include/test.h	66;"	d
PTW32_STRUCT_TIMEB	libs/Newton/include/test.h	70;"	d
PTW32_STRUCT_TIMEB	libs/Newton/include/test.h	73;"	d
PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE	libs/Newton/include/pthread.h	/^  PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE = 0x0001, \/* System provides it. *\/$/;"	e	enum:ptw32_features
PTW32_THREAD_ID_REUSE_INCREMENT	libs/Newton/include/config.h	102;"	d
PTW32_THREAD_NULL_ID	libs/Newton/include/test.h	48;"	d
PTW32_THREAD_REUSE_EMPTY	libs/Newton/include/implement.h	563;"	d
PTW32_TRUE	libs/Newton/include/pthread.h	/^  PTW32_TRUE = (! PTW32_FALSE)$/;"	e	enum:__anon1
PTW32_VERSION	libs/Newton/include/pthread.h	40;"	d
PTW32_VERSION_STRING	libs/Newton/include/pthread.h	41;"	d
PTW32__DWORD_DEF	libs/Newton/include/pthread.h	311;"	d
PTW32__HANDLE_DEF	libs/Newton/include/pthread.h	307;"	d
PThreadCleanup	libs/Newton/include/pthread.h	/^          PThreadCleanup($/;"	f	class:PThreadCleanup
PThreadCleanup	libs/Newton/include/pthread.h	/^          PThreadCleanup() :$/;"	f	class:PThreadCleanup
PThreadCleanup	libs/Newton/include/pthread.h	/^        class PThreadCleanup {$/;"	c
PThreadState	libs/Newton/include/implement.h	/^PThreadState;$/;"	t	typeref:enum:__anon24
PThreadStateCancelPending	libs/Newton/include/implement.h	/^  PThreadStateCancelPending,	\/* Thread alive but                     *\/$/;"	e	enum:__anon24
PThreadStateCanceling	libs/Newton/include/implement.h	/^  PThreadStateCanceling,	\/* Thread alive but is                  *\/$/;"	e	enum:__anon24
PThreadStateExiting	libs/Newton/include/implement.h	/^  PThreadStateExiting,		\/* Thread alive but exiting             *\/$/;"	e	enum:__anon24
PThreadStateInitial	libs/Newton/include/implement.h	/^  PThreadStateInitial = 0,	\/* Thread not running                   *\/$/;"	e	enum:__anon24
PThreadStateLast	libs/Newton/include/implement.h	/^  PThreadStateLast,             \/* All handlers have been run and now   *\/$/;"	e	enum:__anon24
PThreadStateReuse	libs/Newton/include/implement.h	/^  PThreadStateReuse             \/* In reuse pool.                       *\/$/;"	e	enum:__anon24
PThreadStateRunning	libs/Newton/include/implement.h	/^  PThreadStateRunning,		\/* Thread alive & kicking               *\/$/;"	e	enum:__anon24
PThreadStateSuspended	libs/Newton/include/implement.h	/^  PThreadStateSuspended,	\/* Thread alive but suspended           *\/$/;"	e	enum:__anon24
PULSE	src/Util.h	128;"	d
PURMUT_MASK	libs/Newton/include/dgVector.h	645;"	d
PackHigh	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector PackHigh (const dgVector& data) const$/;"	f	class:dgVector
PackLow	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector PackLow (const dgVector& data) const$/;"	f	class:dgVector
PhysicsBodyCF	src/LookupManager.h	/^typedef NewtonBody* (*PhysicsBodyCF)(const NewtonWorld* const, const NewtonCollision* const, const dFloat* const);$/;"	t
PhysicsBodyFuncs	src/LookupManager.c	/^PhysicsBodyCF PhysicsBodyFuncs[] = {$/;"	v
PointerToInt	libs/Newton/include/dgTypes.h	665;"	d
PolygonBoxDistance	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgFloat32 PolygonBoxDistance (const dgVector& faceNormal, dgInt32 indexCount, const dgInt32* const indexArray, dgInt32 stride, const dgFloat32* const vertexArray) const$/;"	f	class:dgFastAABBInfo
PolygonBoxRayDistance	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgFloat32 PolygonBoxRayDistance (const dgVector& faceNormal, dgInt32 indexCount, const dgInt32* const indexArray, dgInt32 stride, const dgFloat32* const vertexArray, const dgFastRayTest& ray) const$/;"	f	class:dgFastAABBInfo
Pool	libs/Newton/include/dgMemory.h	/^		class Pool$/;"	c	class:dgMemoryAllocator::dgMemoryLeaksTracker
Pop	libs/Newton/include/dgFastQueue.h	/^void dgFastQueue<T, sizeInPowerOfTwo>::Pop()$/;"	f	class:dgFastQueue
Pop	libs/Newton/include/dgHeap.h	/^void dgDownHeap<OBJECT,KEY>::Pop ()$/;"	f	class:dgDownHeap
Pop	libs/Newton/include/dgHeap.h	/^void dgUpHeap<OBJECT,KEY>::Pop ()$/;"	f	class:dgUpHeap
PredictAngularVelocity	libs/Newton/include/dgDeformableBody.h	/^	virtual dgVector PredictAngularVelocity(dgFloat32 timestep) const {return m_omega;}$/;"	f	class:dgDeformableBody
PredictAngularVelocity	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE dgVector dgDynamicBody::PredictAngularVelocity(dgFloat32 timestep) const$/;"	f	class:dgDynamicBody
PredictAngularVelocity	libs/Newton/include/dgKinematicBody.h	/^	virtual dgVector PredictAngularVelocity(dgFloat32 timestep) const {return m_omega;}$/;"	f	class:dgKinematicBody
PredictLinearVelocity	libs/Newton/include/dgDeformableBody.h	/^	virtual dgVector PredictLinearVelocity(dgFloat32 timestep) const {return m_veloc;}$/;"	f	class:dgDeformableBody
PredictLinearVelocity	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE dgVector dgDynamicBody::PredictLinearVelocity(dgFloat32 timestep) const$/;"	f	class:dgDynamicBody
PredictLinearVelocity	libs/Newton/include/dgKinematicBody.h	/^	virtual dgVector PredictLinearVelocity(dgFloat32 timestep) const {return m_veloc;}$/;"	f	class:dgKinematicBody
PtW32CatchAll	libs/Newton/include/pthread.h	1336;"	d
Pupolate	libs/Newton/include/dgCollisionCompoundFractured.h	/^		void Pupolate(const dgConectivityGraph& graph)$/;"	f	class:dgCollisionCompoundFractured::dgConectivityGraphMap
Push	libs/Newton/include/dgFastQueue.h	/^void dgFastQueue<T, sizeInPowerOfTwo>::Push(T& object)$/;"	f	class:dgFastQueue
Push	libs/Newton/include/dgHeap.h	/^void dgDownHeap<OBJECT,KEY>::Push (OBJECT &obj, KEY key)$/;"	f	class:dgDownHeap
Push	libs/Newton/include/dgHeap.h	/^void dgUpHeap<OBJECT,KEY>::Push (OBJECT &obj, KEY key)$/;"	f	class:dgUpHeap
QuantizeCordinade	libs/Newton/include/dgMeshEffect.h	/^DG_INLINE dgFloat64 dgMeshEffect::QuantizeCordinade(dgFloat64 x) const$/;"	f	class:dgMeshEffect
RAD	src/MatrixMath.h	10;"	d
RECORD	libs/Newton/include/dgHeap.h	/^		RECORD (KEY key, const OBJECT& obj)$/;"	f	struct:dgHeapBase::RECORD
RECORD	libs/Newton/include/dgHeap.h	/^	struct RECORD $/;"	s	class:dgHeapBase
RED	libs/Newton/include/dgTree.h	/^		RED = true,$/;"	e	enum:dgRedBackNode::REDBLACK_COLOR
REDBLACK_COLOR	libs/Newton/include/dgTree.h	/^	enum REDBLACK_COLOR$/;"	g	class:dgRedBackNode
RETAIN_WSALASTERROR	libs/Newton/include/config.h	121;"	d
RETAIN_WSALASTERROR	libs/Newton/include/config.h	67;"	d
RVOID	src/Util.h	20;"	d
RayDistance	libs/Newton/include/dgAABBPolygonSoup.h	/^		DG_INLINE dgFloat32 RayDistance (const dgFastRayTest& ray, const dgTriplex* const vertexArray) const$/;"	f	class:dgAABBPolygonSoup::dgNode
Reciproc	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector Reciproc () const$/;"	f	class:dgVector
Release	libs/Newton/include/dgCollision.h	/^DG_INLINE dgInt32 dgCollision::Release () const$/;"	f	class:dgCollision
Release	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgInt32 dgCollisionInstance::Release ()$/;"	f	class:dgCollisionInstance
Release	libs/Newton/include/dgRef.h	/^inline dgInt32 dgRef::Release ()$/;"	f	class:dgRef
Release	libs/Newton/include/dgRefCounter.h	/^inline int dgRefCounter::Release()$/;"	f	class:dgRefCounter
ReleaseIndirectLock	libs/Newton/include/dgThreadHive.h	/^DG_INLINE void dgThreadHive::ReleaseIndirectLock (dgThread::dgCriticalSection* const criticalSectionLock) const$/;"	f	class:dgThreadHive
Remove	libs/Newton/include/dgBilateralConstraint.h	/^	virtual void Remove (dgWorld* world) {dgAssert (0);}$/;"	f	class:dgBilateralConstraint
Remove	libs/Newton/include/dgHeap.h	/^void dgDownHeap<OBJECT,KEY>::Remove (dgInt32 index)$/;"	f	class:dgDownHeap
Remove	libs/Newton/include/dgHeap.h	/^void dgUpHeap<OBJECT,KEY>::Remove (dgInt32 index)$/;"	f	class:dgUpHeap
Remove	libs/Newton/include/dgList.h	/^void dgList<T>::Remove (const T &element)$/;"	f	class:dgList
Remove	libs/Newton/include/dgList.h	/^void dgList<T>::Remove (dgListNode* const node)$/;"	f	class:dgList
Remove	libs/Newton/include/dgTree.h	/^void dgTree<OBJECT, KEY>::Remove (KEY key) $/;"	f	class:dgTree
Remove	libs/Newton/include/dgTree.h	/^void dgTree<OBJECT, KEY>::Remove (typename dgTree<OBJECT, KEY>::dgTreeNode* const node)$/;"	f	class:dgTree
Remove	libs/Newton/include/dgWorldDynamicUpdate.h	/^	T Remove () $/;"	f	class:dgQueue
RemoveAll	libs/Newton/include/dgList.h	/^void dgList<T>::RemoveAll ()$/;"	f	class:dgList
RemoveAll	libs/Newton/include/dgTree.h	/^void dgTree<OBJECT, KEY>::RemoveAll () $/;"	f	class:dgTree
Replace	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::Replace (OBJECT &element, KEY key)$/;"	f	class:dgTree
ReplaceKey	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::ReplaceKey (KEY oldKey, KEY newKey)$/;"	f	class:dgTree
ReplaceKey	libs/Newton/include/dgTree.h	/^typename dgTree<OBJECT, KEY>::dgTreeNode* dgTree<OBJECT, KEY>::ReplaceKey (typename dgTree<OBJECT, KEY>::dgTreeNode* const node, KEY key)$/;"	f	class:dgTree
Reset	libs/Newton/include/dgWorldDynamicUpdate.h	/^	void Reset ()$/;"	f	class:dgQueue
ResetMaxDOF	libs/Newton/include/dgConstraint.h	/^inline void dgConstraint::ResetMaxDOF()$/;"	f	class:dgConstraint
ResetMaxDOF	libs/Newton/include/dgContact.h	/^inline void dgContact::ResetMaxDOF()$/;"	f	class:dgContact
Resize	libs/Newton/include/dgArray.h	/^void dgArray<T>::Resize (dgInt32 size) const$/;"	f	class:dgArray
RotateToBegin	libs/Newton/include/dgList.h	/^void dgList<T>::RotateToBegin (dgListNode* const node)$/;"	f	class:dgList
RotateToEnd	libs/Newton/include/dgList.h	/^void dgList<T>::RotateToEnd (dgListNode* const node)$/;"	f	class:dgList
RotateVector	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgVector dgMatrix::RotateVector (const dgVector &v) const$/;"	f	class:dgMatrix
SCAN_header	staticbin/stb_image.c	/^   SCAN_header$/;"	e	enum:__anon29	file:
SCAN_load	staticbin/stb_image.c	/^   SCAN_load=0,$/;"	e	enum:__anon29	file:
SCAN_type	staticbin/stb_image.c	/^   SCAN_type,$/;"	e	enum:__anon29	file:
SCENEMANAGER_H	src/SceneManager.h	2;"	d
SCHED_FIFO	libs/Newton/include/sched.h	/^  SCHED_FIFO,$/;"	e	enum:__anon14
SCHED_MAX	libs/Newton/include/sched.h	/^  SCHED_MAX   = SCHED_RR$/;"	e	enum:__anon14
SCHED_MIN	libs/Newton/include/sched.h	/^  SCHED_MIN   = SCHED_OTHER,$/;"	e	enum:__anon14
SCHED_OTHER	libs/Newton/include/sched.h	/^  SCHED_OTHER = 0,$/;"	e	enum:__anon14
SCHED_RR	libs/Newton/include/sched.h	/^  SCHED_RR,$/;"	e	enum:__anon14
SEMAPHORE_H	libs/Newton/include/semaphore.h	40;"	d
SEM_NSEMS_MAX	libs/Newton/include/pthread.h	530;"	d
SEM_NSEMS_MAX	libs/Newton/include/pthread.h	531;"	d
SEM_VALUE_MAX	libs/Newton/include/pthread.h	536;"	d
SEM_VALUE_MAX	libs/Newton/include/pthread.h	537;"	d
SERIALIZE_ID_BOX	libs/Newton/include/Newton.h	93;"	d
SERIALIZE_ID_CAPSULE	libs/Newton/include/Newton.h	88;"	d
SERIALIZE_ID_CHAMFERCYLINDER	libs/Newton/include/Newton.h	89;"	d
SERIALIZE_ID_CLOTH_PATCH	libs/Newton/include/Newton.h	100;"	d
SERIALIZE_ID_COMPOUND	libs/Newton/include/Newton.h	97;"	d
SERIALIZE_ID_CONE	libs/Newton/include/Newton.h	94;"	d
SERIALIZE_ID_CONVEXHULL	libs/Newton/include/Newton.h	95;"	d
SERIALIZE_ID_CYLINDER	libs/Newton/include/Newton.h	91;"	d
SERIALIZE_ID_DEFORMABLE_SOLID	libs/Newton/include/Newton.h	101;"	d
SERIALIZE_ID_FRACTURED_COMPOUND	libs/Newton/include/Newton.h	104;"	d
SERIALIZE_ID_HEIGHTFIELD	libs/Newton/include/Newton.h	99;"	d
SERIALIZE_ID_NULL	libs/Newton/include/Newton.h	96;"	d
SERIALIZE_ID_SCENE	libs/Newton/include/Newton.h	103;"	d
SERIALIZE_ID_SPHERE	libs/Newton/include/Newton.h	87;"	d
SERIALIZE_ID_TAPEREDCAPSULE	libs/Newton/include/Newton.h	90;"	d
SERIALIZE_ID_TAPEREDCYLINDER	libs/Newton/include/Newton.h	92;"	d
SERIALIZE_ID_TREE	libs/Newton/include/Newton.h	98;"	d
SERIALIZE_ID_USERMESH	libs/Newton/include/Newton.h	102;"	d
SE_ERROR	libs/Newton/include/implement.h	518;"	d
SE_INFORMATION	libs/Newton/include/implement.h	516;"	d
SE_SUCCESS	libs/Newton/include/implement.h	515;"	d
SE_WARNING	libs/Newton/include/implement.h	517;"	d
SHADER_H	src/Shader.h	2;"	d
SIG_BLOCK	libs/Newton/include/pthread.h	328;"	d
SIG_SETMASK	libs/Newton/include/pthread.h	336;"	d
SIG_UNBLOCK	libs/Newton/include/pthread.h	332;"	d
SOURCES	Makefile	/^SOURCES	=	$(notdir $(wildcard $(SRC)\/**\/*.c $(SRC)\/*.c))$/;"	m
SRC	Makefile	/^SRC 	=	src$/;"	m
STATE_H	src/State.h	2;"	d
STBIDEF	src/stb_image.h	220;"	d
STBIDEF	src/stb_image.h	222;"	d
STBI_HAS_LROTL	staticbin/stb_image.c	53;"	d	file:
STBI_INCLUDE_STB_IMAGE_H	src/stb_image.h	75;"	d
STBI_NOTUSED	staticbin/stb_image.c	47;"	d	file:
STBI_NOTUSED	staticbin/stb_image.c	49;"	d	file:
STBI_VERSION	src/stb_image.h	201;"	d
STBI__BYTECAST	staticbin/stb_image.c	2119;"	d	file:
STBI__F_avg	staticbin/stb_image.c	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon38	file:
STBI__F_avg_first	staticbin/stb_image.c	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon38	file:
STBI__F_none	staticbin/stb_image.c	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon38	file:
STBI__F_paeth	staticbin/stb_image.c	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon38	file:
STBI__F_paeth_first	staticbin/stb_image.c	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon38	file:
STBI__F_sub	staticbin/stb_image.c	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon38	file:
STBI__F_up	staticbin/stb_image.c	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon38	file:
STBI__HDR_BUFLEN	staticbin/stb_image.c	3830;"	d	file:
STBI__IDCT_1D	staticbin/stb_image.c	888;"	d	file:
STBI__MARKER_none	staticbin/stb_image.c	1002;"	d	file:
STBI__RESTART	staticbin/stb_image.c	1019;"	d	file:
STBI__ZFAST_BITS	staticbin/stb_image.c	1632;"	d	file:
STBI__ZFAST_MASK	staticbin/stb_image.c	1633;"	d	file:
STBI_default	src/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon49
STBI_grey	src/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon49
STBI_grey_alpha	src/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon49
STBI_rgb	src/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon49
STBI_rgb_alpha	src/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon49
STD	Makefile	/^STD 	=	-std=gnu11$/;"	m
SanityCheck	libs/Newton/include/dgHeap.h	/^bool dgDownHeap<OBJECT,KEY>::SanityCheck()$/;"	f	class:dgDownHeap
SanityCheck	libs/Newton/include/dgHeap.h	/^bool dgUpHeap<OBJECT,KEY>::SanityCheck()$/;"	f	class:dgUpHeap
SanityCheck	libs/Newton/include/dgList.h	/^bool dgList<T>::SanityCheck () const$/;"	f	class:dgList
SanityCheck	libs/Newton/include/dgTree.h	/^bool dgTree<OBJECT, KEY>::SanityCheck () const$/;"	f	class:dgTree
SanityCheck	libs/Newton/include/dgTree.h	/^bool dgTree<OBJECT, KEY>::SanityCheck (typename dgTree<OBJECT, KEY>::dgTreeNode* const ptr, dgInt32 height) const$/;"	f	class:dgTree
SaveInfo	libs/Newton/include/dgMemory.h	/^		DG_INLINE void SaveInfo(dgMemoryAllocator* const allocator, void* const ptr, dgInt32 size, dgInt32& enumerator, dgInt32 workingSize = 0)$/;"	f	class:dgMemoryAllocator::dgMemoryInfo
Scale	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::Scale (T scale)$/;"	f	class:dgGeneralVector
Scale	libs/Newton/include/dgObb.h	/^inline void dgObb::Scale (dgFloat32 Ws, dgFloat32 Hs, dgFloat32 Bs) $/;"	f	class:dgObb
Scale	libs/Newton/include/dgPlane.h	/^DG_INLINE dgBigPlane dgBigPlane::Scale (dgFloat64 s) const$/;"	f	class:dgBigPlane
Scale	libs/Newton/include/dgPlane.h	/^DG_INLINE dgPlane dgPlane::Scale (dgFloat32 s)	const$/;"	f	class:dgPlane
Scale	libs/Newton/include/dgQuaternion.h	/^inline void dgQuaternion::Scale (dgFloat32 scale) $/;"	f	class:dgQuaternion
Scale3	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> Scale3 (T scale) const$/;"	f	class:dgTemplateVector
Scale3	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector Scale3 (dgFloat32 s) const$/;"	f	class:dgVector
Scale3	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector Scale3 (dgFloat32 scale) const$/;"	f	class:dgVector
Scale4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> Scale4 (T scale) const$/;"	f	class:dgTemplateVector
Scale4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector Scale4 (dgFloat32 s) const$/;"	f	class:dgVector
Scale4	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector Scale4 (dgFloat32 scale) const$/;"	f	class:dgVector
Serialize	libs/Newton/include/dgBallConstraint.h	/^	virtual void Serialize (dgSerialize serializeCallback, void* const userData) {dgAssert (0);}$/;"	f	class:dgBallConstraint
Serialize	libs/Newton/include/dgCorkscrewConstraint.h	/^	virtual void Serialize (dgSerialize serializeCallback, void* const userData) {dgAssert (0);}$/;"	f	class:dgCorkscrewConstraint
Serialize	libs/Newton/include/dgHingeConstraint.h	/^	virtual void Serialize (dgSerialize serializeCallback, void* const userData) {dgAssert (0);}$/;"	f	class:dgHingeConstraint
Serialize	libs/Newton/include/dgSlidingConstraint.h	/^	virtual void Serialize (dgSerialize serializeCallback, void* const userData) {dgAssert (0);}$/;"	f	class:dgSlidingConstraint
Serialize	libs/Newton/include/dgUniversalConstraint.h	/^	virtual void Serialize (dgSerialize serializeCallback, void* const userData) {dgAssert (0);}$/;"	f	class:dgUniversalConstraint
Serialize	libs/Newton/include/dgUpVectorConstraint.h	/^	virtual void Serialize (dgSerialize serializeCallback, void* const userData) {dgAssert (0);}$/;"	f	class:dgUpVectorConstraint
Set	libs/Newton/include/dgList.h	/^		void Set (dgListNode* const node)$/;"	f	class:dgList::Iterator
Set	libs/Newton/include/dgTree.h	/^		void Set (dgTreeNode* const node)$/;"	f	class:dgTree::Iterator
SetAABB	libs/Newton/include/dgBroadPhase.h	/^	void SetAABB(const dgVector& minBox, const dgVector& maxBox)$/;"	f	class:dgBroadPhaseNode
SetAllocator	libs/Newton/include/dgList.h	/^void dgList<T>::SetAllocator (dgMemoryAllocator* const allocator)$/;"	f	class:dgList
SetAllocator	libs/Newton/include/dgTree.h	/^void dgTree<OBJECT, KEY>::SetAllocator (dgMemoryAllocator* const allocator)$/;"	f	class:dgTree
SetAngularDamping	libs/Newton/include/dgDeformableBody.h	/^	virtual void SetAngularDamping (const dgVector& angularDamp) {}$/;"	f	class:dgDeformableBody
SetAngularDamping	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE void dgDynamicBody::SetAngularDamping (const dgVector& angularDamp)$/;"	f	class:dgDynamicBody
SetAngularDamping	libs/Newton/include/dgKinematicBody.h	/^	virtual void SetAngularDamping (const dgVector& angularDamp) {}$/;"	f	class:dgKinematicBody
SetAutoSleep	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetAutoSleep (bool state)$/;"	f	class:dgBody
SetBodies	libs/Newton/include/dgConstraint.h	/^inline void dgConstraint::SetBodies (dgBody* const body0, dgBody* const body1)$/;"	f	class:dgConstraint
SetBody	libs/Newton/include/dgBodyMasterList.h	/^	void SetBody(dgBody* const body) {m_body = body;}$/;"	f	class:dgBodyMasterListRow
SetBreakImpulse	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetBreakImpulse(dgFloat32 force)$/;"	f	class:dgCollisionInstance
SetBroadPhase	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetBroadPhase(dgBroadPhaseNode* const node)$/;"	f	class:dgBody
SetBroadPhaseAggregate	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetBroadPhaseAggregate(dgBroadPhaseAggregate* const aggregate)$/;"	f	class:dgBody
SetCentreOfMass	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetCentreOfMass (const dgVector& com)$/;"	f	class:dgBody
SetChildShape	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetChildShape (dgCollision* const shape)$/;"	f	class:dgCollisionInstance
SetCollidable	libs/Newton/include/dgConstraint.h	/^inline void dgConstraint::SetCollidable (bool state)$/;"	f	class:dgConstraint
SetCollidable	libs/Newton/include/dgDeformableBody.h	/^	virtual void SetCollidable (bool state) {m_collidable = state;}$/;"	f	class:dgDeformableBody
SetCollidable	libs/Newton/include/dgDynamicBody.h	/^	virtual void SetCollidable (bool state) {}$/;"	f	class:dgDynamicBody
SetCollidable	libs/Newton/include/dgKinematicBody.h	/^	virtual void SetCollidable (bool state) {m_collidable = state;}$/;"	f	class:dgKinematicBody
SetCollisionBBox	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetCollisionBBox (const dgVector& p0, const dgVector& p1)$/;"	f	class:dgCollisionInstance
SetCollisionCallback	libs/Newton/include/dgContact.h	/^inline void dgContactMaterial::SetCollisionCallback (OnAABBOverlap aabbOverlap, OnContactCallback contact) $/;"	f	class:dgContactMaterial
SetCollisionMode	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetCollisionMode(bool mode)$/;"	f	class:dgCollisionInstance
SetCollisionWithLinkedBodies	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetCollisionWithLinkedBodies (bool state)$/;"	f	class:dgBody
SetColor	libs/Newton/include/dgTree.h	/^inline void dgRedBackNode::SetColor (dgRedBackNode::REDBLACK_COLOR color)$/;"	f	class:dgRedBackNode
SetCompoundCollisionCallback	libs/Newton/include/dgContact.h	/^inline void dgContactMaterial::SetCompoundCollisionCallback (OnCompoundCollisionPrefilter aabbOverlap)$/;"	f	class:dgContactMaterial
SetContinueCollisionMode	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetContinueCollisionMode (bool mode)$/;"	f	class:dgBody
SetDestructorCallback	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetDestructorCallback (OnBodyDestroy destructor)$/;"	f	class:dgBody
SetDestructorCallback	libs/Newton/include/dgContact.h	/^inline void dgContact::SetDestructorCallback (OnConstraintDestroy destructor)$/;"	f	class:dgContact
SetDimensions	libs/Newton/include/dgObb.h	/^inline void dgObb::SetDimensions (dgFloat32 W, dgFloat32 H, dgFloat32 B)$/;"	f	class:dgObb
SetDistanceTravel	libs/Newton/include/dgCollisionMesh.h	/^	DG_INLINE void SetDistanceTravel (const dgVector& distanceInGlobalSpace)$/;"	f	class:dgPolygonMeshDesc
SetExtForceAndTorqueCallback	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE void dgDynamicBody::SetExtForceAndTorqueCallback (OnApplyExtForceAndTorque callback)$/;"	f	class:dgDynamicBody
SetExtForceAndTorqueCallback	libs/Newton/include/dgKinematicBody.h	/^	virtual void SetExtForceAndTorqueCallback (OnApplyExtForceAndTorque callback) {}$/;"	f	class:dgKinematicBody
SetFloatOps	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::SetFloatOps(dgInt32 initialCount)$/;"	f	class:dgGeneralVector
SetForce	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE void dgDynamicBody::SetForce (const dgVector& force)$/;"	f	class:dgDynamicBody
SetForce	libs/Newton/include/dgKinematicBody.h	/^	virtual void SetForce (const dgVector& force) {}$/;"	f	class:dgKinematicBody
SetGlobalMatrix	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetGlobalMatrix (const dgMatrix& matrix)$/;"	f	class:dgCollisionInstance
SetGroupID	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetGroupID (dgUnsigned32 id)$/;"	f	class:dgBody
SetInTreeFlag	libs/Newton/include/dgTree.h	/^inline void dgRedBackNode::SetInTreeFlag (dgUnsigned32 flag)$/;"	f	class:dgRedBackNode
SetInvMass	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetInvMass(const dgVector& invMass)$/;"	f	class:dgBody
SetLRU	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE void dgPolyhedra::SetLRU(dgInt32 lru) const$/;"	f	class:dgPolyhedra
SetLeft	libs/Newton/include/dgTree.h	/^		void SetLeft (dgTreeNode* const node)$/;"	f	class:dgTree::dgTreeNode
SetLinearDamping	libs/Newton/include/dgDeformableBody.h	/^	virtual void SetLinearDamping (dgFloat32 linearDamp) {}$/;"	f	class:dgDeformableBody
SetLinearDamping	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE void dgDynamicBody::SetLinearDamping (dgFloat32 linearDamp)$/;"	f	class:dgDynamicBody
SetLinearDamping	libs/Newton/include/dgKinematicBody.h	/^	virtual void SetLinearDamping (dgFloat32 linearDamp) {}$/;"	f	class:dgKinematicBody
SetMark	libs/Newton/include/dgConvexHull3d.h	/^	void SetMark(dgInt32 mark) {m_mark = mark;}$/;"	f	class:dgConvexHull3DFace
SetMark	libs/Newton/include/dgConvexHull4d.h	/^	void SetMark(dgInt32 mark) { m_mark = mark; }$/;"	f	class:dgConvexHull4dTetraherum
SetMatrixOriginAndRotation	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetMatrixOriginAndRotation(const dgMatrix& matrix)$/;"	f	class:dgBody
SetMatrixUpdateCallback	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetMatrixUpdateCallback (OnMatrixUpdateCallback callback)$/;"	f	class:dgBody
SetMemWrites	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::SetMemWrites(dgInt32 initialCount)$/;"	f	class:dgGeneralVector
SetName	libs/Newton/include/dgRef.h	/^inline void dgRef::SetName (const char *name)$/;"	f	class:dgRef
SetNameID	libs/Newton/include/dgRef.h	/^inline void dgRef::SetNameID (dgUnsigned32 newID)$/;"	f	class:dgRef
SetOmega	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetOmega (const dgVector& omega)$/;"	f	class:dgBody
SetParent	libs/Newton/include/dgTree.h	/^		void SetParent (dgTreeNode* const node)$/;"	f	class:dgTree::dgTreeNode
SetRight	libs/Newton/include/dgTree.h	/^		void SetRight (dgTreeNode* const node)$/;"	f	class:dgTree::dgTreeNode
SetSelfCollision	libs/Newton/include/dgBroadPhaseAggregate.h	/^	void SetSelfCollision(bool state) $/;"	f	class:dgBroadPhaseAggregate
SetSignature	libs/Newton/include/dgCollision.h	/^DG_INLINE void dgCollision::SetSignature (dgInt32 signature)$/;"	f	class:dgCollision
SetSleepState	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetSleepState (bool state)$/;"	f	class:dgBody
SetStiffness	libs/Newton/include/dgConstraint.h	/^inline void dgConstraint::SetStiffness(dgFloat32 stiffness)$/;"	f	class:dgConstraint
SetTagId	libs/Newton/include/dgPolygonSoupDatabase.h	/^inline void dgPolygonSoupDatabase::SetTagId(const dgInt32* const facePtr, dgInt32 indexCount, dgUnsigned32 newID) const$/;"	f	class:dgPolygonSoupDatabase
SetTimeOfImpact	libs/Newton/include/dgContact.h	/^inline void dgContact::SetTimeOfImpact(dgFloat32 timetoImpact)$/;"	f	class:dgContact
SetTorque	libs/Newton/include/dgDeformableBody.h	/^	virtual void SetTorque (const dgVector& torque) {} $/;"	f	class:dgDeformableBody
SetTorque	libs/Newton/include/dgDynamicBody.h	/^DG_INLINE void dgDynamicBody::SetTorque (const dgVector& torque)$/;"	f	class:dgDynamicBody
SetTorque	libs/Newton/include/dgKinematicBody.h	/^	virtual void SetTorque (const dgVector& torque) {} $/;"	f	class:dgKinematicBody
SetTransposeAbsMatrix	libs/Newton/include/dgIntersections.h	/^	DG_INLINE void SetTransposeAbsMatrix (const dgMatrix& matrix)$/;"	f	class:dgFastAABBInfo
SetUpdateFeedbackFunction	libs/Newton/include/dgConstraint.h	/^inline void dgConstraint::SetUpdateFeedbackFunction (ConstraintsForceFeeback function)$/;"	f	class:dgConstraint
SetUserData	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetUserData(void* const userData)$/;"	f	class:dgBody
SetUserData	libs/Newton/include/dgContact.h	/^inline void dgContactMaterial::SetUserData (void* const userData)$/;"	f	class:dgContactMaterial
SetUserData0	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetUserData0 (void* const userData)$/;"	f	class:dgCollisionInstance
SetUserData1	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetUserData1 (void* const userData)$/;"	f	class:dgCollisionInstance
SetUserDataID	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetUserDataID (dgUnsigned32 userDataId)$/;"	f	class:dgCollisionInstance
SetUserFlag0	libs/Newton/include/dgRef.h	/^inline void dgRef::SetUserFlag0 (bool flags)$/;"	f	class:dgRef
SetUserFlag1	libs/Newton/include/dgRef.h	/^inline void dgRef::SetUserFlag1 (bool flags)$/;"	f	class:dgRef
SetVelocity	libs/Newton/include/dgBody.h	/^DG_INLINE void dgBody::SetVelocity (const dgVector& velocity)$/;"	f	class:dgBody
SetWorld	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE void dgCollisionInstance::SetWorld (dgWorld* const world)$/;"	f	class:dgCollisionInstance
Shader	src/Shader.h	/^} Shader;$/;"	t	typeref:struct:__anon42
ShaderName	src/LookupManager.c	/^const char* ShaderName[] = {$/;"	v
ShaderType	src/LookupManager.c	/^GLenum ShaderType[] = {$/;"	v
ShiftTripleRight	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector ShiftTripleRight () const$/;"	f	class:dgVector
Solve	libs/Newton/include/dgGeneralMatrix.h	/^bool dgGeneralMatrix<T>::Solve (dgGeneralVector<T> &b, T tol)$/;"	f	class:dgGeneralMatrix
Sort	libs/Newton/include/dgHeap.h	/^void dgDownHeap<OBJECT,KEY>::Sort ()$/;"	f	class:dgDownHeap
Sort	libs/Newton/include/dgHeap.h	/^void dgUpHeap<OBJECT,KEY>::Sort ()$/;"	f	class:dgUpHeap
Sqrt	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector Sqrt () const$/;"	f	class:dgVector
State	src/State.h	/^} State;$/;"	t	typeref:struct:__anon51
Store	libs/Newton/include/dgVector.h	/^	DG_INLINE void Store (dgFloat32* const dst) const$/;"	f	class:dgVector
SupportVertex	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgVector dgCollisionInstance::SupportVertex(const dgVector& dir, dgInt32* const vertexIndex) const$/;"	f	class:dgCollisionInstance
SwapColumns	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::SwapColumns (dgInt32 i, dgInt32 j)$/;"	f	class:dgGeneralMatrix
SwapInfo	libs/Newton/include/dgTree.h	/^void dgTree<OBJECT, KEY>::SwapInfo (dgTree<OBJECT, KEY>& tree)$/;"	f	class:dgTree
SwapRows	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::SwapRows (dgInt32 i, dgInt32 j)$/;"	f	class:dgGeneralMatrix
TARGET	Makefile	/^TARGET	=	main$/;"	m
TIMESTEP_H	src/Timestep.h	2;"	d
TPLS	Makefile	/^TPLS	=	Newton$/;"	m
TRACE_FUNCTION	libs/Newton/include/dgDebug.h	50;"	d
TRACE_FUNCTION	libs/Newton/include/dgDebug.h	52;"	d
TRUE	src/common.h	22;"	d
TestOrthogonal	libs/Newton/include/dgMatrix.h	/^DG_INLINE bool dgMatrix::TestOrthogonal() const$/;"	f	class:dgMatrix
TestPSD	libs/Newton/include/dgGeneralMatrix.h	/^bool dgGeneralMatrix<T>::TestPSD () const$/;"	f	class:dgGeneralMatrix
TestSymetric3x3	libs/Newton/include/dgMatrix.h	/^DG_INLINE bool dgMatrix::TestSymetric3x3() const$/;"	f	class:dgMatrix
TestSymetry	libs/Newton/include/dgGeneralMatrix.h	/^bool dgGeneralMatrix<T>::TestSymetry () const$/;"	f	class:dgGeneralMatrix
TestZero	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector TestZero() const$/;"	f	class:dgVector
Texture	src/Material.h	/^} Texture;$/;"	t	typeref:struct:__anon45
The API	doc/ShaderAPI.tex	/^    \\abstract{This document defines the rules by which shaders should be used in IsoEngine.}$/;"	s
ThreadKeyAssoc	libs/Newton/include/implement.h	/^struct ThreadKeyAssoc$/;"	s
ThreadKeyAssoc	libs/Newton/include/implement.h	/^typedef struct ThreadKeyAssoc ThreadKeyAssoc;$/;"	t	typeref:struct:ThreadKeyAssoc
ThreadParms	libs/Newton/include/implement.h	/^struct ThreadParms$/;"	s
ThreadParms	libs/Newton/include/implement.h	/^typedef struct ThreadParms ThreadParms;$/;"	t	typeref:struct:ThreadParms
ToFloat4	libs/Newton/include/dgAmpInstance.h	/^inline float_4 dgAmpInstance::ToFloat4 (const dgVector& v)$/;"	f	class:dgAmpInstance
TotalCost	libs/Newton/include/dgBroadPhase.h	/^		dgFloat64 TotalCost() const$/;"	f	class:dgBroadPhase::dgFitnessList
Trace	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::Trace () const$/;"	f	class:dgGeneralMatrix
Trace	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::Trace () const$/;"	f	class:dgGeneralVector
Trace	libs/Newton/include/dgGoogol.h	/^	void Trace () const$/;"	f	class:dgHugeVector
Trace	libs/Newton/include/dgVector.h	/^	void Trace () const$/;"	f	class:dgTemplateVector
TraceFuntionName	libs/Newton/include/dgDebug.h	/^	inline void TraceFuntionName (const char *name)$/;"	f
TransformPlane	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgPlane dgMatrix::TransformPlane (const dgPlane &localPlane) const$/;"	f	class:dgMatrix
TransformVector	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgVector dgMatrix::TransformVector (const dgVector &v) const$/;"	f	class:dgMatrix
Transpose	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix dgMatrix::Transpose () const$/;"	f	class:dgMatrix
Transpose4X4	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix dgMatrix::Transpose4X4 () const$/;"	f	class:dgMatrix
Transpose4x4	libs/Newton/include/dgVector.h	/^	DG_INLINE static void Transpose4x4 (dgVector& dst0, dgVector& dst1, dgVector& dst2, dgVector& dst3, $/;"	f	class:dgVector
ULONG_PTR	libs/Newton/include/pthread.h	/^typedef unsigned long ULONG_PTR;$/;"	t
UTIL_H	src/Util.h	2;"	d
UniVarFuncs	src/LookupManager.c	/^UniformSetter UniVarFuncs[] = {$/;"	v
UniformSetter	src/Shader.h	/^typedef void (*UniformSetter)(GLint, Camera *, State *, double);$/;"	t
Unkill	libs/Newton/include/dgRef.h	/^inline void dgRef::Unkill() $/;"	f	class:dgRef
Unlink	libs/Newton/include/dgList.h	/^		void Unlink ()$/;"	f	class:dgList::dgListNode
Unlink	libs/Newton/include/dgList.h	/^void dgList<T>::Unlink (dgListNode* const node)$/;"	f	class:dgList
Unlink	libs/Newton/include/dgTree.h	/^void dgTree<OBJECT, KEY>::Unlink (typename dgTree<OBJECT, KEY>::dgTreeNode* const node)$/;"	f	class:dgTree
Unlock	libs/Newton/include/dgThread.h	/^DG_INLINE void dgThread::dgCriticalSection::Unlock()$/;"	f	class:dgThread::dgCriticalSection
UnrotateVector	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgVector dgMatrix::UnrotateVector (const dgVector &v) const$/;"	f	class:dgMatrix
UntransformPlane	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgPlane dgMatrix::UntransformPlane (const dgPlane &globalPlane) const$/;"	f	class:dgMatrix
UntransformVector	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgVector dgMatrix::UntransformVector (const dgVector &v) const$/;"	f	class:dgMatrix
VAO	src/Mesh.h	10;"	d
VBO	src/Mesh.h	15;"	d
Value	libs/Newton/include/dgHeap.h	/^KEY dgHeapBase<OBJECT,KEY>::Value(dgInt32 i) const$/;"	f	class:dgHeapBase
VaoFunc	src/Mesh.h	/^typedef void ( *VaoFunc )( GLfloat size, GLfloat texres, Mesh *mesh );$/;"	t
VaoFuncs	src/LookupManager.c	/^VaoFunc VaoFuncs[] = {$/;"	v
VectorTimeMatrix	libs/Newton/include/dgGeneralMatrix.h	/^void dgGeneralMatrix<T>::VectorTimeMatrix (const dgGeneralVector<T> &v, dgGeneralVector<T> &out)$/;"	f	class:dgGeneralMatrix
WALL	Makefile	/^WALL 	= 	-Wall$/;"	m
WATCH_LOG_NAME	src/Util.h	12;"	d
WIN32_LEAN_AND_MEAN	libs/Newton/include/NewtonStdAfx.h	27;"	d
WIN32_LEAN_AND_MEAN	libs/Newton/include/dgPhysicsStdafx.h	32;"	d
WRITE_TRIANGLE	src/Mesh.c	281;"	d	file:
_CRTAPI1	libs/Newton/include/need_errno.h	56;"	d
_CRTAPI1	libs/Newton/include/need_errno.h	58;"	d
_CRTIMP	libs/Newton/include/need_errno.h	39;"	d
_CRTIMP	libs/Newton/include/need_errno.h	41;"	d
_CRT_SECURE_NO_WARNINGS	src/stb_image.h	194;"	d
_DGCOLLISIONSCENE_H_	libs/Newton/include/dgCollisionScene.h	24;"	d
_DGCOLLISION_CYLINDER_H__	libs/Newton/include/dgCollisionCylinder.h	23;"	d
_DG_AMP_ALLOCATOR_H_	libs/Newton/include/dgAmpAllocator.h	23;"	d
_DG_AMP_H_	libs/Newton/include/dgAMP.h	23;"	d
_DG_AMP_INSTANCE_H_	libs/Newton/include/dgAmpInstance.h	23;"	d
_DG_BODY_H_	libs/Newton/include/dgBody.h	23;"	d
_DG_BOX_H_	libs/Newton/include/dgCollisionBox.h	23;"	d
_DG_COLLISION_CAPSULE_H_	libs/Newton/include/dgCollisionCapsule.h	23;"	d
_DG_COLLISION_CONVEX_POLYGON_H_	libs/Newton/include/dgCollisionConvexPolygon.h	23;"	d
_DG_COLLISION_H_	libs/Newton/include/dgCollision.h	23;"	d
_DG_COLLISION_INSTANCE_H_	libs/Newton/include/dgCollisionInstance.h	23;"	d
_DG_COLLISION_SPHERE_H__	libs/Newton/include/dgCollisionSphere.h	23;"	d
_DG_COLLISION_TAPERED_CAPSULE_H_	libs/Newton/include/dgCollisionTaperedCapsule.h	23;"	d
_DG_COLLISION_TAPERED_CYLINDER_H__	libs/Newton/include/dgCollisionTaperedCylinder.h	23;"	d
_DG_CONVEX_COLLISION_H__	libs/Newton/include/dgCollisionConvex.h	23;"	d
_DG_DEFORMABLE_BODY_H_	libs/Newton/include/dgDeformableBody.h	23;"	d
_DG_DEFORMABLE_BODY_UPDATE_H_	libs/Newton/include/dgDeformableBodiesUpdate.h	23;"	d
_DG_DYNAMIC_BODY_H_	libs/Newton/include/dgDynamicBody.h	23;"	d
_DG_KINEMATIC_BODY_H_	libs/Newton/include/dgKinematicBody.h	23;"	d
_DG_PHYSICS_STDAFX_H__	libs/Newton/include/dgPhysicsStdafx.h	28;"	d
_DG_SKELETON_CONTAINER_H__	libs/Newton/include/dgSkeletonContainer.h	23;"	d
_DG_TYPES_H_	libs/Newton/include/dgStdafx.h	23;"	d
_DG_WORLD_DYNAMICS_H_	libs/Newton/include/dgWorldDynamicUpdate.h	23;"	d
_DG_WORLD_H_	libs/Newton/include/dgWorld.h	23;"	d
_IMPLEMENT_H	libs/Newton/include/implement.h	39;"	d
_IMPLEMENT_USING_INTEGER_ARITHMETIC_	libs/Newton/include/dgGoogol.h	31;"	d
_INC_ERRNO	libs/Newton/include/need_errno.h	21;"	d
_NEWTON_AMP	libs/Newton/include/dgTypes.h	188;"	d
_POSIX_BARRIERS	libs/Newton/include/pthread.h	443;"	d
_POSIX_BARRIERS	libs/Newton/include/pthread.h	444;"	d
_POSIX_C_SOURCE	src/Timestep.c	7;"	d	file:
_POSIX_READER_WRITER_LOCKS	libs/Newton/include/pthread.h	437;"	d
_POSIX_READER_WRITER_LOCKS	libs/Newton/include/pthread.h	438;"	d
_POSIX_SEMAPHORES	libs/Newton/include/semaphore.h	118;"	d
_POSIX_SEM_NSEMS_MAX	libs/Newton/include/pthread.h	526;"	d
_POSIX_SEM_NSEMS_MAX	libs/Newton/include/pthread.h	527;"	d
_POSIX_SEM_VALUE_MAX	libs/Newton/include/pthread.h	533;"	d
_POSIX_SEM_VALUE_MAX	libs/Newton/include/pthread.h	534;"	d
_POSIX_SPIN_LOCKS	libs/Newton/include/pthread.h	440;"	d
_POSIX_SPIN_LOCKS	libs/Newton/include/pthread.h	441;"	d
_POSIX_THREADS	libs/Newton/include/pthread.h	434;"	d
_POSIX_THREADS	libs/Newton/include/pthread.h	435;"	d
_POSIX_THREAD_ATTR_STACKADDR	libs/Newton/include/pthread.h	455;"	d
_POSIX_THREAD_ATTR_STACKADDR	libs/Newton/include/pthread.h	456;"	d
_POSIX_THREAD_ATTR_STACKSIZE	libs/Newton/include/pthread.h	449;"	d
_POSIX_THREAD_ATTR_STACKSIZE	libs/Newton/include/pthread.h	450;"	d
_POSIX_THREAD_DESTRUCTOR_ITERATIONS	libs/Newton/include/pthread.h	504;"	d
_POSIX_THREAD_DESTRUCTOR_ITERATIONS	libs/Newton/include/pthread.h	505;"	d
_POSIX_THREAD_KEYS_MAX	libs/Newton/include/pthread.h	510;"	d
_POSIX_THREAD_KEYS_MAX	libs/Newton/include/pthread.h	511;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	libs/Newton/include/pthread.h	465;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	libs/Newton/include/pthread.h	466;"	d
_POSIX_THREAD_PRIO_INHERIT	libs/Newton/include/pthread.h	458;"	d
_POSIX_THREAD_PRIO_INHERIT	libs/Newton/include/pthread.h	459;"	d
_POSIX_THREAD_PRIO_PROTECT	libs/Newton/include/pthread.h	461;"	d
_POSIX_THREAD_PRIO_PROTECT	libs/Newton/include/pthread.h	462;"	d
_POSIX_THREAD_PROCESS_SHARED	libs/Newton/include/pthread.h	468;"	d
_POSIX_THREAD_PROCESS_SHARED	libs/Newton/include/pthread.h	469;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	libs/Newton/include/pthread.h	446;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	libs/Newton/include/pthread.h	447;"	d
_POSIX_THREAD_THREADS_MAX	libs/Newton/include/pthread.h	519;"	d
_POSIX_THREAD_THREADS_MAX	libs/Newton/include/pthread.h	520;"	d
_PTHREAD_TEST_H_	libs/Newton/include/test.h	39;"	d
_SCHED_H	libs/Newton/include/sched.h	40;"	d
_TIMESPEC_DEFINED	libs/Newton/include/pthread.h	319;"	d
_WIN32_WINNT	libs/Newton/include/implement.h	42;"	d
_WIN_32_VER	libs/Newton/include/dgTypes.h	32;"	d
_WIN_64_VER	libs/Newton/include/dgTypes.h	28;"	d
__AFX_BROADPHASE_DEFAULT_H_	libs/Newton/include/dgBroadPhaseDefault.h	23;"	d
__AFX_BROADPHASE_PERSINTENT_H_	libs/Newton/include/dgBroadPhasePersistent.h	23;"	d
__CLEANUP_C	libs/Newton/include/pthread.h	74;"	d
__DGBILATERALCONSTRAINT_H__	libs/Newton/include/dgBilateralConstraint.h	23;"	d
__DGBODYMASTER_LIST__	libs/Newton/include/dgBodyMasterList.h	23;"	d
__DGCOLLISIONCOMPOUND_H__	libs/Newton/include/dgCollisionCompound.h	23;"	d
__DGCOLLISION_BVH__	libs/Newton/include/dgCollisionBVH.h	23;"	d
__DGCOLLISION_DEFORMABLE_CLOTH_PATCH_MESH_H__	libs/Newton/include/dgCollisionDeformableClothPatch.h	24;"	d
__DGCOLLISION_DEFORMABLE_MESH_H__	libs/Newton/include/dgCollisionDeformableMesh.h	24;"	d
__DGCOLLISION_DEFORMABLE_SOLID_MESH_H__	libs/Newton/include/dgCollisionDeformableSolidMesh.h	24;"	d
__DGCOLLISION_HEIGHT_FIELD__	libs/Newton/include/dgCollisionHeightField.h	23;"	d
__DGCOLLISION_MESH_H__	libs/Newton/include/dgCollisionMesh.h	23;"	d
__DGCOLLISION_USERMESH__	libs/Newton/include/dgCollisionUserMesh.h	23;"	d
__DGCONSTRAINT_H__	libs/Newton/include/dgConstraint.h	23;"	d
__DGCONTACT_H__	libs/Newton/include/dgContact.h	23;"	d
__DGPHYSICS_H__	libs/Newton/include/dgPhysics.h	23;"	d
__DGREF_COUNTER__	libs/Newton/include/dgRefCounter.h	23;"	d
__DGTYPES_H__	libs/Newton/include/dgTypes.h	23;"	d
__DGUPVECTORCONSTRAINT_563GFT35684GT_H	libs/Newton/include/dgUpVectorConstraint.h	23;"	d
__DG_AABB_POLYGON_SOUP_H_	libs/Newton/include/dgAABBPolygonSoup.h	23;"	d
__DG_ASYNC_THREAD_H__	libs/Newton/include/dgAsyncThread.h	23;"	d
__DG_BROADPHASE_AGGREGATE_H__	libs/Newton/include/dgBroadPhaseAggregate.h	23;"	d
__DG_BROADPHASE_H_	libs/Newton/include/dgBroadPhase.h	23;"	d
__DG_CONVEXHULL_3D__	libs/Newton/include/dgConvexHull3d.h	23;"	d
__DG_CONVEXHULL_4D__	libs/Newton/include/dgConvexHull4d.h	23;"	d
__DG_DEALUNAY_TETRAHEDRALIZAION_4D__	libs/Newton/include/dgDelaunayTetrahedralization.h	23;"	d
__DG_DEFORMABLE_CONTACT_H_	libs/Newton/include/dgDeformableContact.h	23;"	d
__DG_MUTEX_THREAD_H__	libs/Newton/include/dgMutexThread.h	23;"	d
__DG_THREAD_API_H__	libs/Newton/include/dgThread.h	23;"	d
__DG_THREAD_HIVE_H__	libs/Newton/include/dgThreadHive.h	24;"	d
__DG_THREAD_PROFILER_H__	libs/Newton/include/dgThreadProfiler.h	23;"	d
__NEWTON_H__	libs/Newton/include/Newton.h	23;"	d
__NEWTON_STDAFX_H__	libs/Newton/include/NewtonStdAfx.h	23;"	d
__NewotnClass_H__	libs/Newton/include/NewtonClass.h	23;"	d
__cdecl	libs/Newton/include/need_errno.h	49;"	d
__dgArray__	libs/Newton/include/dgArray.h	28;"	d
__dgCRC__	libs/Newton/include/dgCRC.h	23;"	d
__dgDebug__	libs/Newton/include/dgDebug.h	23;"	d
__dgFastQueue__	libs/Newton/include/dgFastQueue.h	28;"	d
__dgGeneralMatrix__	libs/Newton/include/dgGeneralMatrix.h	23;"	d
__dgGeneralVector__	libs/Newton/include/dgGeneralVector.h	23;"	d
__dgGoogol__	libs/Newton/include/dgGoogol.h	23;"	d
__dgGraph__	libs/Newton/include/dgGraph.h	28;"	d
__dgHeapBase__	libs/Newton/include/dgHeap.h	28;"	d
__dgIntersections__	libs/Newton/include/dgIntersections.h	23;"	d
__dgList__	libs/Newton/include/dgList.h	23;"	d
__dgMatrix__	libs/Newton/include/dgMatrix.h	23;"	d
__dgMemory__	libs/Newton/include/dgMemory.h	23;"	d
__dgMeshEffect_H__	libs/Newton/include/dgMeshEffect.h	23;"	d
__dgNode__	libs/Newton/include/dgNode.h	23;"	d
__dgOOBB_H__	libs/Newton/include/dgObb.h	23;"	d
__dgPathFinder__	libs/Newton/include/dgPathFinder.h	23;"	d
__dgPlane__	libs/Newton/include/dgPlane.h	23;"	d
__dgPolygonSoupDatabaseBuilder0x23413452233__	libs/Newton/include/dgPolygonSoupBuilder.h	28;"	d
__dgPolygonSoupDatabase_H_	libs/Newton/include/dgPolygonSoupDatabase.h	28;"	d
__dgPolyhedraMassProperties__	libs/Newton/include/dgPolyhedraMassProperties.h	23;"	d
__dgPolyhedra__	libs/Newton/include/dgPolyhedra.h	23;"	d
__dgQuaternion__	libs/Newton/include/dgQuaternion.h	23;"	d
__dgRandom__	libs/Newton/include/dgRandom.h	23;"	d
__dgRef__	libs/Newton/include/dgRef.h	23;"	d
__dgRtti__	libs/Newton/include/dgRtti.h	23;"	d
__dgSMALLDETERMINANT__	libs/Newton/include/dgSmallDeterminant.h	23;"	d
__dgSPDMatrix__	libs/Newton/include/dgSPDMatrix.h	23;"	d
__dgStack__	libs/Newton/include/dgStack.h	23;"	d
__dgTree__	libs/Newton/include/dgTree.h	23;"	d
__dgVector__	libs/Newton/include/dgVector.h	23;"	d
__except	libs/Newton/include/pthread.h	1297;"	d
_beginthreadex	libs/Newton/include/implement.h	925;"	d
_dgCollisionNull_H__	libs/Newton/include/dgCollisionNull.h	23;"	d
_endthreadex	libs/Newton/include/implement.h	938;"	d
_ftime	libs/Newton/include/pthread.h	1264;"	d
_pad	src/Camera.h	/^    uint8 _pad[2];$/;"	m	struct:__anon52
_pad	src/Material.h	/^    uint8 _pad[4];$/;"	m	struct:__anon46
_pad	src/Mesh.h	/^    uint8 _pad[4];$/;"	m	struct:__anon44
_pad	src/Shader.h	/^    uint8 _pad[4];$/;"	m	struct:__anon42
_printBuffer	src/MatrixMath.c	/^void _printBuffer( const float* buff, const char* name, int n, int rows, int cols ) {$/;"	f
_stricmp	libs/Newton/include/dgTypes.h	670;"	d
_timeb	libs/Newton/include/pthread.h	1265;"	d
accel	src/State.h	/^    float accel;$/;"	m	struct:__anon51
addShader	src/Shader.c	/^void addShader(const char *srcFile, GLenum type, GLuint prog, Cache *shaderCache) {$/;"	f
align	libs/Newton/include/implement.h	/^  size_t align;			\/* Force alignment if this struct is packed *\/$/;"	m	struct:ptw32_thread_t_
alloc	src/Util.h	139;"	d
allocate	libs/Newton/include/dgAmpAllocator.h	/^	pointer allocate(size_type n, const void *hint=0)$/;"	f	class:dgAmpAllocator
angleVelocity	src/State.h	/^    float angleVelocity[3];$/;"	m	struct:__anon51
angles	src/State.h	/^    float angles[3];$/;"	m	struct:__anon51
applyForceAndTorque	src/State.c	/^void applyForceAndTorque( const NewtonBody* body, float ts, int tid ) {$/;"	f
applyTorque	src/State.c	/^void applyTorque( State *state ) {$/;"	f
arg	libs/Newton/include/implement.h	/^  void *arg;$/;"	m	struct:ThreadParms
arg	libs/Newton/include/pthread.h	/^  void *arg;$/;"	m	struct:ptw32_cleanup_t
aspectRatio	src/Camera.h	/^    float aspectRatio;$/;"	m	struct:__anon52
assert	libs/Newton/include/test.h	131;"	d
assert	libs/Newton/include/test.h	141;"	d
assertE	libs/Newton/include/test.h	/^int assertE;$/;"	v
assert_e	libs/Newton/include/test.h	151;"	d
baseForwardVec	src/Camera.c	/^static float baseForwardVec[] = {0.0f, 0.0f, -1.0f};$/;"	v	file:
baseRightVec	src/Camera.c	/^static float baseRightVec[] = {1.0f, 0.0f, 0.0f};$/;"	v	file:
baseUpVec	src/Camera.c	/^static float baseUpVec[] = {0.0f, 1.0f, 0.0f};$/;"	v	file:
bgindex	staticbin/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon41	file:
bool	libs/Newton/include/Newton.h	/^    typedef _Bool bool;$/;"	t
break_guard	src/Util.h	44;"	d
bufferFile	src/Shader.c	/^char *bufferFile(const char *path) {$/;"	f
buffer_start	staticbin/stb_image.c	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon28	file:
buflen	staticbin/stb_image.c	/^   int buflen;$/;"	m	struct:__anon28	file:
calcOrientation	src/State.c	/^void calcOrientation( quat target, State *state, float alpha) {$/;"	f
calcPosition	src/State.c	/^void calcPosition( vec3 target, State *state, float alpha) {$/;"	f
calloc	libs/Newton/include/implement.h	671;"	d
camPos	src/Shader.c	/^void camPos(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
cancelEvent	libs/Newton/include/implement.h	/^  HANDLE cancelEvent;$/;"	m	struct:ptw32_thread_t_
cancelState	libs/Newton/include/implement.h	/^  int cancelState;$/;"	m	struct:ptw32_thread_t_
cancelType	libs/Newton/include/implement.h	/^  int cancelType;$/;"	m	struct:ptw32_thread_t_
catch	libs/Newton/include/pthread.h	1342;"	d
channel	staticbin/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon39	file:
check_syserr	src/Util.h	52;"	d
child	libs/Newton/include/dgNode.h	/^	dgBaseNode* child;$/;"	m	class:dgBaseNode
cleanUpRout	libs/Newton/include/pthread.h	/^      ptw32_cleanup_callback_t cleanUpRout;$/;"	m	class:PThreadCleanup
clearTable	src/LuaScript.h	84;"	d
clear_logs	src/Util.h	100;"	d
clock_gettime	libs/Newton/include/dgTypes.h	/^DG_INLINE int clock_gettime(int \/*clk_id*\/, struct timespec* t) {$/;"	f
cndSharedAccessCompleted	libs/Newton/include/implement.h	/^  pthread_cond_t cndSharedAccessCompleted;$/;"	m	struct:pthread_rwlock_t_
code	staticbin/stb_image.c	/^   stbi__uint16 code[256];$/;"	m	struct:__anon30	file:
code_bits	staticbin/stb_image.c	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon31	file:
code_buffer	staticbin/stb_image.c	/^   stbi__uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon31	file:
code_buffer	staticbin/stb_image.c	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon35	file:
codes	staticbin/stb_image.c	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon41	file:
color_table	staticbin/stb_image.c	/^   stbi_uc *color_table;$/;"	m	struct:__anon41	file:
compileShader	src/Shader.c	/^GLuint compileShader(const char *srcFile, GLuint shaderId) {$/;"	f
config	src/Engine.c	/^void config( Engine *renderer ) {$/;"	f
const_pointer	libs/Newton/include/dgAmpAllocator.h	/^	typedef const T* const_pointer;$/;"	t	class:dgAmpAllocator
contentionscope	libs/Newton/include/implement.h	/^  int contentionscope;$/;"	m	struct:pthread_attr_t_
context	src/Engine.h	/^    Context *context;$/;"	m	struct:__anon43
contextErrorCB	src/Context.c	/^void contextErrorCB(int code, const char *msg) {$/;"	f
count	src/Mesh.h	/^    GLsizei count;$/;"	m	struct:__anon44
cpus	libs/Newton/include/implement.h	/^    int cpus;			\/* No. of cpus if multi cpus, or   *\/$/;"	m	union:pthread_spinlock_t_::__anon25
cpyBuf	src/MatrixMath.h	17;"	d
cs	libs/Newton/include/benchtest.h	/^  CRITICAL_SECTION cs;$/;"	m	struct:old_mutex_t_
cubeInVAO	src/Mesh.c	/^void cubeInVAO( GLfloat size, GLfloat texres, Mesh *mesh ) {$/;"	f
cubeOutVAO	src/Mesh.c	/^void cubeOutVAO( GLfloat size, GLfloat texres, Mesh *mesh ) {$/;"	f
cubeTexture	src/Material.c	/^Texture *cubeTexture(const char **cubeFaces, uint8 allSame, uint8 genMipMaps) {$/;"	f
cur_x	staticbin/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:__anon41	file:
cur_y	staticbin/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:__anon41	file:
current	src/Timestep.c	/^static double start, current, elapsed;$/;"	v	file:
cursorCB	src/InputManager.c	/^void cursorCB(GLFWwindow *win, double xpos, double ypos) {$/;"	f
cursorEnterCB	src/InputManager.c	/^void cursorEnterCB(GLFWwindow *win, int enter) {$/;"	f
dFloat	libs/Newton/include/Newton.h	65;"	d
dFloat	libs/Newton/include/Newton.h	67;"	d
dFloat64	libs/Newton/include/Newton.h	72;"	d
dLong	libs/Newton/include/Newton.h	60;"	d
data	staticbin/stb_image.c	/^      stbi_uc *data;$/;"	m	struct:__anon31::__anon32	file:
dc_pred	staticbin/stb_image.c	/^      int dc_pred;$/;"	m	struct:__anon31::__anon32	file:
deallocate	libs/Newton/include/dgAmpAllocator.h	/^	void deallocate(pointer p, size_type n)$/;"	f	class:dgAmpAllocator
debug	src/Util.h	23;"	d
debug	src/Util.h	25;"	d
debugCB	src/Context.c	/^void debugCB(GLenum source, GLenum type, GLuint id, GLenum severity,$/;"	f
decode_jpeg_header	staticbin/stb_image.c	/^static int decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	file:
decode_jpeg_image	staticbin/stb_image.c	/^static int decode_jpeg_image(stbi__jpeg *j)$/;"	f	file:
defaultFov	src/Camera.c	/^float defaultFov;$/;"	v
delta	staticbin/stb_image.c	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon30	file:
dequant	staticbin/stb_image.c	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon31	file:
dequant2	staticbin/stb_image.c	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon31	file:
destructor	libs/Newton/include/implement.h	/^  void (PTW32_CDECL *destructor) (void *);$/;"	m	struct:pthread_key_t_
detachState	libs/Newton/include/implement.h	/^  int detachState;$/;"	m	struct:ptw32_thread_t_
detachstate	libs/Newton/include/implement.h	/^  int detachstate;$/;"	m	struct:pthread_attr_t_
dgAABBIntersectCallback	libs/Newton/include/dgIntersections.h	/^typedef dgIntersectStatus (*dgAABBIntersectCallback) (void* const context, $/;"	t
dgAABBPolygonSoup	libs/Newton/include/dgAABBPolygonSoup.h	/^class dgAABBPolygonSoup: public dgPolygonSoupDatabase$/;"	c
dgAbsf	libs/Newton/include/dgTypes.h	/^DG_INLINE dgFloat32 dgAbsf(dgFloat32 x)$/;"	f
dgAcceleratorDescription	libs/Newton/include/dgAmpInstance.h	/^	class dgAcceleratorDescription$/;"	c	class:dgAmpInstance
dgAcos	libs/Newton/include/dgTypes.h	742;"	d
dgActiveContacts	libs/Newton/include/dgContact.h	/^	dgActiveContacts (dgMemoryAllocator* const allocator)$/;"	f	class:dgActiveContacts
dgActiveContacts	libs/Newton/include/dgContact.h	/^class dgActiveContacts: public dgList<dgContact*>$/;"	c
dgAddRtti	libs/Newton/include/dgRtti.h	56;"	d
dgAdressDistPair	libs/Newton/include/dgWorld.h	/^	class dgAdressDistPair$/;"	c	class:dgWorld
dgAmpAllocator	libs/Newton/include/dgAmpAllocator.h	/^	dgAmpAllocator() throw()$/;"	f	class:dgAmpAllocator
dgAmpAllocator	libs/Newton/include/dgAmpAllocator.h	/^	dgAmpAllocator(const dgAmpAllocator &a) throw()$/;"	f	class:dgAmpAllocator
dgAmpAllocator	libs/Newton/include/dgAmpAllocator.h	/^	dgAmpAllocator(const dgAmpAllocator<U> &a) throw()$/;"	f	class:dgAmpAllocator
dgAmpAllocator	libs/Newton/include/dgAmpAllocator.h	/^	dgAmpAllocator(dgMemoryAllocator* const allocator) throw()$/;"	f	class:dgAmpAllocator
dgAmpAllocator	libs/Newton/include/dgAmpAllocator.h	/^class dgAmpAllocator: public std::allocator<T>$/;"	c
dgAmpBodyData	libs/Newton/include/dgAmpInstance.h	/^class dgAmpBodyData$/;"	c
dgAmpConstraintData	libs/Newton/include/dgAmpInstance.h	/^class dgAmpConstraintData$/;"	c
dgAmpInstance	libs/Newton/include/dgAmpInstance.h	/^class dgAmpInstance: public dgAmpBodyData, public dgAmpConstraintData$/;"	c
dgAmpJacobian	libs/Newton/include/dgAmpInstance.h	/^class dgAmpJacobian$/;"	c
dgAmpJacobianMatrixElement	libs/Newton/include/dgAmpInstance.h	/^	class dgAmpJacobianMatrixElement$/;"	c	class:dgAmpConstraintData
dgAmpJacobianPair	libs/Newton/include/dgAmpInstance.h	/^class dgAmpJacobianPair$/;"	c
dgAmpMatrix4x4	libs/Newton/include/dgAmpInstance.h	/^	dgAmpMatrix4x4()$/;"	f	class:dgAmpMatrix4x4
dgAmpMatrix4x4	libs/Newton/include/dgAmpInstance.h	/^class dgAmpMatrix4x4 $/;"	c
dgAmpMatrixRightSide	libs/Newton/include/dgAmpInstance.h	/^class dgAmpMatrixRightSide$/;"	c
dgApi	libs/Newton/include/dgTypes.h	261;"	d
dgApi	libs/Newton/include/dgTypes.h	264;"	d
dgAreEqual	libs/Newton/include/dgTypes.h	/^DG_INLINE bool dgAreEqual(T A, T B, T tol)$/;"	f
dgArray	libs/Newton/include/dgArray.h	/^class dgArray$/;"	c
dgArray	libs/Newton/include/dgArray.h	/^dgArray<T>::dgArray (dgInt32 granulatitySize, dgMemoryAllocator* const allocator, dgInt32 aligmentInBytes)$/;"	f	class:dgArray
dgAsin	libs/Newton/include/dgTypes.h	741;"	d
dgAssert	libs/Newton/include/dgTypes.h	151;"	d
dgAssert	libs/Newton/include/dgTypes.h	154;"	d
dgAssert	libs/Newton/include/dgTypes.h	157;"	d
dgAssert	libs/Newton/include/dgTypes.h	159;"	d
dgAsyncThread	libs/Newton/include/dgAsyncThread.h	/^class dgAsyncThread: public dgThread$/;"	c
dgAtan2	libs/Newton/include/dgTypes.h	743;"	d
dgAtomicExchangeAndAdd	libs/Newton/include/dgTypes.h	/^DG_INLINE dgInt32 dgAtomicExchangeAndAdd (dgInt32* const addend, dgInt32 amount)$/;"	f
dgBVHRay	libs/Newton/include/dgCollisionBVH.h	/^		dgBVHRay(const dgVector& l0, const dgVector& l1)$/;"	f	struct:dgCollisionBVH::dgBVHRay
dgBVHRay	libs/Newton/include/dgCollisionBVH.h	/^	struct dgBVHRay: public dgFastRayTest $/;"	s	class:dgCollisionBVH
dgBallConstraint	libs/Newton/include/dgBallConstraint.h	/^class dgBallConstraint: public dgBilateralConstraint  $/;"	c
dgBallJointFriction	libs/Newton/include/dgBallConstraint.h	/^typedef dgUnsigned32 (dgApi *dgBallJointFriction) (const dgBallConstraint& ball,dgFloat32 timestep);$/;"	t
dgBaseNode	libs/Newton/include/dgNode.h	/^class dgBaseNode: public dgRef$/;"	c
dgBaseNode	libs/Newton/include/dgNode.h	/^inline dgBaseNode::dgBaseNode ()$/;"	f	class:dgBaseNode
dgBaseNode	libs/Newton/include/dgNode.h	/^inline dgBaseNode::dgBaseNode (const char* const name)$/;"	f	class:dgBaseNode
dgBigPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgBigPlane::dgBigPlane () $/;"	f	class:dgBigPlane
dgBigPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgBigPlane::dgBigPlane (const dgBigVector &P0, const dgBigVector &P1, const dgBigVector &P2)$/;"	f	class:dgBigPlane
dgBigPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgBigPlane::dgBigPlane (const dgBigVector &normal, dgFloat64 distance) $/;"	f	class:dgBigPlane
dgBigPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgBigPlane::dgBigPlane (dgFloat64 x, dgFloat64 y, dgFloat64 z, dgFloat64 w)$/;"	f	class:dgBigPlane
dgBigPlane	libs/Newton/include/dgPlane.h	/^class dgBigPlane: public dgBigVector$/;"	c
dgBigVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgBigVector (const dgBigVector& copy)$/;"	f	class:dgBigVector
dgBigVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgBigVector (const dgFloat32* const ptr)$/;"	f	class:dgBigVector
dgBigVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgBigVector (const dgFloat64* const ptr)$/;"	f	class:dgBigVector
dgBigVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgBigVector (const dgTemplateVector<dgFloat64>& v)$/;"	f	class:dgBigVector
dgBigVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgBigVector (const dgVector& v)$/;"	f	class:dgBigVector
dgBigVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgBigVector (dgFloat64 x, dgFloat64 y, dgFloat64 z, dgFloat64 w) $/;"	f	class:dgBigVector
dgBigVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgBigVector()$/;"	f	class:dgBigVector
dgBigVector	libs/Newton/include/dgVector.h	/^class dgBigVector: public dgTemplateVector<dgFloat64>$/;"	c
dgBilateralBounds	libs/Newton/include/dgConstraint.h	/^class dgBilateralBounds$/;"	c
dgBilateralConstraint	libs/Newton/include/dgBilateralConstraint.h	/^class dgBilateralConstraint: public dgConstraint  $/;"	c
dgBinarySearch	libs/Newton/include/dgTypes.h	/^dgInt32 dgBinarySearch (T const* array, dgInt32 elements, const T& entry, dgInt32 (*compare) (const T* const  A, const T* const B, void* const context), void* const context = NULL)$/;"	f
dgBinarySearchIndirect	libs/Newton/include/dgTypes.h	/^dgInt32 dgBinarySearchIndirect(T** const array, dgInt32 elements, const T& entry, dgInt32(*compare) (const T* const  A, const T* const B, void* const context), void* const context = NULL)$/;"	f
dgBody	libs/Newton/include/dgBody.h	/^class dgBody  $/;"	c
dgBodyCollisionList	libs/Newton/include/dgWorld.h	/^	dgBodyCollisionList (dgMemoryAllocator* const allocator)$/;"	f	class:dgBodyCollisionList
dgBodyCollisionList	libs/Newton/include/dgWorld.h	/^class dgBodyCollisionList: public dgTree<const dgCollision*, dgUnsigned32>$/;"	c
dgBodyInfo	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgBodyInfo$/;"	c
dgBodyMasterList	libs/Newton/include/dgBodyMasterList.h	/^class dgBodyMasterList: public dgList<dgBodyMasterListRow>$/;"	c
dgBodyMasterListCell	libs/Newton/include/dgBodyMasterList.h	/^class dgBodyMasterListCell$/;"	c
dgBodyMasterListRow	libs/Newton/include/dgBodyMasterList.h	/^class dgBodyMasterListRow: public dgList<dgBodyMasterListCell>$/;"	c
dgBodyMaterialList	libs/Newton/include/dgWorld.h	/^	dgBodyMaterialList (dgMemoryAllocator* const allocator)$/;"	f	class:dgBodyMaterialList
dgBodyMaterialList	libs/Newton/include/dgWorld.h	/^class dgBodyMaterialList: public dgTree<dgContactMaterial, dgUnsigned32>$/;"	c
dgBoxData	libs/Newton/include/dgCollision.h	/^	struct dgBoxData$/;"	s	class:dgCollisionInfo
dgBoxDistanceToOrigin2	libs/Newton/include/dgIntersections.h	/^DG_INLINE dgFloat32 dgBoxDistanceToOrigin2 (const dgVector& minBox, const dgVector& maxBox)$/;"	f
dgBoxInclusionTest	libs/Newton/include/dgIntersections.h	/^DG_INLINE dgInt32 dgBoxInclusionTest (const dgVector& p0, const dgVector& p1, const dgVector& q0, const dgVector& q1)$/;"	f
dgBroadPhase	libs/Newton/include/dgBroadPhase.h	/^class dgBroadPhase$/;"	c
dgBroadPhaseAggregate	libs/Newton/include/dgBroadPhaseAggregate.h	/^class dgBroadPhaseAggregate: public dgBroadPhaseNode$/;"	c
dgBroadPhaseBodyNode	libs/Newton/include/dgBroadPhase.h	/^	dgBroadPhaseBodyNode(dgBody* const body)$/;"	f	class:dgBroadPhaseBodyNode
dgBroadPhaseBodyNode	libs/Newton/include/dgBroadPhase.h	/^class dgBroadPhaseBodyNode: public dgBroadPhaseNode$/;"	c
dgBroadPhaseDefault	libs/Newton/include/dgBroadPhaseDefault.h	/^class dgBroadPhaseDefault: public dgBroadPhase$/;"	c
dgBroadPhaseNode	libs/Newton/include/dgBroadPhase.h	/^	dgBroadPhaseNode(dgBroadPhaseNode* const parent)$/;"	f	class:dgBroadPhaseNode
dgBroadPhaseNode	libs/Newton/include/dgBroadPhase.h	/^class dgBroadPhaseNode$/;"	c
dgBroadPhasePersistent	libs/Newton/include/dgBroadPhasePersistent.h	/^class dgBroadPhasePersistent: public dgBroadPhase$/;"	c
dgBroadPhaseTreeNode	libs/Newton/include/dgBroadPhase.h	/^	dgBroadPhaseTreeNode()$/;"	f	class:dgBroadPhaseTreeNode
dgBroadPhaseTreeNode	libs/Newton/include/dgBroadPhase.h	/^	dgBroadPhaseTreeNode(dgBroadPhaseNode* const sibling, dgBroadPhaseNode* const myNode)$/;"	f	class:dgBroadPhaseTreeNode
dgBroadPhaseTreeNode	libs/Newton/include/dgBroadPhase.h	/^class dgBroadPhaseTreeNode: public dgBroadPhaseNode$/;"	c
dgBroadPhaseType	libs/Newton/include/dgWorld.h	/^	enum dgBroadPhaseType$/;"	g	class:dgWorld
dgBroadphaseSyncDescriptor	libs/Newton/include/dgBroadPhase.h	/^		dgBroadphaseSyncDescriptor(dgFloat32 timestep, dgWorld* const world)$/;"	f	class:dgBroadPhase::dgBroadphaseSyncDescriptor
dgBroadphaseSyncDescriptor	libs/Newton/include/dgBroadPhase.h	/^	class dgBroadphaseSyncDescriptor$/;"	c	class:dgBroadPhase
dgCapsuleData	libs/Newton/include/dgCollision.h	/^	struct dgCapsuleData$/;"	s	class:dgCollisionInfo
dgCeil	libs/Newton/include/dgTypes.h	/^DG_INLINE dgFloat32 dgCeil(dgFloat32 x)$/;"	f
dgChamferCylinderData	libs/Newton/include/dgCollision.h	/^	struct dgChamferCylinderData$/;"	s	class:dgCollisionInfo
dgCheckFloat	libs/Newton/include/dgTypes.h	271;"	d
dgCheckFloat	libs/Newton/include/dgTypes.h	274;"	d
dgCheckVector	libs/Newton/include/dgVector.h	32;"	d
dgClamp	libs/Newton/include/dgTypes.h	/^DG_INLINE T dgClamp(T val, T min, T max)$/;"	f
dgClearFP	libs/Newton/include/dgTypes.h	747;"	d
dgClippedFaceEdge	libs/Newton/include/dgCollisionConvexPolygon.h	/^	class dgClippedFaceEdge$/;"	c	class:dgCollisionConvexPolygon
dgClothPatchMaterial	libs/Newton/include/dgContact.h	/^class dgClothPatchMaterial$/;"	c
dgCollision	libs/Newton/include/dgCollision.h	/^class dgCollision$/;"	c
dgCollisionBVH	libs/Newton/include/dgCollisionBVH.h	/^class dgCollisionBVH: public dgCollisionMesh, public dgAABBPolygonSoup$/;"	c
dgCollisionBVHData	libs/Newton/include/dgCollision.h	/^	struct dgCollisionBVHData$/;"	s	class:dgCollisionInfo
dgCollisionBVHUserRayCastCallback	libs/Newton/include/dgCollisionBVH.h	/^typedef dgFloat32 (*dgCollisionBVHUserRayCastCallback) (const dgBody* const body, const dgCollisionBVH* const heightFieldCollision, dgFloat32 interception, dgFloat32* normal, dgInt32 faceId, void* usedData);$/;"	t
dgCollisionBVH_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionBVH_RTTI							= 1<<13,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionBox	libs/Newton/include/dgCollisionBox.h	/^class dgCollisionBox: public dgCollisionConvex$/;"	c
dgCollisionBox_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionBox_RTTI							= 1<<1,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionCapsule	libs/Newton/include/dgCollisionCapsule.h	/^class dgCollisionCapsule: public dgCollisionConvex  $/;"	c
dgCollisionCapsule_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionCapsule_RTTI						= 1<<4,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionChamferCylinder	libs/Newton/include/dgCollisionChamferCylinder.h	/^class dgCollisionChamferCylinder: public dgCollisionConvex  $/;"	c
dgCollisionChamferCylinder_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionChamferCylinder_RTTI 			= 1<<9,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionCompound	libs/Newton/include/dgCollisionCompound.h	/^class dgCollisionCompound: public dgCollision$/;"	c
dgCollisionCompoundBreakable_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionCompoundBreakable_RTTI			= 1<<21,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionCompoundFractured	libs/Newton/include/dgCollisionCompoundFractured.h	/^class dgCollisionCompoundFractured: public dgCollisionCompound$/;"	c
dgCollisionCompound_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionCompound_RTTI					= 1<<12,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionCone	libs/Newton/include/dgCollisionCone.h	/^class dgCollisionCone: public dgCollisionConvex  $/;"	c
dgCollisionCone_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionCone_RTTI						= 1<<2,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionConvex	libs/Newton/include/dgCollisionConvex.h	/^class dgCollisionConvex: public dgCollision$/;"	c
dgCollisionConvexHull	libs/Newton/include/dgCollisionConvexHull.h	/^class dgCollisionConvexHull: public dgCollisionConvex  $/;"	c
dgCollisionConvexHull_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionConvexHull_RTTI					= 1<<6,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionConvexPolygon	libs/Newton/include/dgCollisionConvexPolygon.h	/^class dgCollisionConvexPolygon: public dgCollisionConvex	$/;"	c
dgCollisionConvexPolygon_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionConvexPolygon_RTTI				= 1<<10,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionConvexShape_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionConvexShape_RTTI					= 1<<11,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionCylinder	libs/Newton/include/dgCollisionCylinder.h	/^class dgCollisionCylinder: public dgCollisionConvex  $/;"	c
dgCollisionCylinder_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionCylinder_RTTI					= 1<<5,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionDeformableClothPatch	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^class dgCollisionDeformableClothPatch: public dgCollisionDeformableMesh$/;"	c
dgCollisionDeformableClothPatch_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionDeformableClothPatch_RTTI		= 1<<17,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionDeformableMesh	libs/Newton/include/dgCollisionDeformableMesh.h	/^class dgCollisionDeformableMesh: public dgCollisionConvex$/;"	c
dgCollisionDeformableMesh_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionDeformableMesh_RTTI				= 1<<15,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionDeformableSolidMesh	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^class dgCollisionDeformableSolidMesh: public dgCollisionDeformableMesh$/;"	c
dgCollisionDeformableSolidMesh_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionDeformableSolidMesh_RTTI			= 1<<16,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionHeightField	libs/Newton/include/dgCollisionHeightField.h	/^class dgCollisionHeightField: public dgCollisionMesh$/;"	c
dgCollisionHeightFieldGridConstruction	libs/Newton/include/dgCollisionHeightField.h	/^	enum dgCollisionHeightFieldGridConstruction$/;"	g	class:dgCollisionHeightField
dgCollisionHeightFieldRayCastCallback	libs/Newton/include/dgCollisionHeightField.h	/^typedef dgFloat32 (*dgCollisionHeightFieldRayCastCallback) (const dgBody* const body, const dgCollisionHeightField* const heightFieldCollision, dgFloat32 interception, dgInt32 row, dgInt32 col, dgVector* const normal, int faceId, void* const usedData);$/;"	t
dgCollisionHeightField_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionHeightField_RTTI					= 1<<19,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionID	libs/Newton/include/dgCollision.h	/^enum dgCollisionID$/;"	g
dgCollisionInfo	libs/Newton/include/dgCollision.h	/^class dgCollisionInfo$/;"	c
dgCollisionInstance	libs/Newton/include/dgCollisionInstance.h	/^DG_INLINE dgCollisionInstance::dgCollisionInstance(const dgCollisionInstance& meshInstance, const dgCollision* const shape)$/;"	f	class:dgCollisionInstance
dgCollisionInstance	libs/Newton/include/dgCollisionInstance.h	/^class dgCollisionInstance$/;"	c
dgCollisionMesh	libs/Newton/include/dgCollisionMesh.h	/^class dgCollisionMesh: public dgCollision  $/;"	c
dgCollisionMeshCollisionCallback	libs/Newton/include/dgCollisionMesh.h	/^typedef void (*dgCollisionMeshCollisionCallback) (const dgBody* const bodyWithTreeCollision, const dgBody* const body, dgInt32 faceID, $/;"	t
dgCollisionMeshRayHitDesc	libs/Newton/include/dgCollisionMesh.h	/^	dgCollisionMeshRayHitDesc ()$/;"	f	class:dgCollisionMeshRayHitDesc
dgCollisionMeshRayHitDesc	libs/Newton/include/dgCollisionMesh.h	/^class dgCollisionMeshRayHitDesc$/;"	c
dgCollisionMesh_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionMesh_RTTI						= 1<<14,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionNull	libs/Newton/include/dgCollisionNull.h	/^class dgCollisionNull: public dgCollisionConvex$/;"	c
dgCollisionNull_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionNull_RTTI						= 1<<0,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionParamProxy	libs/Newton/include/dgContact.h	/^	dgCollisionParamProxy(dgContact* const contact, dgContactPoint* const contactBuffer, dgInt32 threadIndex, bool ccdMode, bool intersectionTestOnly)$/;"	f	class:dgCollisionParamProxy
dgCollisionParamProxy	libs/Newton/include/dgContact.h	/^class dgCollisionParamProxy$/;"	c
dgCollisionPoint	libs/Newton/include/dgCollisionSphere.h	/^	dgCollisionPoint (dgMemoryAllocator* const allocator) $/;"	f	class:dgCollisionPoint
dgCollisionPoint	libs/Newton/include/dgCollisionSphere.h	/^class dgCollisionPoint: public dgCollisionSphere$/;"	c
dgCollisionPriority	libs/Newton/include/dgCollisionConvex.h	/^		dgCollisionPriority()$/;"	f	class:dgCollisionConvex::dgCollisionPriority
dgCollisionPriority	libs/Newton/include/dgCollisionConvex.h	/^	class dgCollisionPriority$/;"	c	class:dgCollisionConvex
dgCollisionScene	libs/Newton/include/dgCollisionScene.h	/^class dgCollisionScene: public dgCollisionCompound  $/;"	c
dgCollisionScene_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionScene_RTTI						= 1<<20,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionSphere	libs/Newton/include/dgCollisionSphere.h	/^class dgCollisionSphere: public dgCollisionConvex$/;"	c
dgCollisionSphere_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionSphere_RTTI						= 1<<3,$/;"	e	enum:dgCollision::dgRTTI
dgCollisionTaperedCapsule	libs/Newton/include/dgCollisionTaperedCapsule.h	/^class dgCollisionTaperedCapsule: public dgCollisionConvex  $/;"	c
dgCollisionTaperedCapsule_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionTaperedCapsule_RTTI				= 1<<7,	$/;"	e	enum:dgCollision::dgRTTI
dgCollisionTaperedCylinder	libs/Newton/include/dgCollisionTaperedCylinder.h	/^class dgCollisionTaperedCylinder: public dgCollisionConvex  $/;"	c
dgCollisionTaperedCylinder_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionTaperedCylinder_RTTI 			= 1<<8,	$/;"	e	enum:dgCollision::dgRTTI
dgCollisionUserMesh	libs/Newton/include/dgCollisionUserMesh.h	/^class dgCollisionUserMesh: public dgCollisionMesh$/;"	c
dgCollisionUserMesh_RTTI	libs/Newton/include/dgCollision.h	/^		dgCollisionUserMesh_RTTI					= 1<<18,$/;"	e	enum:dgCollision::dgRTTI
dgCompareBox	libs/Newton/include/dgIntersections.h	/^DG_INLINE dgInt32 dgCompareBox (const dgVector& p0, const dgVector& p1, const dgVector& q0, const dgVector& q1)$/;"	f
dgConeData	libs/Newton/include/dgCollision.h	/^	struct dgConeData$/;"	s	class:dgCollisionInfo
dgConectivityGraph	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgConectivityGraph: public dgGraph<dgDebriNodeInfo, dgSharedNodeMesh>$/;"	c	class:dgCollisionCompoundFractured
dgConectivityGraphMap	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgConectivityGraphMap (const dgConectivityGraphMap& source)$/;"	f	class:dgCollisionCompoundFractured::dgConectivityGraphMap
dgConectivityGraphMap	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgConectivityGraphMap (dgMemoryAllocator* const allocator)$/;"	f	class:dgCollisionCompoundFractured::dgConectivityGraphMap
dgConectivityGraphMap	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgConectivityGraphMap: public dgTree<dgConectivityGraph::dgListNode*, const dgCollisionInstance*>$/;"	c	class:dgCollisionCompoundFractured
dgConstraint	libs/Newton/include/dgConstraint.h	/^class dgConstraint$/;"	c
dgConstraint	libs/Newton/include/dgConstraint.h	/^inline dgConstraint::dgConstraint() $/;"	f	class:dgConstraint
dgConstraintID	libs/Newton/include/dgConstraint.h	/^	enum dgConstraintID$/;"	g	class:dgConstraint
dgConstraintInfo	libs/Newton/include/dgConstraint.h	/^class dgConstraintInfo$/;"	c
dgContact	libs/Newton/include/dgContact.h	/^class dgContact: public dgConstraint, public dgList<dgContactMaterial>$/;"	c
dgContactCode	libs/Newton/include/dgBroadPhase.h	/^	enum dgContactCode$/;"	g	class:dgBroadPhase
dgContactMaterial	libs/Newton/include/dgContact.h	/^class dgContactMaterial: public dgContactPoint$/;"	c
dgContactPoint	libs/Newton/include/dgContact.h	/^class dgContactPoint $/;"	c
dgContraintDescritor	libs/Newton/include/dgConstraint.h	/^class dgContraintDescritor$/;"	c
dgControlFP	libs/Newton/include/dgTypes.h	748;"	d
dgConvexCastReturnInfo	libs/Newton/include/dgBroadPhase.h	/^class dgConvexCastReturnInfo$/;"	c
dgConvexHull3DFace	libs/Newton/include/dgConvexHull3d.h	/^class dgConvexHull3DFace$/;"	c
dgConvexHull3d	libs/Newton/include/dgConvexHull3d.h	/^class dgConvexHull3d: public dgList<dgConvexHull3DFace>$/;"	c
dgConvexHull4d	libs/Newton/include/dgConvexHull4d.h	/^class dgConvexHull4d: public dgList<dgConvexHull4dTetraherum>$/;"	c
dgConvexHull4dTetraherum	libs/Newton/include/dgConvexHull4d.h	/^class dgConvexHull4dTetraherum$/;"	c
dgConvexHullData	libs/Newton/include/dgCollision.h	/^	struct dgConvexHullData$/;"	s	class:dgCollisionInfo
dgConvexModifierData	libs/Newton/include/dgCollision.h	/^	struct dgConvexModifierData$/;"	s	class:dgCollisionInfo
dgConvexSimplexEdge	libs/Newton/include/dgCollisionConvex.h	/^class dgConvexSimplexEdge$/;"	c
dgCorkscrewConstraint	libs/Newton/include/dgCorkscrewConstraint.h	/^class dgCorkscrewConstraint: public dgBilateralConstraint$/;"	c
dgCorkscrewJointAcceleration	libs/Newton/include/dgCorkscrewConstraint.h	/^typedef dgUnsigned32 (dgApi *dgCorkscrewJointAcceleration) (const dgCorkscrewConstraint& hinge, dgJointCallbackParam* param);$/;"	t
dgCos	libs/Newton/include/dgTypes.h	740;"	d
dgCoumpountCollisionData	libs/Newton/include/dgCollision.h	/^	struct dgCoumpountCollisionData$/;"	s	class:dgCollisionInfo
dgCriticalSection	libs/Newton/include/dgThread.h	/^	class dgCriticalSection$/;"	c	class:dgThread
dgCriticalSection	libs/Newton/include/dgThread.h	/^DG_INLINE dgThread::dgCriticalSection::dgCriticalSection()$/;"	f	class:dgThread::dgCriticalSection
dgCylinderData	libs/Newton/include/dgCollision.h	/^	struct dgCylinderData$/;"	s	class:dgCollisionInfo
dgDEG2RAD	libs/Newton/include/dgTypes.h	252;"	d
dgDebriNodeInfo	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgDebriNodeInfo$/;"	c	class:dgCollisionCompoundFractured
dgDeformableBodiesUpdate	libs/Newton/include/dgDeformableBodiesUpdate.h	/^class dgDeformableBodiesUpdate: public dgList<dgCollisionDeformableMesh*>$/;"	c
dgDeformableBody	libs/Newton/include/dgDeformableBody.h	/^class dgDeformableBody: public dgBody$/;"	c
dgDeformableContact	libs/Newton/include/dgDeformableContact.h	/^class dgDeformableContact:  public dgContact $/;"	c
dgDeformableMeshData	libs/Newton/include/dgCollision.h	/^	struct dgDeformableMeshData$/;"	s	class:dgCollisionInfo
dgDelaunayTetrahedralization	libs/Newton/include/dgDelaunayTetrahedralization.h	/^class dgDelaunayTetrahedralization: public dgConvexHull4d$/;"	c
dgDeserialize	libs/Newton/include/dgTypes.h	/^typedef void (dgApi *dgDeserialize) (void* const userData, void* buffer, size_t size);$/;"	t
dgDoubleInt	libs/Newton/include/dgTypes.h	/^union dgDoubleInt$/;"	u
dgDownHeap	libs/Newton/include/dgHeap.h	/^class dgDownHeap: public dgHeapBase<OBJECT, KEY>$/;"	c
dgDownHeap	libs/Newton/include/dgHeap.h	/^dgDownHeap<OBJECT,KEY>::dgDownHeap (const void * const buffer, dgInt32 sizeInBytes)$/;"	f	class:dgDownHeap
dgDownHeap	libs/Newton/include/dgHeap.h	/^dgDownHeap<OBJECT,KEY>::dgDownHeap (dgInt32 maxElements, dgMemoryAllocator* const allocator)$/;"	f	class:dgDownHeap
dgDynamicBody	libs/Newton/include/dgDynamicBody.h	/^class dgDynamicBody : public dgBody $/;"	c
dgEPSILON	libs/Newton/include/dgTypes.h	250;"	d
dgEXP	libs/Newton/include/dgTypes.h	249;"	d
dgEdge	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgEdge::dgEdge ()$/;"	f	class:dgEdge
dgEdge	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgEdge::dgEdge (dgInt32 vertex, dgInt32 face, dgUnsigned64 userdata)$/;"	f	class:dgEdge
dgEdge	libs/Newton/include/dgPolyhedra.h	/^class dgEdge$/;"	c
dgEdgeKey	libs/Newton/include/dgPolyhedra.h	/^typedef dgInt64 dgEdgeKey;$/;"	t
dgElevationType	libs/Newton/include/dgCollisionHeightField.h	/^	enum dgElevationType$/;"	g	class:dgCollisionHeightField
dgEvent	libs/Newton/include/dgThreadProfiler.h	/^	class dgEvent$/;"	c	class:dgThreadProfiler
dgExp2	libs/Newton/include/dgTypes.h	/^DG_INLINE dgInt32 dgExp2 (dgInt32 x)$/;"	f
dgFastAABBInfo	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgFastAABBInfo()$/;"	f	class:dgFastAABBInfo
dgFastAABBInfo	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgFastAABBInfo(const dgMatrix& matrix, const dgVector& size)$/;"	f	class:dgFastAABBInfo
dgFastAABBInfo	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgFastAABBInfo(const dgVector& p0, const dgVector& p1)$/;"	f	class:dgFastAABBInfo
dgFastAABBInfo	libs/Newton/include/dgIntersections.h	/^class dgFastAABBInfo: public dgObb$/;"	c
dgFastInt	libs/Newton/include/dgTypes.h	/^DG_INLINE dgInt32 dgFastInt (dgFloat32 x)$/;"	f
dgFastInt	libs/Newton/include/dgTypes.h	/^DG_INLINE dgInt32 dgFastInt (dgFloat64 x)$/;"	f
dgFastQueue	libs/Newton/include/dgFastQueue.h	/^class dgFastQueue$/;"	c
dgFastQueue	libs/Newton/include/dgFastQueue.h	/^dgFastQueue<T, sizeInPowerOfTwo>::dgFastQueue (dgMemoryAllocator* const allocator)$/;"	f	class:dgFastQueue
dgFastRayTest	libs/Newton/include/dgIntersections.h	/^	DG_INLINE dgFastRayTest(const dgVector& l0, const dgVector& l1)$/;"	f	class:dgFastRayTest
dgFastRayTest	libs/Newton/include/dgIntersections.h	/^class dgFastRayTest$/;"	c
dgFitnessList	libs/Newton/include/dgBroadPhase.h	/^		dgFitnessList(dgMemoryAllocator* const allocator)$/;"	f	class:dgBroadPhase::dgFitnessList
dgFitnessList	libs/Newton/include/dgBroadPhase.h	/^	class dgFitnessList: public dgList <dgBroadPhaseTreeNode*>$/;"	c	class:dgBroadPhase
dgFitnessList	libs/Newton/include/dgMeshEffect.h	/^		class dgFitnessList: public dgTree <dgMeshBVHNode*, dgMeshBVHNode*>$/;"	c	class:dgMeshEffect::dgMeshBVH
dgFlatVertex	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgFlatVertex$/;"	c	class:dgCollisionCompoundFractured
dgFlatVertexArray	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgFlatVertexArray(dgMemoryAllocator* const allocator)$/;"	f	class:dgCollisionCompoundFractured::dgFlatVertexArray
dgFlatVertexArray	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgFlatVertexArray: public dgArray<dgFlatVertex>$/;"	c	class:dgCollisionCompoundFractured
dgFloat32	libs/Newton/include/dgTypes.h	/^	typedef double dgFloat32;$/;"	t
dgFloat32	libs/Newton/include/dgTypes.h	/^	typedef float dgFloat32;$/;"	t
dgFloat64	libs/Newton/include/dgTypes.h	/^	typedef double dgFloat64;$/;"	t
dgFloat64	libs/Newton/include/dgTypes.h	/^typedef double dgFloat64;$/;"	t
dgFloatExceptionMask	libs/Newton/include/dgTypes.h	/^	enum dgFloatExceptionMask$/;"	g	class:dgFloatExceptions
dgFloatExceptions	libs/Newton/include/dgTypes.h	/^	dgFloatExceptions(dgFloatExceptionMask mask = m_InvalidDenormalAndivideByZero)$/;"	f	class:dgFloatExceptions
dgFloatExceptions	libs/Newton/include/dgTypes.h	/^class dgFloatExceptions$/;"	c
dgFloatSign	libs/Newton/include/dgTypes.h	/^	union dgFloatSign$/;"	u
dgFloor	libs/Newton/include/dgTypes.h	/^DG_INLINE dgFloat32 dgFloor(dgFloat32 x)$/;"	f
dgFmod	libs/Newton/include/dgTypes.h	746;"	d
dgForceImpactPair	libs/Newton/include/dgConstraint.h	/^class dgForceImpactPair$/;"	c
dgGRAVITY	libs/Newton/include/dgTypes.h	251;"	d
dgGeneralMatrix	libs/Newton/include/dgGeneralMatrix.h	/^class dgGeneralMatrix$/;"	c
dgGeneralMatrix	libs/Newton/include/dgGeneralMatrix.h	/^dgGeneralMatrix<T>::dgGeneralMatrix ($/;"	f	class:dgGeneralMatrix
dgGeneralMatrix	libs/Newton/include/dgGeneralMatrix.h	/^dgGeneralMatrix<T>::dgGeneralMatrix (const dgGeneralMatrix<T>& src)$/;"	f	class:dgGeneralMatrix
dgGeneralMatrix	libs/Newton/include/dgGeneralMatrix.h	/^dgGeneralMatrix<T>::dgGeneralMatrix (dgInt32 row, dgInt32 column)$/;"	f	class:dgGeneralMatrix
dgGeneralMatrixCalcBufferSizeInBytes	libs/Newton/include/dgGeneralMatrix.h	/^template <class T> dgInt32 dgGeneralMatrixCalcBufferSizeInBytes (dgInt32 row, dgInt32 column)$/;"	f
dgGeneralVector	libs/Newton/include/dgGeneralVector.h	/^class dgGeneralVector$/;"	c
dgGeneralVector	libs/Newton/include/dgGeneralVector.h	/^dgGeneralVector<T>::dgGeneralVector (const dgGeneralVector<T> &src)$/;"	f	class:dgGeneralVector
dgGeneralVector	libs/Newton/include/dgGeneralVector.h	/^dgGeneralVector<T>::dgGeneralVector (const dgGeneralVector<T> &src,  T *mem)$/;"	f	class:dgGeneralVector
dgGeneralVector	libs/Newton/include/dgGeneralVector.h	/^dgGeneralVector<T>::dgGeneralVector (dgInt32 size)$/;"	f	class:dgGeneralVector
dgGeneralVector	libs/Newton/include/dgGeneralVector.h	/^dgGeneralVector<T>::dgGeneralVector (dgInt32 size, T *mem)$/;"	f	class:dgGeneralVector
dgGeneralVector	libs/Newton/include/dgGeneralVector.h	/^dgGeneralVector<T>::dgGeneralVector() $/;"	f	class:dgGeneralVector
dgGoogol	libs/Newton/include/dgGoogol.h	/^class dgGoogol$/;"	c
dgGraph	libs/Newton/include/dgGraph.h	/^class dgGraph: public dgList<dgGraphNode<dgNodeData, dgEdgeData> >$/;"	c
dgGraph	libs/Newton/include/dgGraph.h	/^dgGraph<dgNodeData, dgEdgeData>::dgGraph (dgMemoryAllocator* const allocator) $/;"	f	class:dgGraph
dgGraphEdge	libs/Newton/include/dgGraph.h	/^class dgGraphEdge$/;"	c
dgGraphEdge	libs/Newton/include/dgGraph.h	/^dgGraphEdge<dgNodeData, dgEdgeData>::dgGraphEdge() $/;"	f	class:dgGraphEdge
dgGraphNode	libs/Newton/include/dgGraph.h	/^class dgGraphNode: public dgList<dgGraphEdge<dgNodeData, dgEdgeData> >$/;"	c
dgGraphNode	libs/Newton/include/dgGraph.h	/^dgGraphNode<dgNodeData, dgEdgeData>::dgGraphNode() $/;"	f	class:dgGraphNode
dgHeapBase	libs/Newton/include/dgHeap.h	/^class dgHeapBase$/;"	c
dgHeapBase	libs/Newton/include/dgHeap.h	/^dgHeapBase<OBJECT,KEY>::dgHeapBase (const void * const buffer, dgInt32 sizeInBytes)$/;"	f	class:dgHeapBase
dgHeapBase	libs/Newton/include/dgHeap.h	/^dgHeapBase<OBJECT,KEY>::dgHeapBase (dgInt32 maxElements, dgMemoryAllocator* const allocator)$/;"	f	class:dgHeapBase
dgHeightMapCollisionData	libs/Newton/include/dgCollision.h	/^	struct dgHeightMapCollisionData$/;"	s	class:dgCollisionInfo
dgHingeConstraint	libs/Newton/include/dgHingeConstraint.h	/^class dgHingeConstraint: public dgBilateralConstraint$/;"	c
dgHingeJointAcceleration	libs/Newton/include/dgHingeConstraint.h	/^typedef dgUnsigned32 (dgApi *dgHingeJointAcceleration) (const dgHingeConstraint& hinge, dgJointCallbackParam* param);$/;"	t
dgHugeVector	libs/Newton/include/dgGoogol.h	/^	dgHugeVector ()$/;"	f	class:dgHugeVector
dgHugeVector	libs/Newton/include/dgGoogol.h	/^	dgHugeVector (const dgBigVector& a)$/;"	f	class:dgHugeVector
dgHugeVector	libs/Newton/include/dgGoogol.h	/^	dgHugeVector (const dgTemplateVector<dgGoogol>& a)$/;"	f	class:dgHugeVector
dgHugeVector	libs/Newton/include/dgGoogol.h	/^	dgHugeVector (dgFloat64 x, dgFloat64 y, dgFloat64 z, dgFloat64 w)$/;"	f	class:dgHugeVector
dgHugeVector	libs/Newton/include/dgGoogol.h	/^class dgHugeVector: public dgTemplateVector<dgGoogol>$/;"	c
dgHullVector	libs/Newton/include/dgConvexHull4d.h	/^class dgHullVector: public dgBigVector$/;"	c
dgIndexArray	libs/Newton/include/dgMeshEffect.h	/^	class dgIndexArray $/;"	c	class:dgMeshEffect
dgIndexArray	libs/Newton/include/dgPolygonSoupBuilder.h	/^		dgIndexArray(dgMemoryAllocator* const allocator)$/;"	f	class:dgPolygonSoupDatabaseBuilder::dgIndexArray
dgIndexArray	libs/Newton/include/dgPolygonSoupBuilder.h	/^	class dgIndexArray: public dgArray<dgInt32>$/;"	c	class:dgPolygonSoupDatabaseBuilder
dgInitRtti	libs/Newton/include/dgRtti.h	77;"	d
dgInt16	libs/Newton/include/dgTypes.h	/^	typedef int16_t dgInt16;$/;"	t
dgInt16	libs/Newton/include/dgTypes.h	/^	typedef short dgInt16;$/;"	t
dgInt32	libs/Newton/include/dgTypes.h	/^	typedef int dgInt32;$/;"	t
dgInt32	libs/Newton/include/dgTypes.h	/^	typedef int32_t dgInt32;$/;"	t
dgInt64	libs/Newton/include/dgTypes.h	/^	typedef int64_t dgInt64;$/;"	t
dgInt64	libs/Newton/include/dgTypes.h	/^	typedef long long dgInt64;$/;"	t
dgInt8	libs/Newton/include/dgTypes.h	/^	typedef char dgInt8;$/;"	t
dgInt8	libs/Newton/include/dgTypes.h	/^	typedef int8_t dgInt8;$/;"	t
dgInterlockedExchange	libs/Newton/include/dgTypes.h	/^DG_INLINE dgInt32 dgInterlockedExchange(dgInt32* const ptr, dgInt32 value)$/;"	f
dgIntersectStatus	libs/Newton/include/dgIntersections.h	/^enum dgIntersectStatus$/;"	g
dgIsland	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgIsland$/;"	c
dgIslandCallbackStruct	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgIslandCallbackStruct$/;"	c
dgJacobian	libs/Newton/include/dgConstraint.h	/^class dgJacobian$/;"	c
dgJacobianMatrixElement	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgJacobianMatrixElement$/;"	c
dgJacobianMemory	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgJacobianMemory$/;"	c
dgJacobianPair	libs/Newton/include/dgConstraint.h	/^class dgJacobianPair$/;"	c
dgJointAccelerationDecriptor	libs/Newton/include/dgConstraint.h	/^class dgJointAccelerationDecriptor$/;"	c
dgJointCallbackParam	libs/Newton/include/dgConstraint.h	/^class dgJointCallbackParam$/;"	c
dgJointInfo	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgJointInfo$/;"	c
dgKMH2MPSEC	libs/Newton/include/dgTypes.h	254;"	d
dgKinematicBody	libs/Newton/include/dgKinematicBody.h	/^class dgKinematicBody: public dgBody $/;"	c
dgLeafNodePtr	libs/Newton/include/dgAABBPolygonSoup.h	/^			DG_INLINE dgLeafNodePtr ()$/;"	f	class:dgAABBPolygonSoup::dgNode::dgLeafNodePtr
dgLeafNodePtr	libs/Newton/include/dgAABBPolygonSoup.h	/^			DG_INLINE dgLeafNodePtr (dgUnsigned32 faceIndexCount, dgUnsigned32 faceIndexStart)$/;"	f	class:dgAABBPolygonSoup::dgNode::dgLeafNodePtr
dgLeafNodePtr	libs/Newton/include/dgAABBPolygonSoup.h	/^			DG_INLINE dgLeafNodePtr (dgUnsigned32 node)$/;"	f	class:dgAABBPolygonSoup::dgNode::dgLeafNodePtr
dgLeafNodePtr	libs/Newton/include/dgAABBPolygonSoup.h	/^		class dgLeafNodePtr$/;"	c	class:dgAABBPolygonSoup::dgNode
dgLineBox	libs/Newton/include/dgBody.h	/^struct dgLineBox$/;"	s
dgList	libs/Newton/include/dgList.h	/^class dgList $/;"	c
dgList	libs/Newton/include/dgList.h	/^dgList<T>::dgList (dgMemoryAllocator* const allocator)$/;"	f	class:dgList
dgListNode	libs/Newton/include/dgList.h	/^		dgListNode (const T &info, dgListNode* const prev, dgListNode* const next) $/;"	f	class:dgList::dgListNode
dgListNode	libs/Newton/include/dgList.h	/^		dgListNode (dgListNode* const prev, dgListNode* const next) $/;"	f	class:dgList::dgListNode
dgListNode	libs/Newton/include/dgList.h	/^	class dgListNode$/;"	c	class:dgList
dgListener	libs/Newton/include/dgWorld.h	/^		dgListener()$/;"	f	class:dgWorld::dgListener
dgListener	libs/Newton/include/dgWorld.h	/^	class dgListener$/;"	c	class:dgWorld
dgListenerList	libs/Newton/include/dgWorld.h	/^		dgListenerList (dgMemoryAllocator* const allocator)$/;"	f	class:dgWorld::dgListenerList
dgListenerList	libs/Newton/include/dgWorld.h	/^	class dgListenerList: public dgList <dgListener>$/;"	c	class:dgWorld
dgLog	libs/Newton/include/dgTypes.h	744;"	d
dgMatrix	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix::dgMatrix ()$/;"	f	class:dgMatrix
dgMatrix	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix::dgMatrix (const dgFloat32* const array)$/;"	f	class:dgMatrix
dgMatrix	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix::dgMatrix (const dgVector &front, const dgVector &up, const dgVector &right, const dgVector &posit)$/;"	f	class:dgMatrix
dgMatrix	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix::dgMatrix (const dgVector& front)$/;"	f	class:dgMatrix
dgMatrix	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix::dgMatrix (const dgVector& p, const dgVector& q)$/;"	f	class:dgMatrix
dgMatrix	libs/Newton/include/dgMatrix.h	/^class dgMatrix$/;"	c
dgMax	libs/Newton/include/dgTypes.h	/^DG_INLINE T dgMax(T A, T B)$/;"	f
dgMax	libs/Newton/include/dgTypes.h	/^DG_INLINE T dgMax(T A, T B, T C)$/;"	f
dgMemAlloc	libs/Newton/include/dgMemory.h	/^typedef void* (dgApi *dgMemAlloc) (dgUnsigned32 size);$/;"	t
dgMemDirectory	libs/Newton/include/dgMemory.h	/^	class dgMemDirectory$/;"	c	class:dgMemoryAllocator
dgMemFree	libs/Newton/include/dgMemory.h	/^typedef void (dgApi *dgMemFree) (void* const ptr, dgUnsigned32 size);$/;"	t
dgMemoryAllocator	libs/Newton/include/dgMemory.h	/^class dgMemoryAllocator$/;"	c
dgMemoryBin	libs/Newton/include/dgMemory.h	/^	class dgMemoryBin$/;"	c	class:dgMemoryAllocator
dgMemoryBinInfo	libs/Newton/include/dgMemory.h	/^		class dgMemoryBinInfo$/;"	c	class:dgMemoryAllocator::dgMemoryBin
dgMemoryCacheEntry	libs/Newton/include/dgMemory.h	/^	class dgMemoryCacheEntry$/;"	c	class:dgMemoryAllocator
dgMemoryInfo	libs/Newton/include/dgMemory.h	/^	class dgMemoryInfo$/;"	c	class:dgMemoryAllocator
dgMemoryLeaksTracker	libs/Newton/include/dgMemory.h	/^	class dgMemoryLeaksTracker$/;"	c	class:dgMemoryAllocator
dgMesh	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgMesh: public dgList<dgSubMesh>, public dgRefCounter $/;"	c	class:dgCollisionCompoundFractured
dgMesh	libs/Newton/include/dgCollisionMesh.h	/^	class dgMesh$/;"	c	class:dgPolygonMeshDesc
dgMeshBVH	libs/Newton/include/dgMeshEffect.h	/^	class dgMeshBVH$/;"	c	class:dgMeshEffect
dgMeshBVHNode	libs/Newton/include/dgMeshEffect.h	/^		class dgMeshBVHNode$/;"	c	class:dgMeshEffect::dgMeshBVH
dgMeshEffect	libs/Newton/include/dgMeshEffect.h	/^class dgMeshEffect: public dgPolyhedra, public dgRefCounter$/;"	c
dgMeshSegment	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgMeshSegment ()$/;"	f	class:dgCollisionDeformableMesh::dgMeshSegment
dgMeshSegment	libs/Newton/include/dgCollisionDeformableMesh.h	/^	class dgMeshSegment$/;"	c	class:dgCollisionDeformableMesh
dgMeshVertexListIndexList	libs/Newton/include/dgCollisionMesh.h	/^	class dgMeshVertexListIndexList$/;"	c	class:dgCollisionMesh
dgMin	libs/Newton/include/dgTypes.h	/^DG_INLINE T dgMin(T A, T B)$/;"	f
dgMin	libs/Newton/include/dgTypes.h	/^DG_INLINE T dgMin(T A, T B, T C)$/;"	f
dgMovingAABB	libs/Newton/include/dgIntersections.h	/^DG_INLINE void dgMovingAABB (dgVector& p0, dgVector& p1, const dgVector& veloc, const dgVector& omega, dgFloat32 timestep, dgFloat32 maxRadius, dgFloat32 minRadius)$/;"	f
dgMutexThread	libs/Newton/include/dgMutexThread.h	/^class dgMutexThread: public dgThread$/;"	c
dgNode	libs/Newton/include/dgAABBPolygonSoup.h	/^		dgNode ()$/;"	f	class:dgAABBPolygonSoup::dgNode
dgNode	libs/Newton/include/dgAABBPolygonSoup.h	/^	class dgNode$/;"	c	class:dgAABBPolygonSoup
dgNode	libs/Newton/include/dgNode.h	/^class dgNode: public dgBaseNode$/;"	c
dgNode	libs/Newton/include/dgNode.h	/^dgNode<T>::dgNode ()$/;"	f	class:dgNode
dgNode	libs/Newton/include/dgNode.h	/^dgNode<T>::dgNode (const T &clone)$/;"	f	class:dgNode
dgNode	libs/Newton/include/dgNode.h	/^dgNode<T>::dgNode (const char* const name)$/;"	f	class:dgNode
dgNodeBase	libs/Newton/include/dgCollisionCompound.h	/^	class dgNodeBase$/;"	c	class:dgCollisionCompound
dgNodePairs	libs/Newton/include/dgCollisionCompound.h	/^	class dgNodePairs$/;"	c	class:dgCollisionCompound
dgNodeType	libs/Newton/include/dgAABBPolygonSoup.h	/^		enum dgNodeType$/;"	g	class:dgAABBPolygonSoup::dgNode
dgNodeType	libs/Newton/include/dgCollisionCompound.h	/^	enum dgNodeType$/;"	g	class:dgCollisionCompound
dgOOBBTestData	libs/Newton/include/dgCollisionCompound.h	/^	class dgOOBBTestData$/;"	c	class:dgCollisionCompound
dgObb	libs/Newton/include/dgObb.h	/^	DG_INLINE dgObb (){};$/;"	f	class:dgObb
dgObb	libs/Newton/include/dgObb.h	/^class dgObb: public dgMatrix$/;"	c
dgObb	libs/Newton/include/dgObb.h	/^inline dgObb::dgObb (const dgQuaternion &quat, const dgVector &position, const dgVector& dim)$/;"	f	class:dgObb
dgObb	libs/Newton/include/dgObb.h	/^inline dgObb::dgObb(const dgMatrix& matrix, const dgVector& dim)$/;"	f	class:dgObb
dgOnSkeletonContainerDestroyCallback	libs/Newton/include/dgSkeletonContainer.h	/^typedef void (dgApi *dgOnSkeletonContainerDestroyCallback) (dgSkeletonContainer* const me);$/;"	t
dgOverlapTest	libs/Newton/include/dgIntersections.h	/^DG_INLINE dgInt32 dgOverlapTest (const dgVector& p0, const dgVector& p1, const dgVector& q0, const dgVector& q1)$/;"	f
dgPI	libs/Newton/include/dgTypes.h	247;"	d
dgPI2	libs/Newton/include/dgTypes.h	248;"	d
dgPair	libs/Newton/include/dgBroadPhase.h	/^	class dgPair$/;"	c	class:dgBroadPhase
dgPairKey	libs/Newton/include/dgPolyhedra.h	/^	class dgPairKey$/;"	c	class:dgPolyhedra
dgPairKey	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgPolyhedra::dgPairKey::dgPairKey ()$/;"	f	class:dgPolyhedra::dgPairKey
dgPairKey	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgPolyhedra::dgPairKey::dgPairKey (dgInt32 v0, dgInt32 v1)$/;"	f	class:dgPolyhedra::dgPairKey
dgPairKey	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgPolyhedra::dgPairKey::dgPairKey (dgInt64 val)$/;"	f	class:dgPolyhedra::dgPairKey
dgParallelJointMap	libs/Newton/include/dgWorldDynamicUpdate.h	/^	class dgParallelJointMap$/;"	c	class:dgParallelSolverSyncData
dgParallelSolverSyncData	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgParallelSolverSyncData()$/;"	f	class:dgParallelSolverSyncData
dgParallelSolverSyncData	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgParallelSolverSyncData$/;"	c
dgParticle	libs/Newton/include/dgCollisionDeformableMesh.h	/^	class dgParticle$/;"	c	class:dgCollisionDeformableMesh
dgPathCloseList	libs/Newton/include/dgPathFinder.h	/^	dgPathCloseList(): dgTree<dgPathNode<NODEID, COST>, NODEID>() {}$/;"	f	class:dgPathCloseList
dgPathCloseList	libs/Newton/include/dgPathFinder.h	/^class dgPathCloseList: public dgTree<dgPathNode<NODEID, COST>, NODEID>$/;"	c
dgPathFinder	libs/Newton/include/dgPathFinder.h	/^class dgPathFinder: public dgPathCloseList<NODEID, COST>$/;"	c
dgPathFinder	libs/Newton/include/dgPathFinder.h	/^dgPathFinder<NODEID, COST>::dgPathFinder($/;"	f	class:dgPathFinder
dgPathNode	libs/Newton/include/dgPathFinder.h	/^class dgPathNode$/;"	c
dgPathNode	libs/Newton/include/dgPathFinder.h	/^dgPathNode<NODEID, COST>::dgPathNode ()$/;"	f	class:dgPathNode
dgPathOpenHeap	libs/Newton/include/dgPathFinder.h	/^	dgPathOpenHeap(dgInt32 maxElements)$/;"	f	class:dgPathOpenHeap
dgPathOpenHeap	libs/Newton/include/dgPathFinder.h	/^class dgPathOpenHeap: public dgUpHeap<typename dgPathCloseList<NODEID, COST>::dgTreeNode*, COST>$/;"	c
dgPerIntanceData	libs/Newton/include/dgCollisionHeightField.h	/^	class dgPerIntanceData$/;"	c	class:dgCollisionHeightField
dgPitchMatrix	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix dgPitchMatrix(dgFloat32 ang)$/;"	f
dgPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgPlane::dgPlane () $/;"	f	class:dgPlane
dgPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgPlane::dgPlane (const dgVector &P0, const dgVector &P1, const dgVector &P2)$/;"	f	class:dgPlane
dgPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgPlane::dgPlane (const dgVector &normal, dgFloat32 distance) $/;"	f	class:dgPlane
dgPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgPlane::dgPlane (const dgVector& point)$/;"	f	class:dgPlane
dgPlane	libs/Newton/include/dgPlane.h	/^DG_INLINE dgPlane::dgPlane (dgFloat32 x, dgFloat32 y, dgFloat32 z, dgFloat32 w)$/;"	f	class:dgPlane
dgPlane	libs/Newton/include/dgPlane.h	/^class dgPlane: public dgVector$/;"	c
dgPointParam	libs/Newton/include/dgConstraint.h	/^	class dgPointParam$/;"	c	class:dgConstraint
dgPolygonMeshDesc	libs/Newton/include/dgCollisionMesh.h	/^	DG_INLINE dgPolygonMeshDesc()$/;"	f	class:dgPolygonMeshDesc
dgPolygonMeshDesc	libs/Newton/include/dgCollisionMesh.h	/^class dgPolygonMeshDesc: public dgFastAABBInfo$/;"	c
dgPolygonSoupDatabase	libs/Newton/include/dgPolygonSoupDatabase.h	/^class dgPolygonSoupDatabase$/;"	c
dgPolygonSoupDatabase	libs/Newton/include/dgPolygonSoupDatabase.h	/^inline dgPolygonSoupDatabase::dgPolygonSoupDatabase(const char* const name)$/;"	f	class:dgPolygonSoupDatabase
dgPolygonSoupDatabaseBuilder	libs/Newton/include/dgPolygonSoupBuilder.h	/^class dgPolygonSoupDatabaseBuilder $/;"	c
dgPolyhedra	libs/Newton/include/dgPolyhedra.h	/^class dgPolyhedra: public dgTree <dgEdge, dgEdgeKey>$/;"	c
dgPolyhedraMassProperties	libs/Newton/include/dgPolyhedraMassProperties.h	/^class dgPolyhedraMassProperties$/;"	c
dgPow	libs/Newton/include/dgTypes.h	745;"	d
dgPrefetchMem	libs/Newton/include/dgTypes.h	/^DG_INLINE void dgPrefetchMem(const void* const mem)$/;"	f
dgQuaternion	libs/Newton/include/dgQuaternion.h	/^class dgQuaternion$/;"	c
dgQuaternion	libs/Newton/include/dgQuaternion.h	/^inline dgQuaternion::dgQuaternion () $/;"	f	class:dgQuaternion
dgQuaternion	libs/Newton/include/dgQuaternion.h	/^inline dgQuaternion::dgQuaternion (dgFloat32 Q0, dgFloat32 Q1, dgFloat32 Q2, dgFloat32 Q3) $/;"	f	class:dgQuaternion
dgQueue	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgQueue (T* const pool, dgInt32 size)$/;"	f	class:dgQueue
dgQueue	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgQueue$/;"	c
dgRAD2DEG	libs/Newton/include/dgTypes.h	253;"	d
dgRTTI	libs/Newton/include/dgBody.h	/^	enum dgRTTI$/;"	g	class:dgBody
dgRTTI	libs/Newton/include/dgCollision.h	/^	enum dgRTTI {$/;"	g	class:dgCollision
dgRadixSort	libs/Newton/include/dgTypes.h	/^void dgRadixSort (T* const array, T* const tmpArray, dgInt32 elements, dgInt32 radixPass,  dgInt32 (*getRadixKey) (const T* const  A, void* const context), void* const context = NULL)$/;"	f
dgRayIntersectCallback	libs/Newton/include/dgIntersections.h	/^typedef dgFloat32 (*dgRayIntersectCallback) (void* const context, $/;"	t
dgRedBackNode	libs/Newton/include/dgTree.h	/^	dgRedBackNode()$/;"	f	class:dgRedBackNode
dgRedBackNode	libs/Newton/include/dgTree.h	/^class dgRedBackNode$/;"	c
dgRedBackNode	libs/Newton/include/dgTree.h	/^inline dgRedBackNode::dgRedBackNode (dgRedBackNode* const parent)$/;"	f	class:dgRedBackNode
dgRef	libs/Newton/include/dgRef.h	/^class dgRef: public dgRefFlags$/;"	c
dgRef	libs/Newton/include/dgRef.h	/^inline dgRef::dgRef ()$/;"	f	class:dgRef
dgRef	libs/Newton/include/dgRef.h	/^inline dgRef::dgRef (const char *name)$/;"	f	class:dgRef
dgRef	libs/Newton/include/dgRef.h	/^inline dgRef::dgRef (dgUnsigned32 idArg)$/;"	f	class:dgRef
dgRef	libs/Newton/include/dgRef.h	/^inline dgRef::dgRef(const dgRef &Clone)$/;"	f	class:dgRef
dgRefCounter	libs/Newton/include/dgRefCounter.h	/^class dgRefCounter$/;"	c
dgRefCounter	libs/Newton/include/dgRefCounter.h	/^inline dgRefCounter::dgRefCounter(void)$/;"	f	class:dgRefCounter
dgRefFlags	libs/Newton/include/dgRef.h	/^inline dgRefFlags::dgRefFlags ()$/;"	f	class:dgRefFlags
dgRefFlags	libs/Newton/include/dgRef.h	/^struct dgRefFlags$/;"	s
dgReportProgress	libs/Newton/include/dgTypes.h	/^typedef bool (dgApi *dgReportProgress) (dgFloat32 progressNormalzedPercent, void* const userData);$/;"	t
dgRollMatrix	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix dgRollMatrix(dgFloat32 ang)$/;"	f
dgRsqrt	libs/Newton/include/dgTypes.h	/^DG_INLINE dgFloat32 dgRsqrt(dgFloat32 x)	$/;"	f
dgRtti	libs/Newton/include/dgRtti.h	/^class dgRtti$/;"	c
dgRtti	libs/Newton/include/dgRtti.h	/^inline dgRtti::dgRtti(const char* typeName)$/;"	f	class:dgRtti
dgScaleType	libs/Newton/include/dgCollisionInstance.h	/^	enum dgScaleType$/;"	g	class:dgCollisionInstance
dgSceneData	libs/Newton/include/dgCollision.h	/^	struct dgSceneData$/;"	s	class:dgCollisionInfo
dgSemaphore	libs/Newton/include/dgThread.h	/^	class dgSemaphore$/;"	c	class:dgThread
dgSerialize	libs/Newton/include/dgTypes.h	/^typedef void (dgApi *dgSerialize) (void* const userData, const void* const buffer, size_t size);$/;"	t
dgSerializeRevisionNumber	libs/Newton/include/dgTypes.h	/^enum dgSerializeRevisionNumber$/;"	g
dgSetPrecisionDouble	libs/Newton/include/dgTypes.h	/^	dgSetPrecisionDouble()$/;"	f	class:dgSetPrecisionDouble
dgSetPrecisionDouble	libs/Newton/include/dgTypes.h	/^class dgSetPrecisionDouble $/;"	c
dgSharedNodeMesh	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgSharedNodeMesh$/;"	c	class:dgCollisionCompoundFractured
dgSign	libs/Newton/include/dgTypes.h	/^DG_INLINE T dgSign(T A)$/;"	f
dgSin	libs/Newton/include/dgTypes.h	739;"	d
dgSkeletonContainer	libs/Newton/include/dgSkeletonContainer.h	/^class dgSkeletonContainer$/;"	c
dgSkeletonList	libs/Newton/include/dgWorld.h	/^	dgSkeletonList(dgMemoryAllocator* const allocator)$/;"	f	class:dgSkeletonList
dgSkeletonList	libs/Newton/include/dgWorld.h	/^class dgSkeletonList: public dgTree<dgSkeletonContainer*, dgInt32>$/;"	c
dgSlidingConstraint	libs/Newton/include/dgSlidingConstraint.h	/^class dgSlidingConstraint: public dgBilateralConstraint$/;"	c
dgSlidingJointAcceleration	libs/Newton/include/dgSlidingConstraint.h	/^typedef dgUnsigned32 (dgApi *dgSlidingJointAcceleration) (const dgSlidingConstraint& hinge, dgJointCallbackParam* param);$/;"	t
dgSolverSleepTherfesholds	libs/Newton/include/dgWorld.h	/^class dgSolverSleepTherfesholds$/;"	c
dgSort	libs/Newton/include/dgTypes.h	/^void dgSort (T* const array, dgInt32 elements, dgInt32 (*compare) (const T* const  A, const T* const B, void* const context), void* const context = NULL)$/;"	f
dgSortIndirect	libs/Newton/include/dgTypes.h	/^void dgSortIndirect (T** const array, dgInt32 elements, dgInt32 (*compare) (const T* const  A, const T* const B, void* const context), void* const context = NULL)$/;"	f
dgSphereData	libs/Newton/include/dgCollision.h	/^	struct dgSphereData$/;"	s	class:dgCollisionInfo
dgSpinLock	libs/Newton/include/dgTypes.h	/^DG_INLINE void dgSpinLock (dgInt32* const ptr, bool yield)$/;"	f
dgSpinUnlock	libs/Newton/include/dgTypes.h	/^DG_INLINE void dgSpinUnlock (dgInt32* const ptr)$/;"	f
dgSqrt	libs/Newton/include/dgTypes.h	738;"	d
dgStack	libs/Newton/include/dgStack.h	/^class dgStack: public dgStackBase$/;"	c
dgStack	libs/Newton/include/dgStack.h	/^dgStack<T>::dgStack (dgInt32 size)$/;"	f	class:dgStack
dgStackBase	libs/Newton/include/dgStack.h	/^class dgStackBase$/;"	c
dgStackBase	libs/Newton/include/dgStack.h	/^inline dgStackBase::dgStackBase (dgInt32 size)$/;"	f	class:dgStackBase
dgStdApi	libs/Newton/include/dgTypes.h	262;"	d
dgStdApi	libs/Newton/include/dgTypes.h	265;"	d
dgSubMesh	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgSubMesh$/;"	c	class:dgCollisionCompoundFractured
dgSwap	libs/Newton/include/dgTypes.h	/^DG_INLINE void dgSwap(T& A, T& B)$/;"	f
dgSymmetricBiconjugateGradientSolve	libs/Newton/include/dgSPDMatrix.h	/^class dgSymmetricBiconjugateGradientSolve$/;"	c
dgTaperedCapsuleData	libs/Newton/include/dgCollision.h	/^	struct dgTaperedCapsuleData$/;"	s	class:dgCollisionInfo
dgTaperedCylinderData	libs/Newton/include/dgCollision.h	/^	struct dgTaperedCylinderData$/;"	s	class:dgCollisionInfo
dgTemplateVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector () $/;"	f	class:dgTemplateVector
dgTemplateVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector (T x, T y, T z, T w) $/;"	f	class:dgTemplateVector
dgTemplateVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector (const T* const ptr)$/;"	f	class:dgTemplateVector
dgTemplateVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector (const dgTemplateVector<T>& copy)$/;"	f	class:dgTemplateVector
dgTemplateVector	libs/Newton/include/dgVector.h	/^class dgTemplateVector$/;"	c
dgTetrahedrumFace	libs/Newton/include/dgConvexHull4d.h	/^	class dgTetrahedrumFace $/;"	c	class:dgConvexHull4dTetraherum
dgTetrahedrumPlane	libs/Newton/include/dgConvexHull4d.h	/^	class dgTetrahedrumPlane: public dgBigVector$/;"	c	class:dgConvexHull4dTetraherum
dgThread	libs/Newton/include/dgThread.h	/^class dgThread$/;"	c
dgThreadBee	libs/Newton/include/dgThreadHive.h	/^	class dgThreadBee: public dgThread$/;"	c	class:dgThreadHive
dgThreadHive	libs/Newton/include/dgThreadHive.h	/^class dgThreadHive  $/;"	c
dgThreadHiveScopeLock	libs/Newton/include/dgThreadHive.h	/^	dgThreadHiveScopeLock(const dgThreadHive* const me, dgThread::dgCriticalSection* const criticalSectionLock, bool yield)$/;"	f	class:dgThreadHiveScopeLock
dgThreadHiveScopeLock	libs/Newton/include/dgThreadHive.h	/^class dgThreadHiveScopeLock$/;"	c
dgThreadJob	libs/Newton/include/dgThreadHive.h	/^		dgThreadJob (void* const context0, void* const context1, dgWorkerThreadTaskCallback callback)$/;"	f	class:dgThreadHive::dgThreadJob
dgThreadJob	libs/Newton/include/dgThreadHive.h	/^		dgThreadJob()$/;"	f	class:dgThreadHive::dgThreadJob
dgThreadJob	libs/Newton/include/dgThreadHive.h	/^	class dgThreadJob$/;"	c	class:dgThreadHive
dgThreadProfiler	libs/Newton/include/dgThreadProfiler.h	/^class dgThreadProfiler$/;"	c
dgThreadYield	libs/Newton/include/dgTypes.h	/^DG_INLINE void dgThreadYield()$/;"	f
dgTrace	libs/Newton/include/dgDebug.h	35;"	d
dgTrace	libs/Newton/include/dgDebug.h	37;"	d
dgTree	libs/Newton/include/dgTree.h	/^class dgTree $/;"	c
dgTree	libs/Newton/include/dgTree.h	/^dgTree<OBJECT, KEY>::dgTree (dgMemoryAllocator* const allocator)$/;"	f	class:dgTree
dgTreeArray	libs/Newton/include/dgCollisionCompound.h	/^	class dgTreeArray: public dgTree<dgNodeBase*, dgInt32>$/;"	c	class:dgCollisionCompound
dgTreeNode	libs/Newton/include/dgTree.h	/^		dgTreeNode ($/;"	f	class:dgTree::dgTreeNode
dgTreeNode	libs/Newton/include/dgTree.h	/^	class dgTreeNode: public dgRedBackNode$/;"	c	class:dgTree
dgTriplex	libs/Newton/include/dgTypes.h	/^class dgTriplex$/;"	c
dgType	libs/Newton/include/dgBody.h	/^	enum dgType$/;"	g	class:dgBody
dgUniversalConstraint	libs/Newton/include/dgUniversalConstraint.h	/^class dgUniversalConstraint: public dgBilateralConstraint$/;"	c
dgUniversalJointAcceleration	libs/Newton/include/dgUniversalConstraint.h	/^typedef dgUnsigned32 (dgApi *dgUniversalJointAcceleration) (const dgUniversalConstraint& hinge, dgJointCallbackParam* param);$/;"	t
dgUnsigned16	libs/Newton/include/dgTypes.h	/^	typedef uint16_t dgUnsigned16;$/;"	t
dgUnsigned16	libs/Newton/include/dgTypes.h	/^	typedef unsigned short dgUnsigned16;$/;"	t
dgUnsigned32	libs/Newton/include/dgTypes.h	/^	typedef uint32_t dgUnsigned32;$/;"	t
dgUnsigned32	libs/Newton/include/dgTypes.h	/^	typedef unsigned dgUnsigned32;$/;"	t
dgUnsigned32	libs/Newton/include/dgTypes.h	/^	typedef unsigned int dgUnsigned32;$/;"	t
dgUnsigned64	libs/Newton/include/dgTypes.h	/^	typedef uint64_t dgUnsigned64;$/;"	t
dgUnsigned64	libs/Newton/include/dgTypes.h	/^	typedef unsigned long long dgUnsigned64;$/;"	t
dgUnsigned8	libs/Newton/include/dgTypes.h	/^	typedef uint8_t dgUnsigned8;$/;"	t
dgUnsigned8	libs/Newton/include/dgTypes.h	/^	typedef unsigned char dgUnsigned8;$/;"	t
dgUpHeap	libs/Newton/include/dgHeap.h	/^class dgUpHeap: public dgHeapBase<OBJECT, KEY>$/;"	c
dgUpHeap	libs/Newton/include/dgHeap.h	/^dgUpHeap<OBJECT,KEY>::dgUpHeap (const void * const buffer, dgInt32 sizeInBytes)$/;"	f	class:dgUpHeap
dgUpHeap	libs/Newton/include/dgHeap.h	/^dgUpHeap<OBJECT,KEY>::dgUpHeap (dgInt32 maxElements, dgMemoryAllocator* const allocator)$/;"	f	class:dgUpHeap
dgUpVectorConstraint	libs/Newton/include/dgUpVectorConstraint.h	/^class dgUpVectorConstraint: public dgBilateralConstraint$/;"	c
dgUpVectorJointCallback	libs/Newton/include/dgUpVectorConstraint.h	/^typedef dgUnsigned32 (dgApi *dgUpVectorJointCallback) (const dgUpVectorConstraint& upVector);$/;"	t
dgUserConstraint	libs/Newton/include/dgUserConstraint.h	/^class dgUserConstraint: public dgBilateralConstraint  $/;"	c
dgUserMeshCreation	libs/Newton/include/dgCollisionUserMesh.h	/^class dgUserMeshCreation$/;"	c
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector (const dgBigVector& copy)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector (const dgFloat32 a)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector (const dgFloat32* const ptr)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector (const dgVector& copy)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector (const dgVector& v)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector (dgFloat32 x, dgFloat32 y, dgFloat32 z, dgFloat32 w) $/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector (dgFloat32 x, dgFloat32 y, dgFloat32 z, dgFloat32 w)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector (dgInt32 ix, dgInt32 iy, dgInt32 iz, dgInt32 iw)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector() $/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector()$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector(const __m128 type)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector(const __m128i type)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector(dgFloat32 val)$/;"	f	class:dgVector
dgVector	libs/Newton/include/dgVector.h	/^class dgVector$/;"	c
dgVertexArray	libs/Newton/include/dgPolygonSoupBuilder.h	/^		dgVertexArray(dgMemoryAllocator* const allocator)$/;"	f	class:dgPolygonSoupDatabaseBuilder::dgVertexArray
dgVertexArray	libs/Newton/include/dgPolygonSoupBuilder.h	/^	class dgVertexArray: public dgArray<dgBigVector>$/;"	c	class:dgPolygonSoupDatabaseBuilder
dgVertexAtribute	libs/Newton/include/dgMeshEffect.h	/^	class dgVertexAtribute $/;"	c	class:dgMeshEffect
dgVertexBuffer	libs/Newton/include/dgCollisionCompoundFractured.h	/^	class dgVertexBuffer: public dgRefCounter  $/;"	c	class:dgCollisionCompoundFractured
dgVisualVertexData	libs/Newton/include/dgCollisionDeformableMesh.h	/^	class dgVisualVertexData$/;"	c	class:dgCollisionDeformableMesh
dgWorkerThreadTaskCallback	libs/Newton/include/dgThreadHive.h	/^typedef void (*dgWorkerThreadTaskCallback) (void* const context0, void* const context1, dgInt32 threadID);$/;"	t
dgWorld	libs/Newton/include/dgWorld.h	/^class dgWorld$/;"	c
dgWorldDynamicUpdate	libs/Newton/include/dgWorldDynamicUpdate.h	/^class dgWorldDynamicUpdate$/;"	c
dgWorldThreadPool	libs/Newton/include/dgWorld.h	/^	dgWorldThreadPool(dgMemoryAllocator* const allocator)$/;"	f	class:dgWorldThreadPool
dgWorldThreadPool	libs/Newton/include/dgWorld.h	/^class dgWorldThreadPool: public dgThreadHive$/;"	c
dgYawMatrix	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgMatrix dgYawMatrix(dgFloat32 ang)$/;"	f
dgfRandom	libs/Newton/include/dgRandom.h	/^inline dgFloat32 dgfRandom()$/;"	f
done	libs/Newton/include/pthread.h	/^  int          done;        \/* indicates if user function has been executed *\/$/;"	m	struct:pthread_once_t_
draw	src/Mesh.h	/^    DrawFunc draw;$/;"	m	struct:__anon44
drawArrays	src/Mesh.c	/^void drawArrays(GLenum mode, GLint *first, GLsizei count) {$/;"	f
drawElements	src/Mesh.c	/^void drawElements(GLenum mode, GLint *first, GLsizei count) {$/;"	f
dummy	libs/Newton/include/implement.h	/^  DWORD dummy[5];$/;"	m	struct:ptw32_thread_t_
eabId	src/Mesh.h	/^    GLuint eabId;$/;"	m	struct:__anon44
eflags	staticbin/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon41	file:
elapsed	src/Timestep.c	/^static double start, current, elapsed;$/;"	v	file:
elapsedTime	src/Timestep.c	/^double elapsedTime() {$/;"	f
emptyTexture	src/Material.c	/^Texture *emptyTexture( int width, int height, GLenum target, uint8 genMipMaps ) {$/;"	f
enterLoop	src/Engine.c	/^void enterLoop(Engine *renderer) {$/;"	f
eof	src/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon50
err	src/Util.h	32;"	d
err_guard	src/Util.h	36;"	d
errlog	src/main.h	/^FILE *errlog;$/;"	v
errno	libs/Newton/include/need_errno.h	76;"	d
errno	libs/Newton/include/pthread.h	1254;"	d
error_string	libs/Newton/include/test.h	/^const char * error_string[] = {$/;"	v
event	libs/Newton/include/implement.h	/^  HANDLE event;			\/* Mutex release notification to waiting$/;"	m	struct:pthread_mutex_t_
execute	libs/Newton/include/pthread.h	/^          void execute( int exec )$/;"	f	class:PThreadCleanup
executeIt	libs/Newton/include/pthread.h	/^          int             executeIt;$/;"	m	class:PThreadCleanup
exitStatus	libs/Newton/include/implement.h	/^  void *exitStatus;$/;"	m	struct:ptw32_thread_t_
exit_guard	src/Util.h	40;"	d
expanded	staticbin/stb_image.c	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon37	file:
fRandom	libs/Newton/include/dgRandom.h	/^const dgFloat64 fRandom = (dgFloat64 (1.0) \/ dgFloat64 ((dgUnsigned32)(0xffffffff))); $/;"	v
farClip	src/Camera.h	/^    float farClip;$/;"	m	struct:__anon52
fast	staticbin/stb_image.c	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon34	file:
fast	staticbin/stb_image.c	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon30	file:
fboId	src/Mesh.h	/^    GLuint fboId;$/;"	m	struct:__anon44
fileTexture	src/Material.c	/^Texture *fileTexture(const char *file, GLenum target, uint8 genMipMaps) {$/;"	f
first	src/Mesh.h	/^    GLint first;$/;"	m	struct:__anon44
first	staticbin/stb_image.c	/^   stbi_uc first;$/;"	m	struct:__anon40	file:
first_row_filter	staticbin/stb_image.c	/^static stbi_uc first_row_filter[5] =$/;"	v	file:
firstcode	staticbin/stb_image.c	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon34	file:
firstsymbol	staticbin/stb_image.c	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon34	file:
flags	staticbin/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon41	file:
float2fixed	staticbin/stb_image.c	1423;"	d	file:
force	src/main.c	/^float force[] = { 0.0f, 0.0f, 0.0f };$/;"	v
forward	src/State.h	/^    float forward[3];$/;"	m	struct:__anon51
fov	src/Camera.h	/^    float fov[2];$/;"	m	struct:__anon52
fps	src/Context.c	/^void fps(double elapsed) {$/;"	f
freeCamera	src/Camera.c	/^void freeCamera(Camera *cam) {$/;"	f
freeMaterial	src/Material.c	/^void freeMaterial(Material *mat) {$/;"	f
freeMesh	src/Mesh.c	/^void freeMesh(Mesh *mesh) {$/;"	f
freeObject	src/Object.c	/^void freeObject(Object *obj) {$/;"	f
freeObjects	src/Engine.c	/^void freeObjects( Engine *renderer ) {$/;"	f
freeShader	src/Shader.c	/^void freeShader(Shader *shader) {$/;"	f
freeTexture	src/Material.c	/^void freeTexture(Texture *tex) {$/;"	f
freeTextures	src/Engine.c	/^void freeTextures( Engine *renderer ) {$/;"	f
gTime	src/Shader.c	/^void gTime(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
genTextures	src/Engine.c	/^void genTextures( Engine *renderer ) {$/;"	f
getGlobalTime	src/Timestep.c	/^double getGlobalTime() {$/;"	f
getInt	src/LuaScript.h	29;"	d
getString	src/LuaScript.h	60;"	d
getStringAlloc	src/LuaScript.h	68;"	d
globalSynchedTime	src/Timestep.c	/^static double globalSynchedTime = 0.0;$/;"	v	file:
h	staticbin/stb_image.c	/^      int h,v;$/;"	m	struct:__anon31::__anon32	file:
h	staticbin/stb_image.c	/^   int w,h;$/;"	m	struct:__anon41	file:
h2	staticbin/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon31::__anon32	file:
ha	staticbin/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon31::__anon32	file:
hd	staticbin/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon31::__anon32	file:
height	src/Material.h	/^    uint32 height;$/;"	m	struct:__anon45
hs	staticbin/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon33	file:
huff_ac	staticbin/stb_image.c	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon31	file:
huff_dc	staticbin/stb_image.c	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon31	file:
id	src/Material.h	/^    GLuint id;$/;"	m	struct:__anon45
id	staticbin/stb_image.c	/^      int id;$/;"	m	struct:__anon31::__anon32	file:
idata	staticbin/stb_image.c	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon37	file:
img_buffer	staticbin/stb_image.c	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon28	file:
img_buffer_end	staticbin/stb_image.c	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon28	file:
img_buffer_original	staticbin/stb_image.c	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon28	file:
img_comp	staticbin/stb_image.c	/^   } img_comp[4];$/;"	m	struct:__anon31	typeref:struct:__anon31::__anon32	file:
img_h_max	staticbin/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon31	file:
img_mcu_h	staticbin/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon31	file:
img_mcu_w	staticbin/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon31	file:
img_mcu_x	staticbin/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon31	file:
img_mcu_y	staticbin/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon31	file:
img_n	staticbin/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon28	file:
img_out_n	staticbin/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon28	file:
img_v_max	staticbin/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon31	file:
img_x	staticbin/stb_image.c	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon28	file:
img_y	staticbin/stb_image.c	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon28	file:
implicit	libs/Newton/include/implement.h	/^  int implicit:1;$/;"	m	struct:ptw32_thread_t_
info	src/Util.h	30;"	d
info_call	src/Util.h	56;"	d
infolog	src/main.h	/^FILE *infolog;$/;"	v
inheritsched	libs/Newton/include/implement.h	/^  int inheritsched;$/;"	m	struct:pthread_attr_t_
init	src/Engine.c	/^Engine *init() {$/;"	f
int16	src/common.h	/^typedef short int16;$/;"	t
int32	src/common.h	/^typedef int int32;$/;"	t
int64	src/common.h	/^typedef long int64;$/;"	t
int64_t	libs/Newton/include/implement.h	106;"	d
int64_t	libs/Newton/include/implement.h	108;"	d
int64_t	libs/Newton/include/test.h	59;"	d
int64_t	libs/Newton/include/test.h	61;"	d
int8	src/common.h	/^typedef signed char int8;$/;"	t
interlock	libs/Newton/include/implement.h	/^  long interlock;		\/* Locking element for multi-cpus. *\/$/;"	m	struct:pthread_spinlock_t_
intg	libs/Newton/include/dgPolyhedraMassProperties.h	/^	dgFloat32 intg[10];$/;"	m	class:dgPolyhedraMassProperties
intptr_t	libs/Newton/include/implement.h	/^     typedef long intptr_t;$/;"	t
io	staticbin/stb_image.c	/^   stbi_io_callbacks io;$/;"	m	struct:__anon28	file:
io_user_data	staticbin/stb_image.c	/^   void *io_user_data;$/;"	m	struct:__anon28	file:
isosphereIn	src/Mesh.c	/^GLfloat* isosphereIn( GLfloat radius, GLfloat texres, int res, size_t *size, int* vertCount ) {$/;"	f
isosphereOut	src/Mesh.c	/^GLfloat* isosphereOut( GLfloat radius, GLfloat texres, int res, size_t *size, int* vertCount ) {$/;"	f
key	libs/Newton/include/implement.h	/^  DWORD key;$/;"	m	struct:pthread_key_t_
key	libs/Newton/include/implement.h	/^  pthread_key_t key;$/;"	m	struct:ThreadKeyAssoc
keyCB	src/InputManager.c	/^void keyCB(GLFWwindow *win, int key, int scancode, int action, int mods) {$/;"	f
keyLock	libs/Newton/include/implement.h	/^  ptw32_mcs_lock_t keyLock;$/;"	m	struct:pthread_key_t_
keys	libs/Newton/include/implement.h	/^  void *keys;$/;"	m	struct:ptw32_thread_t_
kind	libs/Newton/include/implement.h	/^  int kind;			\/* Mutex type. *\/$/;"	m	struct:pthread_mutex_t_
kind	libs/Newton/include/implement.h	/^  int kind;$/;"	m	struct:pthread_mutexattr_t_
leftToUnblock	libs/Newton/include/implement.h	/^  int leftToUnblock;$/;"	m	struct:sem_t_
length	staticbin/stb_image.c	/^   stbi__uint32 length;$/;"	m	struct:__anon36	file:
lerpStep	src/MatrixMath.c	/^double lerpStep(double from, double to, double alpha) {$/;"	f
lerpStepf	src/MatrixMath.c	/^float lerpStepf(float from, float to, float alpha) {$/;"	f
lflags	staticbin/stb_image.c	/^   int lflags;$/;"	m	struct:__anon41	file:
line0	staticbin/stb_image.c	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon33	file:
line1	staticbin/stb_image.c	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon33	file:
line_size	staticbin/stb_image.c	/^   int line_size;$/;"	m	struct:__anon41	file:
linebuf	staticbin/stb_image.c	/^      stbi_uc *linebuf;$/;"	m	struct:__anon31::__anon32	file:
loadObjects	src/SceneManager.c	/^void loadObjects( Engine* renderer, script *S ) {$/;"	f
loadScene	src/SceneManager.c	/^void loadScene(Engine *renderer) {$/;"	f
loadTextures	src/SceneManager.c	/^void loadTextures( Engine* renderer, script *S ) {$/;"	f
load_jpeg_image	staticbin/stb_image.c	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	file:
lock	libs/Newton/include/implement.h	/^  pthread_mutex_t lock;$/;"	m	struct:sem_t_
lock	libs/Newton/include/implement.h	/^  ptw32_mcs_lock_t lock;$/;"	m	struct:pthread_barrier_t_
lock	libs/Newton/include/implement.h	/^  struct ptw32_mcs_node_t_ **lock;        \/* ptr to tail of queue *\/$/;"	m	struct:ptw32_mcs_node_t_	typeref:struct:ptw32_mcs_node_t_::ptw32_mcs_node_t_
lock	libs/Newton/include/pthread.h	/^  void *       lock;$/;"	m	struct:pthread_once_t_
lock_idx	libs/Newton/include/implement.h	/^  LONG lock_idx;		\/* Provides exclusive access to mutex state$/;"	m	struct:pthread_mutex_t_
log_err	src/Util.h	80;"	d
log_info	src/Util.h	60;"	d
log_warn	src/Util.h	70;"	d
lpal	staticbin/stb_image.c	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon41	file:
lua	src/LuaScript.h	20;"	d
lua_run	src/LuaScript.h	13;"	d
m_Id	libs/Newton/include/dgPathFinder.h	/^	NODEID m_Id;$/;"	m	class:dgPathNode
m_InvalidDenormalAndivideByZero	libs/Newton/include/dgTypes.h	/^			m_InvalidDenormalAndivideByZero = _EM_INVALID | _EM_DENORMAL | _EM_ZERODIVIDE,$/;"	e	enum:dgFloatExceptions::dgFloatExceptionMask
m_JMinv	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgJacobianPair m_JMinv;$/;"	m	class:dgJacobianMatrixElement
m_Jt	libs/Newton/include/dgAmpInstance.h	/^		dgAmpJacobianPair m_Jt;$/;"	m	class:dgAmpConstraintData::dgAmpJacobianMatrixElement
m_Jt	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgJacobianPair m_Jt;$/;"	m	class:dgJacobianMatrixElement
m_Next	libs/Newton/include/dgPathFinder.h	/^	dgPathNode* m_Next;$/;"	m	class:dgPathNode
m_NodeCostFromSource	libs/Newton/include/dgPathFinder.h	/^	COST m_NodeCostFromSource;$/;"	m	class:dgPathNode
m_NodeCostToGoal	libs/Newton/include/dgPathFinder.h	/^	COST m_NodeCostToGoal;$/;"	m	class:dgPathNode
m_TypeId	libs/Newton/include/dgRtti.h	/^	dgUnsigned32 m_TypeId;$/;"	m	class:dgRtti
m_aabb	libs/Newton/include/dgAABBPolygonSoup.h	/^	dgNode* m_aabb;$/;"	m	class:dgAABBPolygonSoup
m_aabbOverlap	libs/Newton/include/dgContact.h	/^	OnAABBOverlap m_aabbOverlap;$/;"	m	class:dgContactMaterial
m_aabbP0	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_aabbP0;$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_aabbP0	libs/Newton/include/dgConvexHull3d.h	/^	dgBigVector m_aabbP0;$/;"	m	class:dgConvexHull3d
m_aabbP1	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_aabbP1;$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_aabbP1	libs/Newton/include/dgConvexHull3d.h	/^	dgBigVector m_aabbP1;$/;"	m	class:dgConvexHull3d
m_absDir	libs/Newton/include/dgIntersections.h	/^	dgMatrix m_absDir;$/;"	m	class:dgFastAABBInfo
m_absMatrix	libs/Newton/include/dgCollisionCompound.h	/^		dgMatrix m_absMatrix;$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_accel	libs/Newton/include/Newton.h	/^		dFloat m_accel;$/;"	m	struct:NewtonHingeSliderUpdateDesc
m_accel	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_accel;$/;"	m	class:dgJointCallbackParam
m_accel	libs/Newton/include/dgDynamicBody.h	/^	dgVector m_accel;$/;"	m	class:dgDynamicBody
m_accel	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_accel;$/;"	m	class:dgJacobianMatrixElement
m_accelIsMotor	libs/Newton/include/dgAmpInstance.h	/^			int m_accelIsMotor;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_accelIsMotor	libs/Newton/include/dgWorldDynamicUpdate.h	/^	bool m_accelIsMotor;$/;"	m	class:dgJacobianMatrixElement
m_accelNorm	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_accelNorm[DG_MAX_THREADS_HIVE_COUNT];$/;"	m	class:dgParallelSolverSyncData
m_acceleratedSearch	libs/Newton/include/dgBodyMasterList.h	/^	dgListNode* m_acceleratedSearch[3];$/;"	m	class:dgBodyMasterListRow
m_accelerator	libs/Newton/include/dgAmpInstance.h	/^	accelerator m_accelerator;$/;"	m	class:dgAmpInstance
m_acceleratorList	libs/Newton/include/dgAmpInstance.h	/^	dgList<dgAcceleratorDescription> m_acceleratorList;$/;"	m	class:dgAmpInstance
m_active	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_active					: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_adjacentFaceEdgeNormalIndex	libs/Newton/include/dgCollisionConvexPolygon.h	/^	const dgInt32* m_adjacentFaceEdgeNormalIndex;$/;"	m	class:dgCollisionConvexPolygon
m_adress	libs/Newton/include/dgWorld.h	/^		dgInt32 m_adress;$/;"	m	class:dgWorld::dgAdressDistPair
m_aggregateList	libs/Newton/include/dgBroadPhase.h	/^	dgList<dgBroadPhaseAggregate*> m_aggregateList;$/;"	m	class:dgBroadPhase
m_aligmentInByte	libs/Newton/include/dgArray.h	/^	dgInt32 m_aligmentInByte;$/;"	m	class:dgArray
m_aligmentMatrix	libs/Newton/include/dgCollisionInstance.h	/^	dgMatrix m_aligmentMatrix;$/;"	m	class:dgCollisionInstance
m_alive	libs/Newton/include/dgRef.h	/^	dgUnsigned8 m_alive; $/;"	m	struct:dgRefFlags
m_allExepctions	libs/Newton/include/dgTypes.h	/^			m_allExepctions = _EM_INVALID | _EM_DENORMAL | _EM_ZERODIVIDE | _EM_OVERFLOW | _EM_UNDERFLOW,$/;"	e	enum:dgFloatExceptions::dgFloatExceptionMask
m_allocationNumber	libs/Newton/include/dgMemory.h	/^			dgInt32 m_allocationNumber;$/;"	m	class:dgMemoryAllocator::dgMemoryLeaksTracker::Pool
m_allocator	libs/Newton/include/dgAmpAllocator.h	/^	dgMemoryAllocator* m_allocator;$/;"	m	class:dgAmpAllocator
m_allocator	libs/Newton/include/dgArray.h	/^	dgMemoryAllocator* m_allocator; $/;"	m	class:dgArray
m_allocator	libs/Newton/include/dgCollision.h	/^	dgMemoryAllocator* m_allocator;$/;"	m	class:dgCollision
m_allocator	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgMemoryAllocator* m_allocator;$/;"	m	class:dgCollisionCompoundFractured::dgSubMesh
m_allocator	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgMemoryAllocator* m_allocator;$/;"	m	class:dgCollisionCompoundFractured::dgVertexBuffer
m_allocator	libs/Newton/include/dgFastQueue.h	/^    dgMemoryAllocator* m_allocator;$/;"	m	class:dgFastQueue
m_allocator	libs/Newton/include/dgHeap.h	/^	dgMemoryAllocator* m_allocator;$/;"	m	class:dgHeapBase
m_allocator	libs/Newton/include/dgList.h	/^	dgMemoryAllocator* m_allocator;$/;"	m	class:dgList
m_allocator	libs/Newton/include/dgMemory.h	/^		dgMemoryAllocator* m_allocator;$/;"	m	class:dgMemoryAllocator::dgMemoryInfo
m_allocator	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgMemoryAllocator* m_allocator;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_allocator	libs/Newton/include/dgThreadHive.h	/^		dgMemoryAllocator* m_allocator; $/;"	m	class:dgThreadHive::dgThreadBee
m_allocator	libs/Newton/include/dgThreadHive.h	/^	dgMemoryAllocator* m_allocator;$/;"	m	class:dgThreadHive
m_allocator	libs/Newton/include/dgTree.h	/^	dgMemoryAllocator* m_allocator;$/;"	m	class:dgTree
m_allocator	libs/Newton/include/dgWorld.h	/^	dgMemoryAllocator* m_allocator;$/;"	m	class:dgWorld
m_alpha	libs/Newton/include/dgDynamicBody.h	/^	dgVector m_alpha;$/;"	m	class:dgDynamicBody
m_altenateUserData	libs/Newton/include/dgCollisionMesh.h	/^	void*  m_altenateUserData;$/;"	m	class:dgCollisionMeshRayHitDesc
m_alternateEvenColumsDiagonals	libs/Newton/include/dgCollisionHeightField.h	/^		m_alternateEvenColumsDiagonals,$/;"	e	enum:dgCollisionHeightField::dgCollisionHeightFieldGridConstruction
m_alternateEvenRowsDiagonals	libs/Newton/include/dgCollisionHeightField.h	/^		m_alternateEvenRowsDiagonals,$/;"	e	enum:dgCollisionHeightField::dgCollisionHeightFieldGridConstruction
m_alternateOddColumsDiagonals	libs/Newton/include/dgCollisionHeightField.h	/^		m_alternateOddColumsDiagonals,$/;"	e	enum:dgCollisionHeightField::dgCollisionHeightFieldGridConstruction
m_alternateOddRowsDiagonals	libs/Newton/include/dgCollisionHeightField.h	/^		m_alternateOddRowsDiagonals,$/;"	e	enum:dgCollisionHeightField::dgCollisionHeightFieldGridConstruction
m_amp	libs/Newton/include/dgCollisionCone.h	/^	dgFloat32 m_amp;$/;"	m	class:dgCollisionCone
m_amp	libs/Newton/include/dgWorld.h	/^	dgAmpInstance* m_amp;$/;"	m	class:dgWorld
m_angle	libs/Newton/include/dgCorkscrewConstraint.h	/^	dgFloat32 m_angle;$/;"	m	class:dgCorkscrewConstraint
m_angle	libs/Newton/include/dgHingeConstraint.h	/^	dgFloat32 m_angle;$/;"	m	class:dgHingeConstraint
m_angle0	libs/Newton/include/dgUniversalConstraint.h	/^	dgFloat32 m_angle0;$/;"	m	class:dgUniversalConstraint
m_angle1	libs/Newton/include/dgUniversalConstraint.h	/^	dgFloat32 m_angle1;$/;"	m	class:dgUniversalConstraint
m_angles	libs/Newton/include/dgBallConstraint.h	/^	dgVector m_angles;$/;"	m	class:dgBallConstraint
m_angular	libs/Newton/include/dgAmpInstance.h	/^	float_4 m_angular;$/;"	m	class:dgAmpJacobian
m_angular	libs/Newton/include/dgConstraint.h	/^	dgVector m_angular;$/;"	m	class:dgJacobian
m_angularContactError2	libs/Newton/include/dgBroadPhase.h	/^	static dgVector m_angularContactError2;$/;"	m	class:dgBroadPhase
m_aparentMass	libs/Newton/include/dgBody.h	/^	dgVector m_aparentMass;$/;"	m	class:dgBody
m_aparentMass	libs/Newton/include/dgDynamicBody.h	/^	dgVector m_aparentMass;$/;"	m	class:dgDynamicBody
m_applyExtForces	libs/Newton/include/dgDeformableBody.h	/^	OnApplyExtForceAndTorque m_applyExtForces;$/;"	m	class:dgDeformableBody
m_applyExtForces	libs/Newton/include/dgDynamicBody.h	/^	OnApplyExtForceAndTorque m_applyExtForces;$/;"	m	class:dgDynamicBody
m_area	libs/Newton/include/dgCollisionCompound.h	/^		dgFloat32 m_area;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_area	libs/Newton/include/dgMeshEffect.h	/^			dgFloat32 m_area;$/;"	m	class:dgMeshEffect::dgMeshBVH::dgMeshBVHNode
m_array	libs/Newton/include/dgArray.h	/^	mutable T *m_array;$/;"	m	class:dgArray
m_array	libs/Newton/include/dgCollisionCompound.h	/^	dgTreeArray m_array;$/;"	m	class:dgCollisionCompound
m_atomicIndex	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_atomicIndex;$/;"	m	class:dgParallelSolverSyncData
m_atribCount	libs/Newton/include/dgMeshEffect.h	/^	dgInt32 m_atribCount;$/;"	m	class:dgMeshEffect
m_atributeMap	libs/Newton/include/dgCollisionHeightField.h	/^	dgInt8* m_atributeMap;$/;"	m	class:dgCollisionHeightField
m_atributes	libs/Newton/include/Newton.h	/^		char* m_atributes;$/;"	m	struct:NewtonHeightFieldCollisionParam
m_atributes	libs/Newton/include/dgCollision.h	/^		dgInt8* m_atributes;$/;"	m	struct:dgCollisionInfo::dgHeightMapCollisionData
m_attachBody_0	libs/Newton/include/Newton.h	/^		const NewtonBody* m_attachBody_0;$/;"	m	struct:NewtonJointRecord
m_attachBody_0	libs/Newton/include/dgConstraint.h	/^	dgBody* m_attachBody_0;$/;"	m	class:dgConstraintInfo
m_attachBody_1	libs/Newton/include/Newton.h	/^		const NewtonBody* m_attachBody_1;$/;"	m	struct:NewtonJointRecord
m_attachBody_1	libs/Newton/include/dgConstraint.h	/^	dgBody* m_attachBody_1;$/;"	m	class:dgConstraintInfo
m_attachMatrix_0	libs/Newton/include/dgConstraint.h	/^	dgMatrix m_attachMatrix_0;$/;"	m	class:dgConstraintInfo
m_attachMatrix_1	libs/Newton/include/dgConstraint.h	/^	dgMatrix m_attachMatrix_1;$/;"	m	class:dgConstraintInfo
m_attachmenMatrix_0	libs/Newton/include/Newton.h	/^		dFloat m_attachmenMatrix_0[4][4];$/;"	m	struct:NewtonJointRecord
m_attachmenMatrix_1	libs/Newton/include/Newton.h	/^		dFloat m_attachmenMatrix_1[4][4];$/;"	m	struct:NewtonJointRecord
m_attrib	libs/Newton/include/dgMeshEffect.h	/^	dgVertexAtribute* m_attrib;$/;"	m	class:dgMeshEffect
m_autoSleep	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_autoSleep				: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_ballConstraint	libs/Newton/include/dgConstraint.h	/^		m_ballConstraint,$/;"	e	enum:dgConstraint::dgConstraintID
m_ballLimits	libs/Newton/include/dgBallConstraint.h	/^		unsigned m_ballLimits;$/;"	m	union:dgBallConstraint::__anon22
m_baseBodyRTTI	libs/Newton/include/dgBody.h	/^		m_baseBodyRTTI = 1<<0,$/;"	e	enum:dgBody::dgRTTI
m_baseMark	libs/Newton/include/dgPolyhedra.h	/^	mutable dgInt32 m_baseMark;$/;"	m	class:dgPolyhedra
m_basePosit	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgVector m_basePosit;$/;"	m	class:dgCollisionDeformableMesh
m_bashCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^		dgInt32 m_bashCount;$/;"	m	class:dgParallelSolverSyncData::dgParallelJointMap
m_beesCount	libs/Newton/include/dgThreadHive.h	/^	dgInt32 m_beesCount;$/;"	m	class:dgThreadHive
m_binary	libs/Newton/include/dgAABBPolygonSoup.h	/^			m_binary = 0,$/;"	e	enum:dgAABBPolygonSoup::dgNode::dgNodeType
m_bodies	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_bodies;$/;"	m	class:dgWorldDynamicUpdate
m_bodiesCollisionOn	libs/Newton/include/Newton.h	/^		int	m_bodiesCollisionOn;$/;"	m	struct:NewtonJointRecord
m_bodiesMemory	libs/Newton/include/dgWorld.h	/^	dgArray<dgUnsigned8> m_bodiesMemory; $/;"	m	class:dgWorld
m_bodiesUniqueID	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_bodiesUniqueID;$/;"	m	class:dgWorld
m_body	libs/Newton/include/dgBodyMasterList.h	/^	dgBody* m_body;$/;"	m	class:dgBodyMasterListRow
m_body	libs/Newton/include/dgBroadPhase.h	/^	dgBody* m_body;$/;"	m	class:dgBroadPhaseBodyNode
m_body	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgBody* m_body;$/;"	m	class:dgBodyInfo
m_body0	libs/Newton/include/dgConstraint.h	/^	dgBody* m_body0;$/;"	m	class:dgConstraint
m_body0	libs/Newton/include/dgContact.h	/^	const dgBody* m_body0;$/;"	m	class:dgContactPoint
m_body1	libs/Newton/include/dgConstraint.h	/^	dgBody* m_body1;$/;"	m	class:dgConstraint
m_body1	libs/Newton/include/dgContact.h	/^	const dgBody* m_body1;$/;"	m	class:dgContactPoint
m_bodyArray	libs/Newton/include/dgWorldDynamicUpdate.h	/^	void* m_bodyArray;$/;"	m	class:dgIslandCallbackStruct
m_bodyCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_bodyCount;$/;"	m	class:dgIsland
m_bodyCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_bodyCount;$/;"	m	class:dgParallelSolverSyncData
m_bodyDamp	libs/Newton/include/dgAmpInstance.h	/^	array<dgAmpJacobian, 1> m_bodyDamp;$/;"	m	class:dgAmpBodyData
m_bodyDampCpu	libs/Newton/include/dgAmpInstance.h	/^	array_view<dgAmpJacobian, 1> m_bodyDampCpu;$/;"	m	class:dgAmpBodyData
m_bodyGroupID	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_bodyGroupID;$/;"	m	class:dgWorld
m_bodyGroupId	libs/Newton/include/dgBody.h	/^	dgInt32 m_bodyGroupId;$/;"	m	class:dgBody
m_bodyInternalForce	libs/Newton/include/dgAmpInstance.h	/^	array<dgAmpJacobian, 1> m_bodyInternalForce;$/;"	m	class:dgAmpBodyData
m_bodyInvInertiaMatrix	libs/Newton/include/dgAmpInstance.h	/^	array<dgAmpMatrix4x4 , 1> m_bodyInvInertiaMatrix;$/;"	m	class:dgAmpBodyData
m_bodyInvMass	libs/Newton/include/dgAmpInstance.h	/^	array<float_4, 1> m_bodyInvMass;$/;"	m	class:dgAmpBodyData
m_bodyInvMassCpu	libs/Newton/include/dgAmpInstance.h	/^	array_view<float_4, 1> m_bodyInvMassCpu;$/;"	m	class:dgAmpBodyData
m_bodyLocks	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32* m_bodyLocks;  $/;"	m	class:dgParallelSolverSyncData
m_bodyMatrix	libs/Newton/include/dgAmpInstance.h	/^	array<dgAmpMatrix4x4 , 1> m_bodyMatrix;$/;"	m	class:dgAmpBodyData
m_bodyMatrixCpu	libs/Newton/include/dgAmpInstance.h	/^	array_view<dgAmpMatrix4x4, 1> m_bodyMatrixCpu;$/;"	m	class:dgAmpBodyData
m_bodyNetForce	libs/Newton/include/dgAmpInstance.h	/^	array<dgAmpJacobian, 1> m_bodyNetForce;$/;"	m	class:dgAmpBodyData
m_bodyNode	libs/Newton/include/dgBodyMasterList.h	/^	dgBody* m_bodyNode;$/;"	m	class:dgBodyMasterListCell
m_bodyStart	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_bodyStart;$/;"	m	class:dgIsland
m_bodyVelocity	libs/Newton/include/dgAmpInstance.h	/^	array<dgAmpJacobian, 1> m_bodyVelocity;$/;"	m	class:dgAmpBodyData
m_bodyVelocityCpu	libs/Newton/include/dgAmpInstance.h	/^	array_view<dgAmpJacobian, 1> m_bodyVelocityCpu;$/;"	m	class:dgAmpBodyData
m_boundingBoxHierachy	libs/Newton/include/dgCollision.h	/^	m_boundingBoxHierachy,$/;"	e	enum:dgCollisionID
m_box	libs/Newton/include/Newton.h	/^			NewtonBoxParam m_box;									$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_box	libs/Newton/include/dgCollision.h	/^		dgBoxData m_box;$/;"	m	union:dgCollisionInfo::__anon21
m_boxCollision	libs/Newton/include/dgCollision.h	/^	m_boxCollision,$/;"	e	enum:dgCollisionID
m_boxDistanceTravel	libs/Newton/include/Newton.h	/^		dFloat m_boxDistanceTravel[4];				\/\/ max distance that box bpxP0 and boxP1 can travel on this timestep, used this for continue collision mode.$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_boxDistanceTravelInMeshSpace	libs/Newton/include/dgCollisionMesh.h	/^	dgVector m_boxDistanceTravelInMeshSpace;$/;"	m	class:dgPolygonMeshDesc
m_boxL0	libs/Newton/include/dgBody.h	/^	dgVector m_boxL0;$/;"	m	struct:dgLineBox
m_boxL1	libs/Newton/include/dgBody.h	/^	dgVector m_boxL1;$/;"	m	struct:dgLineBox
m_boxMaxRadius	libs/Newton/include/dgCollisionCompound.h	/^	dgFloat32 m_boxMaxRadius;$/;"	m	class:dgCollisionCompound
m_boxMaxRadius	libs/Newton/include/dgCollisionConvex.h	/^	dgFloat32 m_boxMaxRadius;$/;"	m	class:dgCollisionConvex
m_boxMinRadius	libs/Newton/include/dgCollisionCompound.h	/^	dgFloat32 m_boxMinRadius;$/;"	m	class:dgCollisionCompound
m_boxMinRadius	libs/Newton/include/dgCollisionConvex.h	/^	dgFloat32 m_boxMinRadius;$/;"	m	class:dgCollisionConvex
m_boxOrigin	libs/Newton/include/dgCollision.h	/^	dgVector m_boxOrigin;$/;"	m	class:dgCollision
m_boxP0	libs/Newton/include/Newton.h	/^		dFloat m_boxP0[4];							\/\/ lower bounding box of intersection query in local space$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_boxP1	libs/Newton/include/Newton.h	/^		dFloat m_boxP1[4];							\/\/ upper bounding box of intersection query in local space$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_boxSize	libs/Newton/include/dgCollision.h	/^	dgVector m_boxSize;$/;"	m	class:dgCollision
m_broadInvPhaseScale	libs/Newton/include/dgBroadPhase.h	/^	static dgVector m_broadInvPhaseScale;$/;"	m	class:dgBroadPhaseNode
m_broadPhase	libs/Newton/include/dgBroadPhaseAggregate.h	/^	dgBroadPhase* m_broadPhase;$/;"	m	class:dgBroadPhaseAggregate
m_broadPhase	libs/Newton/include/dgWorld.h	/^	dgBroadPhase* m_broadPhase; $/;"	m	class:dgWorld
m_broadPhaseNode	libs/Newton/include/dgBody.h	/^	dgBroadPhaseNode* m_broadPhaseNode;$/;"	m	class:dgBody
m_broadPhaseScale	libs/Newton/include/dgBroadPhase.h	/^	static dgVector m_broadPhaseScale;$/;"	m	class:dgBroadPhaseNode
m_broadPhaseaggregateNode	libs/Newton/include/dgBody.h	/^	dgBroadPhaseAggregate* m_broadPhaseaggregateNode;$/;"	m	class:dgBody
m_broadphaseLru	libs/Newton/include/dgContact.h	/^	dgUnsigned32 m_broadphaseLru;$/;"	m	class:dgContact
m_buffer	libs/Newton/include/dgGeneralMatrix.h	/^	T* m_buffer;$/;"	m	class:dgGeneralMatrix
m_builder	libs/Newton/include/dgCollisionBVH.h	/^	dgPolygonSoupDatabaseBuilder* m_builder;$/;"	m	class:dgCollisionBVH
m_bvhCollision	libs/Newton/include/dgCollision.h	/^		dgCollisionBVHData m_bvhCollision;$/;"	m	union:dgCollisionInfo::__anon21
m_cache	libs/Newton/include/dgMemory.h	/^		dgMemoryCacheEntry* m_cache;$/;"	m	class:dgMemoryAllocator::dgMemDirectory
m_callBack	libs/Newton/include/dgUpVectorConstraint.h	/^	dgUpVectorJointCallback m_callBack;$/;"	m	class:dgUpVectorConstraint
m_callback	libs/Newton/include/dgThreadHive.h	/^		dgWorkerThreadTaskCallback m_callback;$/;"	m	class:dgThreadHive::dgThreadJob
m_callerMutex	libs/Newton/include/dgAsyncThread.h	/^	dgSemaphore m_callerMutex;$/;"	m	class:dgAsyncThread
m_callerMutex	libs/Newton/include/dgMutexThread.h	/^	dgSemaphore m_callerMutex;$/;"	m	class:dgMutexThread
m_capsule	libs/Newton/include/Newton.h	/^			NewtonCapsuleParam m_capsule;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_capsule	libs/Newton/include/dgCollision.h	/^		dgCapsuleData m_capsule;$/;"	m	union:dgCollisionInfo::__anon21
m_capsuleCollision	libs/Newton/include/dgCollision.h	/^	m_capsuleCollision,$/;"	e	enum:dgCollisionID
m_cellIndices	libs/Newton/include/dgCollisionHeightField.h	/^	static dgInt32 m_cellIndices[][4];$/;"	m	class:dgCollisionHeightField
m_centerOfMass	libs/Newton/include/dgCollision.h	/^	dgVector m_centerOfMass;	$/;"	m	class:dgCollision
m_centripetal0	libs/Newton/include/dgConstraint.h	/^		dgVector m_centripetal0;$/;"	m	class:dgConstraint::dgPointParam
m_centripetal1	libs/Newton/include/dgConstraint.h	/^		dgVector m_centripetal1;$/;"	m	class:dgConstraint::dgPointParam
m_chamferCylinder	libs/Newton/include/Newton.h	/^			NewtonChamferCylinderParam m_chamferCylinder;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_chamferCylinder	libs/Newton/include/dgCollision.h	/^		dgChamferCylinderData m_chamferCylinder;$/;"	m	union:dgCollisionInfo::__anon21
m_chamferCylinderCollision	libs/Newton/include/dgCollision.h	/^	m_chamferCylinderCollision,$/;"	e	enum:dgCollisionID
m_chidrenCount	libs/Newton/include/Newton.h	/^		int m_chidrenCount;$/;"	m	struct:NewtonCompoundCollisionParam
m_chidrenCount	libs/Newton/include/dgCollision.h	/^		dgInt32 m_chidrenCount;$/;"	m	struct:dgCollisionInfo::dgCoumpountCollisionData
m_child	libs/Newton/include/dgCollision.h	/^		dgCollision* m_child;$/;"	m	struct:dgCollisionInfo::dgConvexModifierData
m_childShape	libs/Newton/include/dgCollisionInstance.h	/^	const dgCollision* m_childShape;$/;"	m	class:dgCollisionInstance
m_childrenProxyCount	libs/Newton/include/Newton.h	/^		int m_childrenProxyCount;$/;"	m	struct:NewtonSceneCollisionParam
m_childrenProxyCount	libs/Newton/include/dgCollision.h	/^		dgInt32 m_childrenProxyCount;$/;"	m	struct:dgCollisionInfo::dgSceneData
m_clip0	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgFloat32 m_clip0;$/;"	m	class:dgCollisionTaperedCapsule
m_clip1	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgFloat32 m_clip1;$/;"	m	class:dgCollisionTaperedCapsule
m_clipRadio0	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgFloat32 m_clipRadio0;$/;"	m	class:dgCollisionTaperedCapsule
m_clipRadio1	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgFloat32 m_clipRadio1;$/;"	m	class:dgCollisionTaperedCapsule
m_clippEdgeNormal	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgInt32 m_clippEdgeNormal[DG_CONVEX_POLYGON_MAX_VERTEX_COUNT];$/;"	m	class:dgCollisionConvexPolygon
m_close	libs/Newton/include/dgBroadPhase.h	/^		m_close,$/;"	e	enum:dgBroadPhase::dgContactCode
m_closestDistance	libs/Newton/include/dgContact.h	/^	dgFloat32 m_closestDistance;$/;"	m	class:dgContact
m_closestFeatureStartIndex	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgInt32 m_closestFeatureStartIndex;$/;"	m	class:dgCollisionConvexPolygon
m_closestFeatureType	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgInt32 m_closestFeatureType;$/;"	m	class:dgCollisionConvexPolygon
m_closestPointBody0	libs/Newton/include/dgContact.h	/^	dgVector m_closestPointBody0;$/;"	m	class:dgCollisionParamProxy
m_closestPointBody1	libs/Newton/include/dgContact.h	/^	dgVector m_closestPointBody1;$/;"	m	class:dgCollisionParamProxy
m_clusterAqqInv	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgMatrix* m_clusterAqqInv; $/;"	m	class:dgCollisionDeformableSolidMesh
m_clusterCom0	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgVector* m_clusterCom0;$/;"	m	class:dgCollisionDeformableSolidMesh
m_clusterMass	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgFloat32* m_clusterMass;$/;"	m	class:dgCollisionDeformableSolidMesh
m_clusterPosit	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgInt32* m_clusterPosit;$/;"	m	class:dgCollisionDeformableSolidMesh
m_clusterPositStart	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgInt32* m_clusterPositStart;$/;"	m	class:dgCollisionDeformableSolidMesh
m_clusterRotationInitialGuess	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgMatrix* m_clusterRotationInitialGuess; $/;"	m	class:dgCollisionDeformableSolidMesh
m_clusterWeight	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgFloat32* m_clusterWeight;$/;"	m	class:dgCollisionDeformableSolidMesh
m_clustersCount	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgInt32 m_clustersCount;$/;"	m	class:dgCollisionDeformableSolidMesh
m_colCount	libs/Newton/include/dgGeneralMatrix.h	/^	dgInt32 m_colCount;$/;"	m	class:dgGeneralMatrix
m_colCount	libs/Newton/include/dgGeneralVector.h	/^	dgInt32 m_colCount;$/;"	m	class:dgGeneralVector
m_collidable	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_collidable				: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_collideCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	OnUserMeshCollideCallback m_collideCallback;$/;"	m	class:dgCollisionUserMesh
m_collideCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	dgCollisionUserMesh::OnUserMeshCollideCallback m_collideCallback;$/;"	m	class:dgUserMeshCreation
m_collideCollisionOn	libs/Newton/include/dgConstraint.h	/^	dgInt32 m_collideCollisionOn;$/;"	m	class:dgConstraintInfo
m_collideWithLinkedBodies	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_collideWithLinkedBodies	: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_collision	libs/Newton/include/dgBody.h	/^	dgCollisionInstance* m_collision;$/;"	m	class:dgBody
m_collision0	libs/Newton/include/dgContact.h	/^	const dgCollisionInstance* m_collision0;$/;"	m	class:dgContactPoint
m_collision1	libs/Newton/include/dgContact.h	/^	const dgCollisionInstance* m_collision1;$/;"	m	class:dgContactPoint
m_collisionEnable	libs/Newton/include/dgContact.h	/^		m_collisionEnable = 1<<0,$/;"	e	enum:dgContactMaterial::__anon15
m_collisionId	libs/Newton/include/dgCollision.h	/^	dgCollisionID m_collisionId;$/;"	m	class:dgCollision
m_collisionMode	libs/Newton/include/dgCollisionInstance.h	/^	dgInt32 m_collisionMode;$/;"	m	class:dgCollisionInstance
m_collisionTree	libs/Newton/include/Newton.h	/^			NewtonCollisionTreeParam m_collisionTree;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_collisionType	libs/Newton/include/Newton.h	/^		int m_collisionType;				\/\/ tag id to identify the collision primitive$/;"	m	struct:NewtonCollisionInfoRecord
m_collisionType	libs/Newton/include/dgCollision.h	/^	dgInt32 m_collisionType;$/;"	m	class:dgCollisionInfo
m_collisionUserID	libs/Newton/include/Newton.h	/^		int m_collisionUserID;				$/;"	m	struct:NewtonCollisionInfoRecord
m_color	libs/Newton/include/dgWorldDynamicUpdate.h	/^		dgInt32 m_color;$/;"	m	class:dgParallelSolverSyncData::dgParallelJointMap
m_columns	libs/Newton/include/dgGeneralVector.h	/^	T* m_columns;$/;"	m	class:dgGeneralVector
m_compoundAABBOverlap	libs/Newton/include/dgContact.h	/^	OnCompoundCollisionPrefilter m_compoundAABBOverlap;$/;"	m	class:dgContactMaterial
m_compoundCollision	libs/Newton/include/Newton.h	/^			NewtonCompoundCollisionParam m_compoundCollision;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_compoundCollision	libs/Newton/include/dgCollision.h	/^		dgCoumpountCollisionData m_compoundCollision;$/;"	m	union:dgCollisionInfo::__anon21
m_compoundCollision	libs/Newton/include/dgCollision.h	/^	m_compoundCollision,$/;"	e	enum:dgCollisionID
m_compoundFracturedCollision	libs/Newton/include/dgCollision.h	/^	m_compoundFracturedCollision,$/;"	e	enum:dgCollisionID
m_cone	libs/Newton/include/Newton.h	/^			NewtonConeParam m_cone;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_cone	libs/Newton/include/dgCollision.h	/^		dgConeData m_cone;$/;"	m	union:dgCollisionInfo::__anon21
m_coneAngle	libs/Newton/include/dgBallConstraint.h	/^	dgFloat32 m_coneAngle;$/;"	m	class:dgBallConstraint
m_coneAngleCos	libs/Newton/include/dgBallConstraint.h	/^	dgFloat32 m_coneAngleCos;$/;"	m	class:dgBallConstraint
m_coneCollision	libs/Newton/include/dgCollision.h	/^	m_coneCollision,$/;"	e	enum:dgCollisionID
m_coneLimit	libs/Newton/include/dgBallConstraint.h	/^			dgUnsigned32 m_coneLimit : 1;$/;"	m	struct:dgBallConstraint::__anon22::__anon23
m_conectivity	libs/Newton/include/dgCollisionCompoundFractured.h	/^	dgConectivityGraph m_conectivity;$/;"	m	class:dgCollisionCompoundFractured
m_conectivityMap	libs/Newton/include/dgCollisionCompoundFractured.h	/^	dgConectivityGraphMap m_conectivityMap;$/;"	m	class:dgCollisionCompoundFractured
m_constraintCount	libs/Newton/include/dgBodyMasterList.h	/^	dgUnsigned32 m_constraintCount;$/;"	m	class:dgBodyMasterList
m_contaID	libs/Newton/include/dgBroadPhase.h	/^	dgInt64  m_contaID;	                \/\/ collision ID at contact point$/;"	m	class:dgConvexCastReturnInfo
m_contacJointLock	libs/Newton/include/dgBroadPhase.h	/^	dgThread::dgCriticalSection m_contacJointLock;$/;"	m	class:dgBroadPhase
m_contact	libs/Newton/include/dgBroadPhase.h	/^		dgContact* m_contact;$/;"	m	class:dgBroadPhase::dgPair
m_contactBuffer	libs/Newton/include/dgBroadPhase.h	/^		dgContactPoint* m_contactBuffer;$/;"	m	class:dgBroadPhase::dgPair
m_contactConstraint	libs/Newton/include/dgConstraint.h	/^		m_contactConstraint,$/;"	e	enum:dgConstraint::dgConstraintID
m_contactCount	libs/Newton/include/dgBodyMasterList.h	/^	dgInt32 m_contactCount;$/;"	m	class:dgBodyMasterListRow
m_contactCountReversal	libs/Newton/include/dgBodyMasterList.h	/^	static dgInt32 m_contactCountReversal[];$/;"	m	class:dgBodyMasterListRow
m_contactID	libs/Newton/include/Newton.h	/^		dLong m_contactID;						\/\/ collision ID at contact point$/;"	m	struct:NewtonWorldConvexCastReturnInfo
m_contactJoint	libs/Newton/include/dgContact.h	/^	dgContact* m_contactJoint;$/;"	m	class:dgCollisionParamProxy
m_contactNode	libs/Newton/include/dgContact.h	/^	dgActiveContacts::dgListNode* m_contactNode;$/;"	m	class:dgContact
m_contactPoint	libs/Newton/include/dgContact.h	/^	OnContactCallback m_contactPoint;$/;"	m	class:dgContactMaterial
m_contactTolerance	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_contactTolerance;$/;"	m	class:dgWorld
m_contacts	libs/Newton/include/dgContact.h	/^	dgContactPoint* m_contacts;$/;"	m	class:dgCollisionParamProxy
m_context0	libs/Newton/include/dgThreadHive.h	/^		void* m_context0;$/;"	m	class:dgThreadHive::dgThreadJob
m_context1	libs/Newton/include/dgThreadHive.h	/^		void* m_context1;$/;"	m	class:dgThreadHive::dgThreadJob
m_continueCollision	libs/Newton/include/dgContact.h	/^	bool m_continueCollision;$/;"	m	class:dgCollisionParamProxy
m_continueCollisionMode	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_continueCollisionMode	: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_convexHull	libs/Newton/include/Newton.h	/^			NewtonConvexHullParam m_convexHull;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_convexHull	libs/Newton/include/dgCollision.h	/^		dgConvexHullData m_convexHull;$/;"	m	union:dgCollisionInfo::__anon21
m_convexHullCollision	libs/Newton/include/dgCollision.h	/^	m_convexHullCollision,$/;"	e	enum:dgCollisionID
m_convexModifierData	libs/Newton/include/dgCollision.h	/^		dgConvexModifierData m_convexModifierData;$/;"	m	union:dgCollisionInfo::__anon21
m_coordenateAccel	libs/Newton/include/dgAmpInstance.h	/^			float m_coordenateAccel;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_coordenateAccel	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_coordenateAccel;$/;"	m	class:dgJacobianMatrixElement
m_corkScrewConstraint	libs/Newton/include/dgConstraint.h	/^		m_corkScrewConstraint,$/;"	e	enum:dgConstraint::dgConstraintID
m_count	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 m_count;$/;"	m	class:dgCollisionCompoundFractured::dgFlatVertexArray
m_count	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgInt32 m_count;$/;"	m	class:dgCollisionConvexPolygon
m_count	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgInt32 m_count;$/;"	m	class:dgCollisionDeformableMesh::dgParticle
m_count	libs/Newton/include/dgConvexHull3d.h	/^	dgInt32 m_count;$/;"	m	class:dgConvexHull3d
m_count	libs/Newton/include/dgConvexHull4d.h	/^	dgInt32 m_count;$/;"	m	class:dgConvexHull4d
m_count	libs/Newton/include/dgList.h	/^	dgInt32 m_count;$/;"	m	class:dgList
m_count	libs/Newton/include/dgMemory.h	/^			dgInt32 m_count;$/;"	m	class:dgMemoryAllocator::dgMemoryBin::dgMemoryBinInfo
m_count	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgInt32 m_count;$/;"	m	class:AdjacentdFaces
m_count	libs/Newton/include/dgTree.h	/^	dgInt32 m_count;$/;"	m	class:dgTree
m_count	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_count;$/;"	m	class:dgIslandCallbackStruct
m_criticalSectionLock	libs/Newton/include/dgBody.h	/^	dgThread::dgCriticalSection m_criticalSectionLock;$/;"	m	class:dgBody
m_criticalSectionLock	libs/Newton/include/dgBroadPhase.h	/^	dgThread::dgCriticalSection m_criticalSectionLock;$/;"	m	class:dgBroadPhase
m_criticalSectionLock	libs/Newton/include/dgCollisionCompound.h	/^	dgThread::dgCriticalSection m_criticalSectionLock;$/;"	m	class:dgCollisionCompound
m_crossAxis	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_crossAxis[9];$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_crossAxisAbs	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_crossAxisAbs[9];$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_crossAxisDotAbs	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_crossAxisDotAbs[9];$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_crossInertia	libs/Newton/include/dgCollision.h	/^	dgVector m_crossInertia;	$/;"	m	class:dgCollision
m_curCount	libs/Newton/include/dgHeap.h	/^	dgInt32 m_curCount;$/;"	m	class:dgHeapBase
m_currentIdleBee	libs/Newton/include/dgThreadHive.h	/^	dgInt32 m_currentIdleBee;$/;"	m	class:dgThreadHive
m_currentRevision	libs/Newton/include/dgTypes.h	/^	m_currentRevision $/;"	e	enum:dgSerializeRevisionNumber
m_currentSize	libs/Newton/include/dgAmpInstance.h	/^	dgInt32 m_currentSize;$/;"	m	class:dgAmpBodyData
m_currentSize	libs/Newton/include/dgAmpInstance.h	/^	dgInt32 m_currentSize;$/;"	m	class:dgAmpConstraintData
m_cylinder	libs/Newton/include/Newton.h	/^			NewtonCylinderParam m_cylinder;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_cylinder	libs/Newton/include/dgCollision.h	/^		dgCylinderData m_cylinder;$/;"	m	union:dgCollisionInfo::__anon21
m_cylinderCollision	libs/Newton/include/dgCollision.h	/^	m_cylinderCollision,$/;"	e	enum:dgCollisionID
m_dampCoef	libs/Newton/include/dgDynamicBody.h	/^	dgVector m_dampCoef;$/;"	m	class:dgDynamicBody
m_damper	libs/Newton/include/Newton.h	/^		dFloat m_damper;$/;"	m	struct:NewtonClothPatchMaterial
m_damper	libs/Newton/include/dgContact.h	/^	dgFloat32 m_damper;$/;"	m	class:dgClothPatchMaterial
m_data	libs/Newton/include/dgAmpInstance.h	/^		dgAmpMatrixRightSide m_data;$/;"	m	class:dgAmpConstraintData::dgAmpJacobianMatrixElement
m_data	libs/Newton/include/dgAmpInstance.h	/^		float m_data[3][4];$/;"	m	union:dgAmpMatrixRightSide::__anon26
m_debugCallback	libs/Newton/include/dgCollisionMesh.h	/^	dgCollisionMeshCollisionCallback m_debugCallback;$/;"	m	class:dgCollisionMesh
m_debugID	libs/Newton/include/dgConvexHull4d.h	/^	dgInt32 m_debugID;$/;"	m	class:dgConvexHull4dTetraherum
m_defaultBroadphase	libs/Newton/include/dgWorld.h	/^		m_defaultBroadphase,$/;"	e	enum:dgWorld::dgBroadPhaseType
m_deformableBody	libs/Newton/include/dgBody.h	/^		m_deformableBody,$/;"	e	enum:dgBody::dgType
m_deformableBodyRTTI	libs/Newton/include/dgBody.h	/^		m_deformableBodyRTTI = 1<<3,$/;"	e	enum:dgBody::dgRTTI
m_deformableClothPatch	libs/Newton/include/dgCollision.h	/^	m_deformableClothPatch,$/;"	e	enum:dgCollisionID
m_deformableCount	libs/Newton/include/dgBodyMasterList.h	/^	dgInt32 m_deformableCount;$/;"	m	class:dgBodyMasterList
m_deformableMesh	libs/Newton/include/Newton.h	/^			NewtonDeformableMeshParam m_deformableMesh;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_deformableMesh	libs/Newton/include/dgCollision.h	/^		dgDeformableMeshData m_deformableMesh;$/;"	m	union:dgCollisionInfo::__anon21
m_deformableSolidMesh	libs/Newton/include/dgCollision.h	/^	m_deformableSolidMesh,$/;"	e	enum:dgCollisionID
m_defualtBodyGroupID	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_defualtBodyGroupID;$/;"	m	class:dgWorld
m_deltaAccel	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_deltaAccel;$/;"	m	class:dgJacobianMatrixElement
m_deltaForce	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_deltaForce;$/;"	m	class:dgJacobianMatrixElement
m_density	libs/Newton/include/dgCollisionCompoundFractured.h	/^	dgFloat32 m_density;$/;"	m	class:dgCollisionCompoundFractured
m_density	libs/Newton/include/dgMemory.h	/^		dgInt32 m_density;$/;"	m	class:dgMemoryAllocator::dgMemoryLeaksTracker
m_description	libs/Newton/include/dgAmpInstance.h	/^		char m_description[128];$/;"	m	class:dgAmpInstance::dgAcceleratorDescription
m_descriptionType	libs/Newton/include/Newton.h	/^		char m_descriptionType[128];$/;"	m	struct:NewtonJointRecord
m_deserializedJointCallback	libs/Newton/include/dgWorld.h	/^	OnJointDeserializationCallback m_deserializedJointCallback;	$/;"	m	class:dgWorld
m_destroyCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	OnUserMeshDestroyCallback m_destroyCallback;$/;"	m	class:dgCollisionUserMesh
m_destroyCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	dgCollisionUserMesh::OnUserMeshDestroyCallback m_destroyCallback;$/;"	m	class:dgUserMeshCreation
m_destructor	libs/Newton/include/NewtonClass.h	/^	NewtonWorldDestructorCallback m_destructor;$/;"	m	class:Newton
m_destructor	libs/Newton/include/dgBilateralConstraint.h	/^	OnConstraintDestroy m_destructor;$/;"	m	class:dgBilateralConstraint
m_destructor	libs/Newton/include/dgBody.h	/^	OnBodyDestroy m_destructor;$/;"	m	class:dgBody
m_destructor	libs/Newton/include/dgSkeletonContainer.h	/^	dgOnSkeletonContainerDestroyCallback m_destructor;$/;"	m	class:dgSkeletonContainer
m_diag	libs/Newton/include/dgConvexHull3d.h	/^	dgFloat64 m_diag;$/;"	m	class:dgConvexHull3d
m_diag	libs/Newton/include/dgConvexHull4d.h	/^	dgFloat64 m_diag;$/;"	m	class:dgConvexHull4d
m_diagDamp	libs/Newton/include/dgAmpInstance.h	/^			float m_diagDamp;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_diagDamp	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_diagDamp;$/;"	m	class:dgJacobianMatrixElement
m_diagonalMode	libs/Newton/include/dgCollisionHeightField.h	/^	dgInt32 m_diagonalMode;$/;"	m	class:dgCollisionHeightField
m_diagonals	libs/Newton/include/dgCollisionHeightField.h	/^	dgInt8* m_diagonals;$/;"	m	class:dgCollisionHeightField
m_dictionary	libs/Newton/include/dgDeformableBodiesUpdate.h	/^	dgTree <dgListNode*, const dgCollisionDeformableMesh*> m_dictionary;$/;"	m	class:dgDeformableBodiesUpdate
m_diff	libs/Newton/include/dgIntersections.h	/^	dgVector m_diff;$/;"	m	class:dgFastRayTest
m_dir0	libs/Newton/include/dgContact.h	/^	dgVector m_dir0;$/;"	m	class:dgContactMaterial
m_dir0_Force	libs/Newton/include/dgContact.h	/^	dgForceImpactPair m_dir0_Force;$/;"	m	class:dgContactMaterial
m_dir1	libs/Newton/include/dgContact.h	/^	dgVector m_dir1;$/;"	m	class:dgContactMaterial
m_dir1_Force	libs/Newton/include/dgContact.h	/^	dgForceImpactPair m_dir1_Force;$/;"	m	class:dgContactMaterial
m_dirError	libs/Newton/include/dgIntersections.h	/^	dgFloat32 m_dirError;$/;"	m	class:dgFastRayTest
m_dirVector	libs/Newton/include/dgCollisionTaperedCylinder.h	/^	dgVector m_dirVector;$/;"	m	class:dgCollisionTaperedCylinder
m_disableBodies	libs/Newton/include/dgBodyMasterList.h	/^	dgTree<int, dgBody*> m_disableBodies;$/;"	m	class:dgBodyMasterList
m_discriptionType	libs/Newton/include/dgConstraint.h	/^	char m_discriptionType[64];$/;"	m	class:dgConstraintInfo
m_dist	libs/Newton/include/dgConvexHull4d.h	/^		dgFloat64 m_dist;$/;"	m	class:dgConvexHull4dTetraherum::dgTetrahedrumPlane
m_dist	libs/Newton/include/dgWorld.h	/^		dgFloat32 m_dist;$/;"	m	class:dgWorld::dgAdressDistPair
m_doContinuesCollisionTest	libs/Newton/include/dgCollisionMesh.h	/^	bool m_doContinuesCollisionTest;$/;"	m	class:dgPolygonMeshDesc
m_dommy	libs/Newton/include/dgTypes.h	/^			dgInt32 m_dommy;$/;"	m	struct:dgFloatSign::__anon5
m_dpBaseInv	libs/Newton/include/dgIntersections.h	/^	dgVector m_dpBaseInv;$/;"	m	class:dgFastRayTest
m_dpInv	libs/Newton/include/dgIntersections.h	/^	dgVector m_dpInv;$/;"	m	class:dgFastRayTest
m_dummy	libs/Newton/include/dgDeformableBody.h	/^	static dgVector m_dummy;$/;"	m	class:dgDeformableBody
m_dummy	libs/Newton/include/dgKinematicBody.h	/^	static dgVector m_dummy;$/;"	m	class:dgKinematicBody
m_dummySum	libs/Newton/include/dgCollisionConvex.h	/^	static dgVector m_dummySum[4];$/;"	m	class:dgCollisionConvex
m_duration	libs/Newton/include/dgThreadProfiler.h	/^		dgUnsigned32 m_duration;$/;"	m	class:dgThreadProfiler::dgEvent
m_dynamicBody	libs/Newton/include/dgBody.h	/^		m_dynamicBody = 0,$/;"	e	enum:dgBody::dgType
m_dynamicBodyRTTI	libs/Newton/include/dgBody.h	/^		m_dynamicBodyRTTI = 1<<1,$/;"	e	enum:dgBody::dgRTTI
m_dynamicFriction0	libs/Newton/include/dgContact.h	/^	dgFloat32 m_dynamicFriction0;$/;"	m	class:dgContactMaterial
m_dynamicFriction1	libs/Newton/include/dgContact.h	/^	dgFloat32 m_dynamicFriction1;$/;"	m	class:dgContactMaterial
m_dynamicsEntropy	libs/Newton/include/dgBroadPhasePersistent.h	/^	dgFloat64 m_dynamicsEntropy;$/;"	m	class:dgBroadPhasePersistent
m_dynamicsFitness	libs/Newton/include/dgBroadPhasePersistent.h	/^	dgFitnessList m_dynamicsFitness;$/;"	m	class:dgBroadPhasePersistent
m_dynamicsLru	libs/Newton/include/dgBody.h	/^	dgUnsigned32 m_dynamicsLru;$/;"	m	class:dgBody
m_dynamicsLru	libs/Newton/include/dgConstraint.h	/^	dgUnsigned32 m_dynamicsLru;$/;"	m	class:dgConstraint
m_dynamicsLru	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_dynamicsLru;$/;"	m	class:dgWorld
m_edgeArray	libs/Newton/include/dgCollisionBox.h	/^	static dgConvexSimplexEdge m_edgeArray[];$/;"	m	class:dgCollisionBox
m_edgeArray	libs/Newton/include/dgCollisionCapsule.h	/^	static dgConvexSimplexEdge m_edgeArray[];$/;"	m	class:dgCollisionCapsule
m_edgeArray	libs/Newton/include/dgCollisionChamferCylinder.h	/^	static dgConvexSimplexEdge m_edgeArray[];$/;"	m	class:dgCollisionChamferCylinder
m_edgeArray	libs/Newton/include/dgCollisionCone.h	/^	static dgConvexSimplexEdge m_edgeArray[];$/;"	m	class:dgCollisionCone
m_edgeArray	libs/Newton/include/dgCollisionCylinder.h	/^	static dgConvexSimplexEdge m_edgeArray[];$/;"	m	class:dgCollisionCylinder
m_edgeArray	libs/Newton/include/dgCollisionSphere.h	/^	static dgConvexSimplexEdge m_edgeArray[];$/;"	m	class:dgCollisionSphere
m_edgeArray	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	static dgConvexSimplexEdge m_edgeArray[];$/;"	m	class:dgCollisionTaperedCapsule
m_edgeArray	libs/Newton/include/dgCollisionTaperedCylinder.h	/^	static dgConvexSimplexEdge m_edgeArray[];$/;"	m	class:dgCollisionTaperedCylinder
m_edgeCount	libs/Newton/include/dgCollisionConvex.h	/^	dgUnsigned16 m_edgeCount;$/;"	m	class:dgCollisionConvex
m_edgeData	libs/Newton/include/dgGraph.h	/^	dgEdgeData m_edgeData;$/;"	m	class:dgGraphEdge
m_edgeEdgeMap	libs/Newton/include/dgCollisionBox.h	/^	static dgConvexSimplexEdge* m_edgeEdgeMap[];$/;"	m	class:dgCollisionBox
m_edgeMap	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgInt64 m_edgeMap[256];$/;"	m	class:AdjacentdFaces
m_edgeMark	libs/Newton/include/dgPolyhedra.h	/^	mutable dgInt32 m_edgeMark;$/;"	m	class:dgPolyhedra
m_elevation	libs/Newton/include/Newton.h	/^		void* m_elevation;$/;"	m	struct:NewtonHeightFieldCollisionParam
m_elevation	libs/Newton/include/dgCollision.h	/^		void* m_elevation;$/;"	m	struct:dgCollisionInfo::dgHeightMapCollisionData
m_elevationDataType	libs/Newton/include/Newton.h	/^		int m_elevationDataType;	\/\/ 0 = 32 bit floats, 1 = unsigned 16 bit integers$/;"	m	struct:NewtonHeightFieldCollisionParam
m_elevationDataType	libs/Newton/include/dgCollision.h	/^		dgInt32 m_elevationDataType;		\/\/ 0 = 32 bit floats, 1 = unsigned 16 bit intergers$/;"	m	struct:dgCollisionInfo::dgHeightMapCollisionData
m_elevationDataType	libs/Newton/include/dgCollisionHeightField.h	/^	dgElevationType m_elevationDataType;$/;"	m	class:dgCollisionHeightField
m_elevationMap	libs/Newton/include/dgCollisionHeightField.h	/^	void* m_elevationMap;$/;"	m	class:dgCollisionHeightField
m_emitFracturedChunk	libs/Newton/include/dgCollisionCompoundFractured.h	/^	OnEmitFractureChunkCallBack m_emitFracturedChunk;$/;"	m	class:dgCollisionCompoundFractured
m_emitFracturedCompound	libs/Newton/include/dgCollisionCompoundFractured.h	/^	OnEmitNewCompundFractureCallBack m_emitFracturedCompound;$/;"	m	class:dgCollisionCompoundFractured
m_emumerator	libs/Newton/include/dgMemory.h	/^	dgInt32 m_emumerator;$/;"	m	class:dgMemoryAllocator
m_endTime	libs/Newton/include/dgThreadProfiler.h	/^	dgUnsigned32 m_endTime;$/;"	m	class:dgThreadProfiler
m_enum	libs/Newton/include/dgMemory.h	/^		dgInt32 m_enum;$/;"	m	class:dgMemoryAllocator::dgMemoryInfo
m_equilibrium	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_equilibrium				: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_equilibriumError2	libs/Newton/include/dgDynamicBody.h	/^	static dgVector m_equilibriumError2;$/;"	m	class:dgDynamicBody
m_eulerTaylorCorrection	libs/Newton/include/dgWorldDynamicUpdate.h	/^	static dgVector m_eulerTaylorCorrection;$/;"	m	class:dgWorldDynamicUpdate
m_events	libs/Newton/include/dgThreadProfiler.h	/^	dgList<dgEvent> m_events;$/;"	m	class:dgThreadProfiler
m_exponent	libs/Newton/include/dgGoogol.h	/^	dgInt32 m_exponent;$/;"	m	class:dgGoogol
m_extendsMaxX	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_extendsMaxX[3];$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_extendsMinX	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_extendsMinX[3];$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_extraParameters	libs/Newton/include/Newton.h	/^		dFloat m_extraParameters[64];$/;"	m	struct:NewtonJointRecord
m_extraParameters	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_extraParameters[64];$/;"	m	class:dgConstraintInfo
m_f	libs/Newton/include/dgVector.h	/^		dgFloat32 m_f[4];$/;"	m	union:dgVector::__anon11
m_fVal	libs/Newton/include/dgTypes.h	/^		dgFloat32 m_fVal;$/;"	m	union:dgFloatSign
m_fVal	libs/Newton/include/dgTypes.h	/^		dgFloat64 m_fVal;$/;"	m	union:dgFloatSign
m_face	libs/Newton/include/dgMeshEffect.h	/^			dgEdge* m_face;$/;"	m	class:dgMeshEffect::dgMeshBVH::dgMeshBVHNode
m_faceArray	libs/Newton/include/dgCollisionConvexHull.h	/^	dgConvexSimplexEdge** m_faceArray;$/;"	m	class:dgCollisionConvexHull
m_faceClipSize	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgFloat32 m_faceClipSize; $/;"	m	class:dgCollisionConvexPolygon
m_faceCount	libs/Newton/include/Newton.h	/^		int	m_faceCount;                        	\/\/ the application should set here how many polygons intersect the query box$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_faceCount	libs/Newton/include/Newton.h	/^		int m_faceCount;$/;"	m	struct:NewtonConvexHullParam
m_faceCount	libs/Newton/include/dgCollision.h	/^		dgInt32 m_faceCount;$/;"	m	struct:dgCollisionInfo::dgConvexHullData
m_faceCount	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 m_faceCount;$/;"	m	class:dgCollisionCompoundFractured::dgSubMesh
m_faceCount	libs/Newton/include/dgCollisionConvexHull.h	/^	dgInt32 m_faceCount;$/;"	m	class:dgCollisionConvexHull
m_faceCount	libs/Newton/include/dgCollisionMesh.h	/^	dgInt32 m_faceCount;$/;"	m	class:dgPolygonMeshDesc
m_faceCount	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgInt32 m_faceCount;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_faceId	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgInt32 m_faceId;$/;"	m	class:dgCollisionConvexPolygon
m_faceInAABBCalback	libs/Newton/include/dgCollisionUserMesh.h	/^	OnUserMeshFacesInAABB m_faceInAABBCalback;$/;"	m	class:dgCollisionUserMesh
m_faceInAABBCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	dgCollisionUserMesh::OnUserMeshFacesInAABB m_faceInAABBCallback;$/;"	m	class:dgUserMeshCreation
m_faceIndexCount	libs/Newton/include/Newton.h	/^		int* m_faceIndexCount;                  	\/\/ the application should set here the pointer to the vertex count of each face.$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_faceIndexCount	libs/Newton/include/dgCollisionMesh.h	/^	dgInt32* m_faceIndexCount;$/;"	m	class:dgPolygonMeshDesc
m_faceIndexStart	libs/Newton/include/dgCollisionMesh.h	/^	dgInt32* m_faceIndexStart;$/;"	m	class:dgPolygonMeshDesc
m_faceNormalIndex	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgInt32 m_faceNormalIndex;$/;"	m	class:dgCollisionConvexPolygon
m_faceNormals	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgVector* m_faceNormals;$/;"	m	class:dgCollisionDeformableMesh
m_faceSecuence	libs/Newton/include/dgPolyhedra.h	/^	mutable dgInt32 m_faceSecuence;$/;"	m	class:dgPolyhedra
m_faceVertexCount	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgIndexArray m_faceVertexCount;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_faceVertexIndex	libs/Newton/include/Newton.h	/^		int* m_faceVertexIndex;                 	\/\/ the application should set here the pointer index array for each vertex on a face.$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_faceVertexIndex	libs/Newton/include/dgCollisionMesh.h	/^	dgInt32* m_faceVertexIndex;$/;"	m	class:dgPolygonMeshDesc
m_faces	libs/Newton/include/dgCollisionBox.h	/^	static dgInt32 m_faces[][4];$/;"	m	class:dgCollisionBox
m_faces	libs/Newton/include/dgConvexHull4d.h	/^	dgTetrahedrumFace m_faces[4];$/;"	m	class:dgConvexHull4dTetraherum
m_first	libs/Newton/include/dgList.h	/^	dgListNode *m_first;$/;"	m	class:dgList
m_first	libs/Newton/include/dgMemory.h	/^		dgMemoryBin* m_first;$/;"	m	class:dgMemoryAllocator::dgMemDirectory
m_firstIndex	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_firstIndex;$/;"	m	class:dgQueue
m_firstPassCoef	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_firstPassCoef;$/;"	m	class:dgParallelSolverSyncData
m_firstPassCoefFlag	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_firstPassCoefFlag;$/;"	m	class:dgJointAccelerationDecriptor
m_firstRevision	libs/Newton/include/dgTypes.h	/^	m_firstRevision = 100,$/;"	e	enum:dgSerializeRevisionNumber
m_fitness	libs/Newton/include/dgBroadPhaseDefault.h	/^	dgFitnessList m_fitness;$/;"	m	class:dgBroadPhaseDefault
m_fitness	libs/Newton/include/dgMeshEffect.h	/^		dgFitnessList m_fitness;$/;"	m	class:dgMeshEffect::dgMeshBVH
m_fitnessList	libs/Newton/include/dgBroadPhaseAggregate.h	/^	dgList<dgBroadPhaseTreeNode*> m_fitnessList;$/;"	m	class:dgBroadPhaseAggregate
m_fitnessNode	libs/Newton/include/dgBroadPhase.h	/^	dgList<dgBroadPhaseTreeNode*>::dgListNode* m_fitnessNode;$/;"	m	class:dgBroadPhaseTreeNode
m_flags	libs/Newton/include/dgBody.h	/^		dgUnsigned32 m_flags;$/;"	m	union:dgBody::__anon19
m_flags	libs/Newton/include/dgContact.h	/^	dgInt32 m_flags;$/;"	m	class:dgContactMaterial
m_float	libs/Newton/include/dgTypes.h	/^	dgFloat64 m_float;$/;"	m	union:dgDoubleInt
m_float32Bit	libs/Newton/include/dgCollisionHeightField.h	/^		m_float32Bit = 0,$/;"	e	enum:dgCollisionHeightField::dgElevationType
m_floatingBody	libs/Newton/include/dgContact.h	/^	dgBody* m_floatingBody;$/;"	m	class:dgCollisionParamProxy
m_floatingCollision	libs/Newton/include/dgContact.h	/^	dgCollisionInstance* m_floatingCollision;$/;"	m	class:dgCollisionParamProxy
m_floatsOp	libs/Newton/include/dgGeneralVector.h	/^	static dgInt32 m_floatsOp;$/;"	m	class:dgGeneralVector
m_floatsOp	libs/Newton/include/dgGeneralVector.h	/^template<class T> dgInt32 dgGeneralVector <T>::m_floatsOp = 0;$/;"	m	class:dgGeneralVector
m_force	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_force;$/;"	m	class:dgForceImpactPair
m_force	libs/Newton/include/dgDeformableBody.h	/^	dgVector m_force;$/;"	m	class:dgDeformableBody
m_force	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_force;$/;"	m	class:dgJacobianMatrixElement
m_forceArray	libs/Newton/include/NewtonClass.h	/^	dgForceImpactPair* m_forceArray;$/;"	m	class:NewtonUserJoint
m_forceBounds	libs/Newton/include/dgConstraint.h	/^	dgBilateralBounds m_forceBounds[DG_CONSTRAINT_MAX_ROWS];$/;"	m	class:dgContraintDescritor
m_free	libs/Newton/include/dgMemory.h	/^	dgMemFree m_free;$/;"	m	class:dgMemoryAllocator
m_freeze	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_freeze					: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_freezeAccel2	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_freezeAccel2;$/;"	m	class:dgWorld
m_freezeAlpha2	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_freezeAlpha2;$/;"	m	class:dgWorld
m_freezeOmega2	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_freezeOmega2;$/;"	m	class:dgWorld
m_freezeSpeed2	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_freezeSpeed2;$/;"	m	class:dgWorld
m_frictiomTheshold	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_frictiomTheshold;$/;"	m	class:dgWorld
m_friction0Enable	libs/Newton/include/dgContact.h	/^		m_friction0Enable = 1<<1,$/;"	e	enum:dgContactMaterial::__anon15
m_friction1Enable	libs/Newton/include/dgContact.h	/^		m_friction1Enable = 1<<2,$/;"	e	enum:dgContactMaterial::__anon15
m_frictionMode	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_frictionMode;$/;"	m	class:dgWorld
m_front	libs/Newton/include/dgMatrix.h	/^	dgVector m_front;$/;"	m	class:dgMatrix
m_generatedBodies	libs/Newton/include/dgBroadPhase.h	/^	dgList<dgBody*> m_generatedBodies;$/;"	m	class:dgBroadPhase
m_genericLRUMark	libs/Newton/include/dgBody.h	/^	dgUnsigned32 m_genericLRUMark;$/;"	m	class:dgBody
m_genericLRUMark	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_genericLRUMark;$/;"	m	class:dgWorld
m_getAABBOvelapTestCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	OnUserMeshAABBOverlapTest m_getAABBOvelapTestCallback;$/;"	m	class:dgCollisionUserMesh
m_getAABBOvelapTestCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	dgCollisionUserMesh::OnUserMeshAABBOverlapTest m_getAABBOvelapTestCallback;$/;"	m	class:dgUserMeshCreation
m_getInfoCallback	libs/Newton/include/NewtonClass.h	/^	NewtonUserBilateralGetInfoCallback m_getInfoCallback;$/;"	m	class:NewtonUserJoint
m_getInfoCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	OnUserMeshCollisionInfo m_getInfoCallback;$/;"	m	class:dgCollisionUserMesh
m_getInfoCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	dgCollisionUserMesh::OnUserMeshCollisionInfo m_getInfoCallback;$/;"	m	class:dgUserMeshCreation
m_global	libs/Newton/include/dgCollisionInstance.h	/^		m_global,$/;"	e	enum:dgCollisionInstance::dgScaleType
m_globalCentreOfMass	libs/Newton/include/dgBody.h	/^	dgVector m_globalCentreOfMass;	$/;"	m	class:dgBody
m_globalCriticalSection	libs/Newton/include/dgThreadHive.h	/^	mutable dgThread::dgCriticalSection m_globalCriticalSection;$/;"	m	class:dgThreadHive
m_globalFaceIndexCount	libs/Newton/include/dgCollisionMesh.h	/^		dgInt32 m_globalFaceIndexCount[DG_MAX_COLLIDING_FACES];$/;"	m	class:dgPolygonMeshDesc::dgMesh
m_globalFaceIndexStart	libs/Newton/include/dgCollisionMesh.h	/^		dgInt32 m_globalFaceIndexStart[DG_MAX_COLLIDING_FACES];$/;"	m	class:dgPolygonMeshDesc::dgMesh
m_globalFaceVertexIndex	libs/Newton/include/dgCollisionMesh.h	/^	dgInt32 m_globalFaceVertexIndex[DG_MAX_COLLIDING_INDICES];$/;"	m	class:dgPolygonMeshDesc
m_globalHitDistance	libs/Newton/include/dgCollisionMesh.h	/^		dgFloat32 m_globalHitDistance[DG_MAX_COLLIDING_FACES];$/;"	m	class:dgPolygonMeshDesc::dgMesh
m_globalIndexCount	libs/Newton/include/dgCollisionMesh.h	/^	dgInt32 m_globalIndexCount;$/;"	m	class:dgPolygonMeshDesc
m_globalMatrix	libs/Newton/include/dgCollisionInstance.h	/^	dgMatrix m_globalMatrix;$/;"	m	class:dgCollisionInstance
m_granulatity	libs/Newton/include/dgArray.h	/^	dgInt32 m_granulatity;$/;"	m	class:dgArray
m_graph	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^	dgSoftBodyEdge* m_graph;$/;"	m	class:dgCollisionDeformableClothPatch
m_graphCount	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^	dgInt32 m_graphCount;$/;"	m	class:dgCollisionDeformableClothPatch
m_gridsDiagonals	libs/Newton/include/Newton.h	/^		int m_gridsDiagonals;$/;"	m	struct:NewtonHeightFieldCollisionParam
m_gridsDiagonals	libs/Newton/include/dgCollision.h	/^		dgInt32 m_gridsDiagonals;$/;"	m	struct:dgCollisionInfo::dgHeightMapCollisionData
m_half	libs/Newton/include/dgGoogol.h	/^	static dgGoogol m_half; $/;"	m	class:dgGoogol
m_half	libs/Newton/include/dgVector.h	/^	static dgVector m_half;$/;"	m	class:dgVector
m_handle	libs/Newton/include/dgThread.h	/^	pthread_t m_handle;$/;"	m	class:dgThread
m_hardwaredIndex	libs/Newton/include/dgWorld.h	/^	dgInt32 m_hardwaredIndex;$/;"	m	class:dgWorld
m_hasJointFeeback	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_hasJointFeeback[DG_MAX_THREADS_HIVE_COUNT];$/;"	m	class:dgParallelSolverSyncData
m_head	libs/Newton/include/dgFastQueue.h	/^    dgInt32 m_head;$/;"	m	class:dgFastQueue
m_head	libs/Newton/include/dgTree.h	/^	dgTreeNode* m_head;$/;"	m	class:dgTree
m_height	libs/Newton/include/Newton.h	/^		dFloat m_height;$/;"	m	struct:NewtonCapsuleParam
m_height	libs/Newton/include/Newton.h	/^		dFloat m_height;$/;"	m	struct:NewtonChamferCylinderParam
m_height	libs/Newton/include/Newton.h	/^		dFloat m_height;$/;"	m	struct:NewtonConeParam
m_height	libs/Newton/include/Newton.h	/^		dFloat m_height;$/;"	m	struct:NewtonCylinderParam
m_height	libs/Newton/include/Newton.h	/^		dFloat m_height;$/;"	m	struct:NewtonTaperedCapsuleParam
m_height	libs/Newton/include/Newton.h	/^		dFloat m_height;$/;"	m	struct:NewtonTaperedCylinderParam
m_height	libs/Newton/include/Newton.h	/^		int m_height;$/;"	m	struct:NewtonHeightFieldCollisionParam
m_height	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_height;$/;"	m	struct:dgCollisionInfo::dgCapsuleData
m_height	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_height;$/;"	m	struct:dgCollisionInfo::dgChamferCylinderData
m_height	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_height;$/;"	m	struct:dgCollisionInfo::dgConeData
m_height	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_height;$/;"	m	struct:dgCollisionInfo::dgCylinderData
m_height	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_height;$/;"	m	struct:dgCollisionInfo::dgTaperedCapsuleData
m_height	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_height;$/;"	m	struct:dgCollisionInfo::dgTaperedCylinderData
m_height	libs/Newton/include/dgCollision.h	/^		dgInt32 m_height;$/;"	m	struct:dgCollisionInfo::dgHeightMapCollisionData
m_height	libs/Newton/include/dgCollisionCapsule.h	/^	dgFloat32 m_height;$/;"	m	class:dgCollisionCapsule
m_height	libs/Newton/include/dgCollisionChamferCylinder.h	/^	dgFloat32 m_height;$/;"	m	class:dgCollisionChamferCylinder
m_height	libs/Newton/include/dgCollisionCone.h	/^	dgFloat32 m_height;$/;"	m	class:dgCollisionCone
m_height	libs/Newton/include/dgCollisionCylinder.h	/^	dgFloat32 m_height;$/;"	m	class:dgCollisionCylinder
m_height	libs/Newton/include/dgCollisionHeightField.h	/^	dgInt32 m_height;$/;"	m	class:dgCollisionHeightField
m_height	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgFloat32 m_height;$/;"	m	class:dgCollisionTaperedCapsule
m_height	libs/Newton/include/dgCollisionTaperedCylinder.h	/^	dgFloat32 m_height;$/;"	m	class:dgCollisionTaperedCylinder
m_heightField	libs/Newton/include/Newton.h	/^			NewtonHeightFieldCollisionParam m_heightField;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_heightField	libs/Newton/include/dgCollision.h	/^	m_heightField,$/;"	e	enum:dgCollisionID
m_heightFieldCollision	libs/Newton/include/dgCollision.h	/^		dgHeightMapCollisionData m_heightFieldCollision;$/;"	m	union:dgCollisionInfo::__anon21
m_hingeConstraint	libs/Newton/include/dgConstraint.h	/^		m_hingeConstraint,$/;"	e	enum:dgConstraint::dgConstraintID
m_hitBody	libs/Newton/include/Newton.h	/^		const NewtonBody* m_hitBody;			\/\/ body hit at contact point$/;"	m	struct:NewtonWorldConvexCastReturnInfo
m_hitBody	libs/Newton/include/dgBroadPhase.h	/^	const dgBody* m_hitBody;				\/\/ body hit at contact point$/;"	m	class:dgConvexCastReturnInfo
m_hitDistance	libs/Newton/include/dgCollisionMesh.h	/^	dgFloat32* m_hitDistance;$/;"	m	class:dgPolygonMeshDesc
m_hive	libs/Newton/include/dgThreadHive.h	/^		dgThreadHive* m_hive;$/;"	m	class:dgThreadHive::dgThreadBee
m_horizonalScale	libs/Newton/include/Newton.h	/^		dFloat m_horizonalScale;$/;"	m	struct:NewtonHeightFieldCollisionParam
m_horizonalScale	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_horizonalScale;$/;"	m	struct:dgCollisionInfo::dgHeightMapCollisionData
m_horizontalEdgeMap	libs/Newton/include/dgCollisionHeightField.h	/^	static dgInt32 m_horizontalEdgeMap[][7];$/;"	m	class:dgCollisionHeightField
m_horizontalScale	libs/Newton/include/dgCollisionHeightField.h	/^	dgFloat32 m_horizontalScale;$/;"	m	class:dgCollisionHeightField
m_horizontalScaleInv	libs/Newton/include/dgCollisionHeightField.h	/^	dgFloat32 m_horizontalScaleInv;$/;"	m	class:dgCollisionHeightField
m_hullDirs	libs/Newton/include/dgCollisionConvex.h	/^	static dgVector m_hullDirs[14]; $/;"	m	class:dgCollisionConvex
m_iVal	libs/Newton/include/dgTypes.h	/^			dgInt32 m_iVal;$/;"	m	struct:dgFloatSign::__anon5
m_iVal	libs/Newton/include/dgTypes.h	/^			dgInt32 m_iVal;$/;"	m	struct:dgFloatSign::__anon6
m_id	libs/Newton/include/dgCollisionBVH.h	/^		dgUnsigned32 m_id;$/;"	m	struct:dgCollisionBVH::dgBVHRay
m_id	libs/Newton/include/dgRef.h	/^	dgUnsigned32 m_id;$/;"	m	class:dgRef
m_id	libs/Newton/include/dgSkeletonContainer.h	/^	dgInt32 m_id;$/;"	m	class:dgSkeletonContainer
m_id	libs/Newton/include/dgThread.h	/^	dgInt32 m_id;$/;"	m	class:dgThread
m_idIndex	libs/Newton/include/dgCollisionCompound.h	/^	dgInt32 m_idIndex;$/;"	m	class:dgCollisionCompound
m_identityMatrix	libs/Newton/include/dgMatrix.h	/^	static dgMatrix m_identityMatrix;$/;"	m	class:dgMatrix
m_impact	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_impact;$/;"	m	class:dgForceImpactPair
m_impulseAbsortionFactor	libs/Newton/include/dgCollisionCompoundFractured.h	/^	dgFloat32 m_impulseAbsortionFactor;$/;"	m	class:dgCollisionCompoundFractured
m_impulseStrengthPerUnitMass	libs/Newton/include/dgCollisionCompoundFractured.h	/^	dgFloat32 m_impulseStrengthPerUnitMass;$/;"	m	class:dgCollisionCompoundFractured
m_inCallback	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_inCallback				: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_inUpdate	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_inUpdate;$/;"	m	class:dgWorld
m_incidentFace	libs/Newton/include/dgPolyhedra.h	/^	dgInt32 m_incidentFace;$/;"	m	class:dgEdge
m_incidentNormal	libs/Newton/include/dgCollisionConvexPolygon.h	/^		dgInt32 m_incidentNormal;$/;"	m	class:dgCollisionConvexPolygon::dgClippedFaceEdge
m_incidentVertex	libs/Newton/include/dgCollisionConvexPolygon.h	/^		dgInt32 m_incidentVertex;$/;"	m	class:dgCollisionConvexPolygon::dgClippedFaceEdge
m_incidentVertex	libs/Newton/include/dgPolyhedra.h	/^	dgInt32 m_incidentVertex;$/;"	m	class:dgEdge
m_index	libs/Newton/include/dgBody.h	/^	dgInt32 m_index;$/;"	m	class:dgBody
m_index	libs/Newton/include/dgConstraint.h	/^	dgUnsigned32 m_index;$/;"	m	class:dgConstraint
m_index	libs/Newton/include/dgConvexHull3d.h	/^	dgInt32 m_index[3]; $/;"	m	class:dgConvexHull3DFace
m_index	libs/Newton/include/dgConvexHull4d.h	/^		dgInt32 m_index[4];$/;"	m	class:dgConvexHull4dTetraherum::dgTetrahedrumFace
m_index	libs/Newton/include/dgConvexHull4d.h	/^	dgInt32 m_index;$/;"	m	class:dgHullVector
m_index	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgInt32 *m_index;$/;"	m	class:AdjacentdFaces
m_indexBox0	libs/Newton/include/dgAABBPolygonSoup.h	/^		dgInt32 m_indexBox0;$/;"	m	class:dgAABBPolygonSoup::dgNode
m_indexBox1	libs/Newton/include/dgAABBPolygonSoup.h	/^		dgInt32 m_indexBox1;$/;"	m	class:dgAABBPolygonSoup::dgNode
m_indexCount	libs/Newton/include/Newton.h	/^		int m_indexCount;$/;"	m	struct:NewtonCollisionTreeParam
m_indexCount	libs/Newton/include/dgAABBPolygonSoup.h	/^	dgInt32 m_indexCount;$/;"	m	class:dgAABBPolygonSoup
m_indexCount	libs/Newton/include/dgCollision.h	/^		dgInt32 m_indexCount;$/;"	m	struct:dgCollisionInfo::dgCollisionBVHData
m_indexCount	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgInt32 m_indexCount;$/;"	m	class:dgCollisionDeformableMesh::dgMeshSegment
m_indexCount	libs/Newton/include/dgMeshEffect.h	/^		dgInt32 m_indexCount;$/;"	m	class:dgMeshEffect::dgIndexArray
m_indexCount	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgInt32 m_indexCount;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_indexList	libs/Newton/include/Newton.h	/^		unsigned short *m_indexList;$/;"	m	struct:NewtonDeformableMeshParam
m_indexList	libs/Newton/include/dgCollision.h	/^		dgUnsigned16* m_indexList;$/;"	m	struct:dgCollisionInfo::dgDeformableMeshData
m_indexList	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgInt32* m_indexList;$/;"	m	class:dgCollisionDeformableMesh::dgMeshSegment
m_indexList	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgInt32* m_indexList;$/;"	m	class:dgCollisionDeformableMesh
m_indexList	libs/Newton/include/dgCollisionMesh.h	/^		dgInt32* m_indexList;$/;"	m	class:dgCollisionMesh::dgMeshVertexListIndexList
m_indexList	libs/Newton/include/dgMeshEffect.h	/^		dgInt32* m_indexList;$/;"	m	class:dgMeshEffect::dgIndexArray
m_indexMark	libs/Newton/include/dgCollisionBox.h	/^	static dgVector m_indexMark;$/;"	m	class:dgCollisionBox
m_indexes	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 *m_indexes;$/;"	m	class:dgCollisionCompoundFractured::dgSubMesh
m_indices	libs/Newton/include/dgAABBPolygonSoup.h	/^	dgInt32* m_indices;$/;"	m	class:dgAABBPolygonSoup
m_inertia	libs/Newton/include/dgCollision.h	/^	dgVector m_inertia;	$/;"	m	class:dgCollision
m_info	libs/Newton/include/dgList.h	/^		T m_info;$/;"	m	class:dgList::dgListNode
m_info	libs/Newton/include/dgMemory.h	/^		dgMemoryBinInfo m_info;$/;"	m	class:dgMemoryAllocator::dgMemoryBin
m_info	libs/Newton/include/dgTree.h	/^		OBJECT m_info;$/;"	m	class:dgTree::dgTreeNode
m_initSimplex	libs/Newton/include/dgCollisionBox.h	/^	static dgInt32 m_initSimplex;$/;"	m	class:dgCollisionBox
m_instanceData	libs/Newton/include/dgCollisionHeightField.h	/^	dgPerIntanceData* m_instanceData;$/;"	m	class:dgCollisionHeightField
m_int	libs/Newton/include/dgTypes.h	/^	dgInt64 m_int;$/;"	m	union:dgDoubleInt
m_intH	libs/Newton/include/dgTypes.h	/^		dgInt32 m_intH;$/;"	m	struct:dgDoubleInt::__anon7
m_intL	libs/Newton/include/dgTypes.h	/^		dgInt32 m_intL;$/;"	m	struct:dgDoubleInt::__anon7
m_integer	libs/Newton/include/dgTypes.h	/^		} m_integer;$/;"	m	union:dgFloatSign	typeref:struct:dgFloatSign::__anon5
m_integer	libs/Newton/include/dgTypes.h	/^		} m_integer;$/;"	m	union:dgFloatSign	typeref:struct:dgFloatSign::__anon6
m_internalForces	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgJacobian* m_internalForces;$/;"	m	class:dgJacobianMemory
m_intersectionTestOnly	libs/Newton/include/dgContact.h	/^	bool m_intersectionTestOnly;$/;"	m	class:dgCollisionParamProxy
m_invDJMinvJt	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_invDJMinvJt;$/;"	m	class:dgJacobianMatrixElement
m_invMass	libs/Newton/include/dgBody.h	/^	dgVector m_invMass;$/;"	m	class:dgBody
m_invScale	libs/Newton/include/dgCollisionInstance.h	/^	dgVector m_invScale;$/;"	m	class:dgCollisionInstance
m_invStepRK	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_invStepRK;$/;"	m	class:dgParallelSolverSyncData
m_invTimeStep	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_invTimeStep;$/;"	m	class:dgJointAccelerationDecriptor
m_invTimestep	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_invTimestep;$/;"	m	class:dgContraintDescritor
m_invTimestep	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_invTimestep;$/;"	m	class:dgParallelSolverSyncData
m_invTimestepRK	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_invTimestepRK;$/;"	m	class:dgParallelSolverSyncData
m_invWorldInertiaMatrix	libs/Newton/include/dgBody.h	/^	dgMatrix m_invWorldInertiaMatrix;$/;"	m	class:dgBody
m_invertedDiagonals	libs/Newton/include/dgCollisionHeightField.h	/^		m_invertedDiagonals,$/;"	e	enum:dgCollisionHeightField::dgCollisionHeightFieldGridConstruction
m_isBusy	libs/Newton/include/dgMutexThread.h	/^	dgInt32 m_isBusy;$/;"	m	class:dgMutexThread
m_isBusy	libs/Newton/include/dgThreadHive.h	/^		dgInt32 m_isBusy;$/;"	m	class:dgThreadHive::dgThreadBee
m_isInDestructionArrayLRU	libs/Newton/include/dgDynamicBody.h	/^	dgUnsigned32 m_isInDestructionArrayLRU;$/;"	m	class:dgDynamicBody
m_isInEquilibrium	libs/Newton/include/dgBroadPhaseAggregate.h	/^	bool m_isInEquilibrium;$/;"	m	class:dgBroadPhaseAggregate
m_isMotor	libs/Newton/include/dgConstraint.h	/^	bool m_isMotor[DG_CONSTRAINT_MAX_ROWS];$/;"	m	class:dgContraintDescritor
m_isParallel	libs/Newton/include/dgIntersections.h	/^	dgVector m_isParallel;$/;"	m	class:dgFastRayTest
m_isSelfCollidable	libs/Newton/include/dgBroadPhaseAggregate.h	/^	bool m_isSelfCollidable;$/;"	m	class:dgBroadPhaseAggregate
m_isVisible	libs/Newton/include/dgCollisionCompoundFractured.h	/^		bool m_isVisible;$/;"	m	class:dgCollisionCompoundFractured::dgMesh
m_isdoubleSided	libs/Newton/include/dgCollisionDeformableMesh.h	/^	bool m_isdoubleSided;$/;"	m	class:dgCollisionDeformableMesh
m_island	libs/Newton/include/dgWorldDynamicUpdate.h	/^	const dgIsland* m_island;$/;"	m	class:dgParallelSolverSyncData
m_islandMemory	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgIsland* m_islandMemory;$/;"	m	class:dgWorldDynamicUpdate
m_islandUpdate	libs/Newton/include/dgWorld.h	/^	OnIslandUpdate m_islandUpdate;$/;"	m	class:dgWorld
m_islands	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_islands;$/;"	m	class:dgWorldDynamicUpdate
m_iw	libs/Newton/include/dgVector.h	/^			dgInt32 m_iw;$/;"	m	struct:dgVector::__anon11::__anon13
m_iw	libs/Newton/include/dgVector.h	/^			dgInt32 m_iw;$/;"	m	struct:dgVector::__anon8::__anon10
m_ix	libs/Newton/include/dgVector.h	/^			dgInt32 m_ix;$/;"	m	struct:dgVector::__anon11::__anon13
m_ix	libs/Newton/include/dgVector.h	/^			dgInt32 m_ix;$/;"	m	struct:dgVector::__anon8::__anon10
m_iy	libs/Newton/include/dgVector.h	/^			dgInt32 m_iy;$/;"	m	struct:dgVector::__anon11::__anon13
m_iy	libs/Newton/include/dgVector.h	/^			dgInt32 m_iy;$/;"	m	struct:dgVector::__anon8::__anon10
m_iz	libs/Newton/include/dgVector.h	/^			dgInt32 m_iz;$/;"	m	struct:dgVector::__anon11::__anon13
m_iz	libs/Newton/include/dgVector.h	/^			dgInt32 m_iz;$/;"	m	struct:dgVector::__anon8::__anon10
m_jacobian	libs/Newton/include/dgConstraint.h	/^	dgJacobianPair m_jacobian[DG_CONSTRAINT_MAX_ROWS];$/;"	m	class:dgContraintDescritor
m_jacobianFnt	libs/Newton/include/NewtonClass.h	/^	NewtonUserBilateralCallback m_jacobianFnt;$/;"	m	class:NewtonUserJoint
m_jacobianM0	libs/Newton/include/dgAmpInstance.h	/^	dgAmpJacobian m_jacobianM0;$/;"	m	class:dgAmpJacobianPair
m_jacobianM0	libs/Newton/include/dgConstraint.h	/^	dgJacobian m_jacobianM0;$/;"	m	class:dgJacobianPair
m_jacobianM1	libs/Newton/include/dgAmpInstance.h	/^	dgAmpJacobian m_jacobianM1;$/;"	m	class:dgAmpJacobianPair
m_jacobianM1	libs/Newton/include/dgConstraint.h	/^	dgJacobian m_jacobianM1;$/;"	m	class:dgJacobianPair
m_jacobianMatrixRowAtomicIndex	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_jacobianMatrixRowAtomicIndex;$/;"	m	class:dgParallelSolverSyncData
m_jobsCriticalSection	libs/Newton/include/dgThreadHive.h	/^	dgThread::dgCriticalSection m_jobsCriticalSection;$/;"	m	class:dgThreadHive
m_jobsPool	libs/Newton/include/dgThreadHive.h	/^	dgFastQueue<dgThreadJob, DG_THREAD_POOL_JOB_SIZE> m_jobsPool;$/;"	m	class:dgThreadHive
m_joint	libs/Newton/include/dgBodyMasterList.h	/^	dgConstraint* m_joint;$/;"	m	class:dgBodyMasterListCell
m_joint	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgConstraint* m_joint;$/;"	m	class:dgJointInfo
m_jointAccel	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_jointAccel[DG_CONSTRAINT_MAX_ROWS];$/;"	m	class:dgContraintDescritor
m_jointAccelFnt	libs/Newton/include/dgCorkscrewConstraint.h	/^	dgCorkscrewJointAcceleration m_jointAccelFnt;$/;"	m	class:dgCorkscrewConstraint
m_jointAccelFnt	libs/Newton/include/dgHingeConstraint.h	/^	dgHingeJointAcceleration m_jointAccelFnt;$/;"	m	class:dgHingeConstraint
m_jointAccelFnt	libs/Newton/include/dgSlidingConstraint.h	/^	dgSlidingJointAcceleration m_jointAccelFnt;$/;"	m	class:dgSlidingConstraint
m_jointAccelFnt	libs/Newton/include/dgUniversalConstraint.h	/^	dgUniversalJointAcceleration m_jointAccelFnt;$/;"	m	class:dgUniversalConstraint
m_jointConflicts	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgParallelJointMap* m_jointConflicts;$/;"	m	class:dgParallelSolverSyncData
m_jointCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_jointCount;$/;"	m	class:dgIsland
m_jointCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_jointCount;$/;"	m	class:dgParallelSolverSyncData
m_jointFeebackForce	libs/Newton/include/dgAmpInstance.h	/^			int m_jointFeebackForce[2];$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_jointFeebackForce	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgForceImpactPair* m_jointFeebackForce;$/;"	m	class:dgJacobianMatrixElement
m_jointForce	libs/Newton/include/dgBilateralConstraint.h	/^	dgForceImpactPair m_jointForce[DG_BILATERAL_CONTRAINT_DOF];$/;"	m	class:dgBilateralConstraint
m_jointForce	libs/Newton/include/dgConstraint.h	/^	dgForceImpactPair* m_jointForce;$/;"	m	class:dgBilateralBounds
m_jointIndex	libs/Newton/include/dgWorldDynamicUpdate.h	/^		dgInt32 m_jointIndex;$/;"	m	class:dgParallelSolverSyncData::dgParallelJointMap
m_jointStart	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_jointStart;$/;"	m	class:dgIsland
m_jointStiffness	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_jointStiffness[DG_CONSTRAINT_MAX_ROWS];$/;"	m	class:dgContraintDescritor
m_jointUserCallback	libs/Newton/include/dgBallConstraint.h	/^	dgBallJointFriction m_jointUserCallback;$/;"	m	class:dgBallConstraint
m_joints	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_joints;$/;"	m	class:dgWorldDynamicUpdate
m_jointsMemory	libs/Newton/include/dgWorld.h	/^	dgArray<dgUnsigned8> m_jointsMemory; $/;"	m	class:dgWorld
m_key	libs/Newton/include/dgHeap.h	/^		KEY m_key;$/;"	m	struct:dgHeapBase::RECORD
m_key	libs/Newton/include/dgPolyhedra.h	/^		dgUnsigned64 m_key;$/;"	m	class:dgPolyhedra::dgPairKey
m_key	libs/Newton/include/dgTree.h	/^		KEY m_key; $/;"	m	class:dgTree::dgTreeNode
m_kinematicBody	libs/Newton/include/dgBody.h	/^		m_kinematicBody,$/;"	e	enum:dgBody::dgType
m_kinematicBodyRTTI	libs/Newton/include/dgBody.h	/^		m_kinematicBodyRTTI = 1<<2,$/;"	e	enum:dgBody::dgRTTI
m_l0	libs/Newton/include/dgBody.h	/^	dgVector m_l0;$/;"	m	struct:dgLineBox
m_l1	libs/Newton/include/dgBody.h	/^	dgVector m_l1;$/;"	m	struct:dgLineBox
m_last	libs/Newton/include/dgList.h	/^	dgListNode *m_last;$/;"	m	class:dgList
m_lastIndex	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_lastIndex;$/;"	m	class:dgQueue
m_lastJointAngle	libs/Newton/include/NewtonClass.h	/^	dgFloat32 m_lastJointAngle;$/;"	m	class:NewtonUserJoint
m_lastPosit0	libs/Newton/include/NewtonClass.h	/^	dgVector m_lastPosit0;$/;"	m	class:NewtonUserJoint
m_lastPosit1	libs/Newton/include/NewtonClass.h	/^	dgVector m_lastPosit1;$/;"	m	class:NewtonUserJoint
m_lateralLimit	libs/Newton/include/dgBallConstraint.h	/^			dgUnsigned32 m_lateralLimit : 1;$/;"	m	struct:dgBallConstraint::__anon22::__anon23
m_leaf	libs/Newton/include/dgAABBPolygonSoup.h	/^			m_leaf,$/;"	e	enum:dgAABBPolygonSoup::dgNode::dgNodeType
m_leaf	libs/Newton/include/dgCollisionCompound.h	/^		m_leaf,$/;"	e	enum:dgCollisionCompound::dgNodeType
m_leakAllocationCounter	libs/Newton/include/dgMemory.h	/^		dgInt32 m_leakAllocationCounter;$/;"	m	class:dgMemoryAllocator::dgMemoryLeaksTracker
m_leaklTracker	libs/Newton/include/dgMemory.h	/^	dgMemoryLeaksTracker m_leaklTracker;$/;"	m	class:dgMemoryAllocator
m_left	libs/Newton/include/dgAABBPolygonSoup.h	/^		dgLeafNodePtr m_left;$/;"	m	class:dgAABBPolygonSoup::dgNode
m_left	libs/Newton/include/dgBroadPhase.h	/^	dgBroadPhaseNode* m_left;$/;"	m	class:dgBroadPhaseTreeNode
m_left	libs/Newton/include/dgCollisionCompound.h	/^		dgNodeBase* m_left;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_left	libs/Newton/include/dgMeshEffect.h	/^			dgMeshBVHNode* m_left;$/;"	m	class:dgMeshEffect::dgMeshBVH::dgMeshBVHNode
m_left	libs/Newton/include/dgTree.h	/^	dgRedBackNode* m_left;$/;"	m	class:dgRedBackNode
m_linear	libs/Newton/include/dgAmpInstance.h	/^	float_4 m_linear;$/;"	m	class:dgAmpJacobian
m_linear	libs/Newton/include/dgConstraint.h	/^	dgVector m_linear;$/;"	m	class:dgJacobian
m_linearContactError2	libs/Newton/include/dgBroadPhase.h	/^	static dgVector m_linearContactError2;$/;"	m	class:dgBroadPhase
m_link0	libs/Newton/include/dgConstraint.h	/^	dgBodyMasterListRow::dgListNode* m_link0;$/;"	m	class:dgConstraint
m_link1	libs/Newton/include/dgConstraint.h	/^	dgBodyMasterListRow::dgListNode* m_link1;$/;"	m	class:dgConstraint
m_linkOrder	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^	dgInt32* m_linkOrder;$/;"	m	class:dgCollisionDeformableClothPatch
m_links	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^	dgClothLink* m_links;$/;"	m	class:dgCollisionDeformableClothPatch
m_linksCount	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^	dgInt32 m_linksCount;$/;"	m	class:dgCollisionDeformableClothPatch
m_list	libs/Newton/include/dgList.h	/^		dgList *m_list;$/;"	m	class:dgList::Iterator
m_localCentreOfMass	libs/Newton/include/dgBody.h	/^	dgVector m_localCentreOfMass;	$/;"	m	class:dgBody
m_localMatrix	libs/Newton/include/dgCollisionInstance.h	/^	dgMatrix m_localMatrix;$/;"	m	class:dgCollisionInstance
m_localMatrix0	libs/Newton/include/dgBilateralConstraint.h	/^	dgMatrix m_localMatrix0;$/;"	m	class:dgBilateralConstraint
m_localMatrix1	libs/Newton/include/dgBilateralConstraint.h	/^	dgMatrix m_localMatrix1;$/;"	m	class:dgBilateralConstraint
m_localP0	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_localP0;$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_localP0	libs/Newton/include/dgCollisionMesh.h	/^	dgVector m_localP0; $/;"	m	class:dgCollisionMeshRayHitDesc
m_localP1	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_localP1;$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_localP1	libs/Newton/include/dgCollisionMesh.h	/^	dgVector m_localP1; $/;"	m	class:dgCollisionMeshRayHitDesc
m_localPoly	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgVector m_localPoly[DG_CONVEX_POLYGON_MAX_VERTEX_COUNT];$/;"	m	class:dgCollisionConvexPolygon
m_localVertex	libs/Newton/include/dgPolygonSoupDatabase.h	/^	dgFloat32* m_localVertex;$/;"	m	class:dgPolygonSoupDatabase
m_lock	libs/Newton/include/dgThread.h	/^		dgInt32 m_lock;$/;"	m	class:dgThread::dgCriticalSection
m_lock	libs/Newton/include/dgThreadHive.h	/^	dgThread::dgCriticalSection* m_lock; $/;"	m	class:dgThreadHiveScopeLock
m_lock	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_lock;$/;"	m	class:dgParallelSolverSyncData
m_low	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_low;$/;"	m	class:dgBilateralBounds
m_lowerBoundFrictionCoefficent	libs/Newton/include/dgAmpInstance.h	/^			float m_lowerBoundFrictionCoefficent;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_lowerBoundFrictionCoefficent	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_lowerBoundFrictionCoefficent;$/;"	m	class:dgJacobianMatrixElement
m_lru	libs/Newton/include/dgBroadPhase.h	/^	dgUnsigned32 m_lru;$/;"	m	class:dgBroadPhase
m_lru	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 m_lru;$/;"	m	class:dgCollisionCompoundFractured::dgDebriNodeInfo
m_lru	libs/Newton/include/dgCollisionCompoundFractured.h	/^	dgInt32 m_lru;$/;"	m	class:dgCollisionCompoundFractured
m_m0	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_m0;$/;"	m	class:dgJointInfo
m_m1	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_m1;$/;"	m	class:dgJointInfo
m_magRayTest	libs/Newton/include/dgIntersections.h	/^	dgFloat32 m_magRayTest;$/;"	m	class:dgFastRayTest
m_malloc	libs/Newton/include/dgMemory.h	/^	dgMemAlloc m_malloc;$/;"	m	class:dgMemoryAllocator
m_mantissa	libs/Newton/include/dgGoogol.h	/^	dgUnsigned64 m_mantissa[DG_GOOGOL_SIZE];$/;"	m	class:dgGoogol
m_mark	libs/Newton/include/dgConvexHull3d.h	/^	dgInt32 m_mark;$/;"	m	class:dgConvexHull3DFace
m_mark	libs/Newton/include/dgConvexHull4d.h	/^	dgInt32 m_mark;$/;"	m	class:dgConvexHull4d
m_mark	libs/Newton/include/dgConvexHull4d.h	/^	dgInt32 m_mark;$/;"	m	class:dgConvexHull4dTetraherum
m_mark	libs/Newton/include/dgConvexHull4d.h	/^	dgInt32 m_mark;$/;"	m	class:dgHullVector
m_mark	libs/Newton/include/dgPolyhedra.h	/^	dgInt32 m_mark;$/;"	m	class:dgEdge
m_markLru	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgUnsigned32 m_markLru;$/;"	m	class:dgWorldDynamicUpdate
m_mask	libs/Newton/include/dgTypes.h	/^	dgInt32 m_mask; $/;"	m	class:dgSetPrecisionDouble
m_mask	libs/Newton/include/dgTypes.h	/^	dgInt32 m_mask;$/;"	m	class:dgFloatExceptions
m_mass	libs/Newton/include/dgBody.h	/^	dgVector m_mass;$/;"	m	class:dgBody
m_masterNode	libs/Newton/include/dgBody.h	/^	dgBodyMasterList::dgListNode* m_masterNode;$/;"	m	class:dgBody
m_material	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 m_material;$/;"	m	class:dgCollisionCompoundFractured::dgSubMesh
m_material	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgInt32 m_material;$/;"	m	class:dgCollisionDeformableMesh::dgMeshSegment
m_material	libs/Newton/include/dgContact.h	/^	const dgContactMaterial* m_material;$/;"	m	class:dgContact
m_material	libs/Newton/include/dgMeshEffect.h	/^		dgFloat64 m_material;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_materialCount	libs/Newton/include/dgCollisionCompoundFractured.h	/^	dgInt32 m_materialCount;$/;"	m	class:dgCollisionCompoundFractured
m_materialCount	libs/Newton/include/dgMeshEffect.h	/^		dgInt32 m_materialCount;$/;"	m	class:dgMeshEffect::dgIndexArray
m_materialOrdinal	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 m_materialOrdinal;$/;"	m	class:dgCollisionCompoundFractured::dgSubMesh
m_materials	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^	dgClothPatchMaterial m_materials[2];$/;"	m	class:dgCollisionDeformableClothPatch
m_materials	libs/Newton/include/dgMeshEffect.h	/^		dgInt32 m_materials[256];$/;"	m	class:dgMeshEffect::dgIndexArray
m_materialsIndexCount	libs/Newton/include/dgMeshEffect.h	/^		dgInt32 m_materialsIndexCount[256];$/;"	m	class:dgMeshEffect::dgIndexArray
m_matrix	libs/Newton/include/dgBody.h	/^	dgMatrix m_matrix;$/;"	m	class:dgBody
m_matrix	libs/Newton/include/dgCollisionBVH.h	/^		dgMatrix m_matrix;$/;"	m	struct:dgCollisionBVH::dgBVHRay
m_matrix	libs/Newton/include/dgCollisionCompound.h	/^		dgMatrix m_matrix;$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_matrix	libs/Newton/include/dgCollisionMesh.h	/^	dgMatrix m_matrix;$/;"	m	class:dgCollisionMeshRayHitDesc
m_matrix	libs/Newton/include/dgContact.h	/^	dgMatrix m_matrix;$/;"	m	class:dgCollisionParamProxy
m_matrixData	libs/Newton/include/dgAmpInstance.h	/^	array<dgAmpJacobianMatrixElement, 1> m_matrixData;$/;"	m	class:dgAmpConstraintData
m_matrixDataCpu	libs/Newton/include/dgAmpInstance.h	/^	array_view<dgAmpJacobianMatrixElement, 1> m_matrixDataCpu;$/;"	m	class:dgAmpConstraintData
m_matrixUpdate	libs/Newton/include/dgBody.h	/^	OnMatrixUpdateCallback m_matrixUpdate;$/;"	m	class:dgBody
m_maxAABB	libs/Newton/include/dgBody.h	/^	dgVector m_maxAABB;$/;"	m	class:dgBody
m_maxAccel	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_maxAccel;$/;"	m	class:dgSolverSleepTherfesholds
m_maxAlpha	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_maxAlpha;$/;"	m	class:dgSolverSleepTherfesholds
m_maxAngularDof	libs/Newton/include/Newton.h	/^		dFloat m_maxAngularDof[3];$/;"	m	struct:NewtonJointRecord
m_maxAngularDof	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_maxAngularDof[3];$/;"	m	class:dgConstraintInfo
m_maxAtribCount	libs/Newton/include/dgMeshEffect.h	/^	dgInt32 m_maxAtribCount;$/;"	m	class:dgMeshEffect
m_maxBox	libs/Newton/include/dgBroadPhase.h	/^	dgVector m_maxBox;$/;"	m	class:dgBroadPhaseNode
m_maxBox	libs/Newton/include/dgCollisionHeightField.h	/^	dgVector m_maxBox;$/;"	m	class:dgCollisionHeightField
m_maxContacts	libs/Newton/include/dgContact.h	/^	dgInt32 m_maxContacts;$/;"	m	class:dgCollisionParamProxy
m_maxCount	libs/Newton/include/dgHeap.h	/^	dgInt32 m_maxCount;$/;"	m	class:dgHeapBase
m_maxFriction	libs/Newton/include/Newton.h	/^		dFloat m_maxFriction;$/;"	m	struct:NewtonHingeSliderUpdateDesc
m_maxFriction	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_maxFriction;$/;"	m	class:dgJointCallbackParam
m_maxImpact	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_maxImpact;$/;"	m	class:dgJacobianMatrixElement
m_maxIndexCount	libs/Newton/include/dgCollisionMesh.h	/^		dgInt32 m_maxIndexCount;$/;"	m	class:dgCollisionMesh::dgMeshVertexListIndexList
m_maxLinearDof	libs/Newton/include/Newton.h	/^		dFloat m_maxLinearDof[3];$/;"	m	struct:NewtonJointRecord
m_maxLinearDof	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_maxLinearDof[3];$/;"	m	class:dgConstraintInfo
m_maxOmega	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_maxOmega;$/;"	m	class:dgSolverSleepTherfesholds
m_maxPasses	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_maxPasses;$/;"	m	class:dgParallelSolverSyncData
m_maxPointCount	libs/Newton/include/dgMeshEffect.h	/^	dgInt32 m_maxPointCount;$/;"	m	class:dgMeshEffect
m_maxScale	libs/Newton/include/dgCollisionInstance.h	/^	dgVector m_maxScale;$/;"	m	class:dgCollisionInstance
m_maxSize	libs/Newton/include/dgArray.h	/^	mutable dgInt32 m_maxSize;$/;"	m	class:dgArray
m_maxT	libs/Newton/include/dgCollisionMesh.h	/^	dgFloat32 m_maxT;$/;"	m	class:dgPolygonMeshDesc
m_maxT	libs/Newton/include/dgIntersections.h	/^	dgVector m_maxT;$/;"	m	class:dgFastRayTest
m_maxTimeStep	libs/Newton/include/NewtonClass.h	/^	dgFloat32 m_maxTimeStep;$/;"	m	class:Newton
m_maxVeloc	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_maxVeloc;$/;"	m	class:dgSolverSleepTherfesholds
m_me	libs/Newton/include/dgCollisionBVH.h	/^		const dgCollisionBVH* m_me;$/;"	m	struct:dgCollisionBVH::dgBVHRay
m_me	libs/Newton/include/dgCollisionMesh.h	/^	const dgCollisionMesh* m_me;$/;"	m	class:dgPolygonMeshDesc
m_me	libs/Newton/include/dgThreadHive.h	/^	const dgThreadHive* m_me;$/;"	m	class:dgThreadHiveScopeLock
m_memory	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgJacobianMatrixElement* m_memory;$/;"	m	class:dgJacobianMemory
m_memoryDirectory	libs/Newton/include/dgMemory.h	/^	dgMemDirectory m_memoryDirectory[DG_MEMORY_BIN_ENTRIES + 1]; $/;"	m	class:dgMemoryAllocator
m_memoryUsed	libs/Newton/include/dgMemory.h	/^	dgInt32 m_memoryUsed;$/;"	m	class:dgMemoryAllocator
m_memoryWrite	libs/Newton/include/dgGeneralVector.h	/^	static dgInt32 m_memoryWrite;$/;"	m	class:dgGeneralVector
m_memoryWrite	libs/Newton/include/dgGeneralVector.h	/^template<class T> dgInt32 dgGeneralVector <T>::m_memoryWrite = 0;$/;"	m	class:dgGeneralVector
m_mesh	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgMesh* m_mesh;$/;"	m	class:dgCollisionCompoundFractured::dgDebriNodeInfo
m_mesh	libs/Newton/include/dgMeshEffect.h	/^		dgMeshEffect* m_mesh;$/;"	m	class:dgMeshEffect::dgMeshBVH
m_meshData	libs/Newton/include/dgCollisionMesh.h	/^	dgMesh m_meshData;$/;"	m	class:dgPolygonMeshDesc
m_minAABB	libs/Newton/include/dgBody.h	/^	dgVector m_minAABB;$/;"	m	class:dgBody
m_minAngularDof	libs/Newton/include/Newton.h	/^		dFloat m_minAngularDof[3];$/;"	m	struct:NewtonJointRecord
m_minAngularDof	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_minAngularDof[3];$/;"	m	class:dgConstraintInfo
m_minBox	libs/Newton/include/dgBroadPhase.h	/^	dgVector m_minBox;$/;"	m	class:dgBroadPhaseNode
m_minBox	libs/Newton/include/dgCollisionHeightField.h	/^	dgVector m_minBox;$/;"	m	class:dgCollisionHeightField
m_minFriction	libs/Newton/include/Newton.h	/^		dFloat m_minFriction;$/;"	m	struct:NewtonHingeSliderUpdateDesc
m_minFriction	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_minFriction;$/;"	m	class:dgJointCallbackParam
m_minLinearDof	libs/Newton/include/Newton.h	/^		dFloat m_minLinearDof[3];$/;"	m	struct:NewtonJointRecord
m_minLinearDof	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_minLinearDof[3];$/;"	m	class:dgConstraintInfo
m_minT	libs/Newton/include/dgIntersections.h	/^	dgVector m_minT;$/;"	m	class:dgFastRayTest
m_mod	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_mod;$/;"	m	class:dgQueue
m_motorAcceleration	libs/Newton/include/dgBilateralConstraint.h	/^	dgFloat32 m_motorAcceleration[DG_BILATERAL_CONTRAINT_DOF];$/;"	m	class:dgBilateralConstraint
m_myAggregateNode	libs/Newton/include/dgBroadPhaseAggregate.h	/^	dgList<dgBroadPhaseAggregate*>::dgListNode* m_myAggregateNode;$/;"	m	class:dgBroadPhaseAggregate
m_myBody	libs/Newton/include/dgCollisionBVH.h	/^		const dgBody* m_myBody;$/;"	m	struct:dgCollisionBVH::dgBVHRay
m_myBody	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgDeformableBody* m_myBody;$/;"	m	class:dgCollisionDeformableMesh
m_myInstance	libs/Newton/include/dgCollisionCompound.h	/^	const dgCollisionInstance* m_myInstance;$/;"	m	class:dgCollisionCompound
m_myMasterThread	libs/Newton/include/dgThreadHive.h	/^	dgThread* m_myMasterThread;$/;"	m	class:dgThreadHive
m_myMutex	libs/Newton/include/dgAsyncThread.h	/^	dgSemaphore m_myMutex;$/;"	m	class:dgAsyncThread
m_myMutex	libs/Newton/include/dgMutexThread.h	/^	dgSemaphore m_myMutex;$/;"	m	class:dgMutexThread
m_myMutex	libs/Newton/include/dgThreadHive.h	/^		dgSemaphore m_myMutex;$/;"	m	class:dgThreadHive::dgThreadBee
m_myMutex	libs/Newton/include/dgThreadHive.h	/^	dgThread::dgSemaphore m_myMutex[DG_MAX_THREADS_HIVE_COUNT];$/;"	m	class:dgThreadHive
m_myNode	libs/Newton/include/dgCollisionCompound.h	/^		dgNodeBase* m_myNode;$/;"	m	class:dgCollisionCompound::dgNodePairs
m_myNode	libs/Newton/include/dgCollisionCompound.h	/^		dgTreeArray::dgTreeNode* m_myNode; $/;"	m	class:dgCollisionCompound::dgNodeBase
m_name	libs/Newton/include/dgThread.h	/^	char m_name[32];$/;"	m	class:dgThread
m_name	libs/Newton/include/dgThreadProfiler.h	/^		char m_name[ DG_PROFILER_EVENT_NAME_SIZE];$/;"	m	class:dgThreadProfiler::dgEvent
m_name	libs/Newton/include/dgWorld.h	/^		char m_name[32];$/;"	m	class:dgWorld::dgListener
m_nameId	libs/Newton/include/dgThread.h	/^				dgInt32 m_nameId;$/;"	m	class:dgThread::dgSemaphore
m_negOne	libs/Newton/include/dgVector.h	/^	static dgVector m_negOne;$/;"	m	class:dgVector
m_netForce	libs/Newton/include/dgBody.h	/^	dgVector m_netForce;$/;"	m	class:dgBody
m_netTorque	libs/Newton/include/dgBody.h	/^	dgVector m_netTorque;$/;"	m	class:dgBody
m_newBodiesNodes	libs/Newton/include/dgBroadPhase.h	/^		dgList<dgBody*>::dgListNode* m_newBodiesNodes;$/;"	m	class:dgBroadPhase::dgBroadphaseSyncDescriptor
m_next	libs/Newton/include/dgCollisionConvex.h	/^	dgConvexSimplexEdge* m_next;$/;"	m	class:dgConvexSimplexEdge
m_next	libs/Newton/include/dgCollisionConvexPolygon.h	/^		dgClippedFaceEdge* m_next;$/;"	m	class:dgCollisionConvexPolygon::dgClippedFaceEdge
m_next	libs/Newton/include/dgList.h	/^		dgListNode *m_next;$/;"	m	class:dgList::dgListNode
m_next	libs/Newton/include/dgMemory.h	/^			dgMemoryBin* m_next;$/;"	m	class:dgMemoryAllocator::dgMemoryBin::dgMemoryBinInfo
m_next	libs/Newton/include/dgMemory.h	/^		dgMemoryCacheEntry* m_next;$/;"	m	class:dgMemoryAllocator::dgMemoryCacheEntry
m_next	libs/Newton/include/dgPolyhedra.h	/^	dgEdge* m_next;$/;"	m	class:dgEdge
m_node	libs/Newton/include/dgAABBPolygonSoup.h	/^				dgUnsigned32 m_node;$/;"	m	union:dgAABBPolygonSoup::dgNode::dgLeafNodePtr::__anon17
m_node	libs/Newton/include/dgCollisionCompound.h	/^		m_node,$/;"	e	enum:dgCollisionCompound::dgNodeType
m_node	libs/Newton/include/dgGraph.h	/^	typename dgGraph<dgNodeData, dgEdgeData>::dgListNode* m_node;$/;"	m	class:dgGraphEdge
m_nodeCount	libs/Newton/include/dgSkeletonContainer.h	/^	dgInt32 m_nodeCount;$/;"	m	class:dgSkeletonContainer
m_nodeData	libs/Newton/include/dgGraph.h	/^	dgNodeData m_nodeData;$/;"	m	class:dgGraphNode
m_nodesCount	libs/Newton/include/dgAABBPolygonSoup.h	/^	dgInt32 m_nodesCount;$/;"	m	class:dgAABBPolygonSoup
m_nodesCount	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgInt32 m_nodesCount;$/;"	m	class:dgCollisionDeformableMesh
m_nodesMemory	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgDeformableNode* m_nodesMemory;$/;"	m	class:dgCollisionDeformableMesh
m_nodesOrder	libs/Newton/include/dgSkeletonContainer.h	/^	dgSkeletonGraph** m_nodesOrder;$/;"	m	class:dgSkeletonContainer
m_nonUniform	libs/Newton/include/dgCollisionInstance.h	/^		m_nonUniform,$/;"	e	enum:dgCollisionInstance::dgScaleType
m_normal	libs/Newton/include/Newton.h	/^		dFloat m_normal[4];						\/\/ surface normal at collision point in global space$/;"	m	struct:NewtonWorldConvexCastReturnInfo
m_normal	libs/Newton/include/dgBroadPhase.h	/^	dgFloat32 m_normal[4];					\/\/ surface normal at collision point in global space$/;"	m	class:dgConvexCastReturnInfo
m_normal	libs/Newton/include/dgCollisionBVH.h	/^		dgVector m_normal;$/;"	m	struct:dgCollisionBVH::dgBVHRay
m_normal	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgFloat32 *m_normal;$/;"	m	class:dgCollisionCompoundFractured::dgVertexBuffer
m_normal	libs/Newton/include/dgCollisionCompoundFractured.h	/^        dgVector m_normal;$/;"	m	class:dgCollisionCompoundFractured::dgSharedNodeMesh
m_normal	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgVector m_normal;$/;"	m	class:dgCollisionConvexPolygon
m_normal	libs/Newton/include/dgCollisionMesh.h	/^	dgVector m_normal;$/;"	m	class:dgCollisionMeshRayHitDesc
m_normal	libs/Newton/include/dgContact.h	/^	dgVector m_normal;$/;"	m	class:dgCollisionParamProxy
m_normal	libs/Newton/include/dgContact.h	/^	dgVector m_normal;$/;"	m	class:dgContactPoint
m_normal	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgPlane m_normal;$/;"	m	class:AdjacentdFaces
m_normalCount	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgInt32 m_normalCount;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_normalDiagonals	libs/Newton/include/dgCollisionHeightField.h	/^		m_normalDiagonals = 0,$/;"	e	enum:dgCollisionHeightField::dgCollisionHeightFieldGridConstruction
m_normalForceIndex	libs/Newton/include/dgAmpInstance.h	/^			int m_normalForceIndex;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_normalForceIndex	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_normalForceIndex;$/;"	m	class:dgJacobianMatrixElement
m_normalIndex	libs/Newton/include/dgConstraint.h	/^	dgInt32 m_normalIndex;$/;"	m	class:dgBilateralBounds
m_normalIndex	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgIndexArray m_normalIndex;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_normalOut	libs/Newton/include/Newton.h	/^		dFloat m_normalOut[4];					\/\/ copy here the normal at the ray intersection$/;"	m	struct:NewtonUserMeshCollisionRayHitDesc
m_normalPoints	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgVertexArray m_normalPoints;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_normal_Force	libs/Newton/include/dgContact.h	/^	dgForceImpactPair m_normal_Force;$/;"	m	class:dgContactMaterial
m_normal_x	libs/Newton/include/dgMeshEffect.h	/^		dgFloat64 m_normal_x;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_normal_y	libs/Newton/include/dgMeshEffect.h	/^		dgFloat64 m_normal_y;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_normal_z	libs/Newton/include/dgMeshEffect.h	/^		dgFloat64 m_normal_z;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_normals	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgFloat32 m_normals[3];$/;"	m	class:dgCollisionDeformableMesh::dgVisualVertexData
m_nullCollision	libs/Newton/include/dgCollision.h	/^	m_nullCollision,					$/;"	e	enum:dgCollisionID
m_obj	libs/Newton/include/dgHeap.h	/^		OBJECT m_obj;$/;"	m	struct:dgHeapBase::RECORD
m_objBody	libs/Newton/include/Newton.h	/^		NewtonBody* m_objBody;                  	\/\/ pointer to the colliding body$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_objBody	libs/Newton/include/dgCollisionMesh.h	/^	dgBody *m_objBody;$/;"	m	class:dgPolygonMeshDesc
m_objCollision	libs/Newton/include/Newton.h	/^		NewtonCollision* m_objCollision;			\/\/ collision shape of the colliding body, (no necessarily the collision of m_objBody)$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_objCollision	libs/Newton/include/dgCollisionMesh.h	/^	dgCollisionInstance* m_objCollision;$/;"	m	class:dgPolygonMeshDesc
m_offsetMatrix	libs/Newton/include/Newton.h	/^		dFloat m_offsetMatrix[4][4];$/;"	m	struct:NewtonCollisionInfoRecord
m_offsetMatrix	libs/Newton/include/dgCollision.h	/^	dgMatrix m_offsetMatrix;$/;"	m	class:dgCollisionInfo
m_omega	libs/Newton/include/dgBody.h	/^	dgVector m_omega;$/;"	m	class:dgBody
m_onBodyDestroy	libs/Newton/include/dgWorld.h	/^		OnListenerBodyDestroyCallback m_onBodyDestroy;$/;"	m	class:dgWorld::dgListener
m_onCollisionInstanceCopyConstrutor	libs/Newton/include/dgWorld.h	/^	OnCollisionInstanceDuplicate m_onCollisionInstanceCopyConstrutor;$/;"	m	class:dgWorld
m_onCollisionInstanceDestruction	libs/Newton/include/dgWorld.h	/^	OnCollisionInstanceDestroy	m_onCollisionInstanceDestruction;$/;"	m	class:dgWorld
m_onDebugDisplay	libs/Newton/include/dgCollisionDeformableMesh.h	/^	mutable dgCollision::OnDebugCollisionMeshCallback m_onDebugDisplay;$/;"	m	class:dgCollisionDeformableMesh
m_onListenerDestroy	libs/Newton/include/dgWorld.h	/^		OnListenerDestroyCallback m_onListenerDestroy;$/;"	m	class:dgWorld::dgListener
m_onListenerUpdate	libs/Newton/include/dgWorld.h	/^		OnListenerUpdateCallback m_onListenerUpdate;$/;"	m	class:dgWorld::dgListener
m_one	libs/Newton/include/dgGoogol.h	/^	static dgGoogol m_one; $/;"	m	class:dgGoogol
m_one	libs/Newton/include/dgVector.h	/^	static dgVector m_one;$/;"	m	class:dgVector
m_openList	libs/Newton/include/dgPathFinder.h	/^	dgPathOpenHeap<NODEID, COST> m_openList;$/;"	m	class:dgPathFinder
m_origin	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_origin;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_origin	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_origin;$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_override0Accel	libs/Newton/include/dgContact.h	/^		m_override0Accel  = 1<<3,$/;"	e	enum:dgContactMaterial::__anon15
m_override1Accel	libs/Newton/include/dgContact.h	/^		m_override1Accel  = 1<<4,$/;"	e	enum:dgContactMaterial::__anon15
m_overrideNormalAccel	libs/Newton/include/dgContact.h	/^		m_overrideNormalAccel = 1<<5,$/;"	e	enum:dgContactMaterial::__anon15
m_ownMemory	libs/Newton/include/dgGeneralMatrix.h	/^	bool m_ownMemory;$/;"	m	class:dgGeneralMatrix
m_ownMemory	libs/Newton/include/dgGeneralVector.h	/^	bool m_ownMemory;$/;"	m	class:dgGeneralVector
m_p0	libs/Newton/include/Newton.h	/^		dFloat m_p0[4];							\/\/ ray origin in collision local space$/;"	m	struct:NewtonUserMeshCollisionRayHitDesc
m_p0	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_p0;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_p0	libs/Newton/include/dgIntersections.h	/^	dgVector m_p0;$/;"	m	class:dgFastAABBInfo
m_p0	libs/Newton/include/dgIntersections.h	/^	dgVector m_p0;$/;"	m	class:dgFastRayTest
m_p0	libs/Newton/include/dgMeshEffect.h	/^			dgVector m_p0;$/;"	m	class:dgMeshEffect::dgMeshBVH::dgMeshBVHNode
m_p1	libs/Newton/include/Newton.h	/^		dFloat m_p1[4];                         \/\/ ray destination in collision local space   $/;"	m	struct:NewtonUserMeshCollisionRayHitDesc
m_p1	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_p1;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_p1	libs/Newton/include/dgIntersections.h	/^	dgVector m_p1;$/;"	m	class:dgFastAABBInfo
m_p1	libs/Newton/include/dgIntersections.h	/^	dgVector m_p1;$/;"	m	class:dgFastRayTest
m_p1	libs/Newton/include/dgMeshEffect.h	/^			dgVector m_p1;$/;"	m	class:dgMeshEffect::dgMeshBVH::dgMeshBVHNode
m_paddedCount	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgInt32 m_paddedCount;$/;"	m	class:dgCollisionConvexPolygon
m_padding	libs/Newton/include/dgCollisionCompound.h	/^	static dgVector m_padding;$/;"	m	class:dgCollisionCompound
m_padding	libs/Newton/include/dgCollisionHeightField.h	/^	static dgVector m_padding;$/;"	m	class:dgCollisionHeightField
m_padding	libs/Newton/include/dgCollisionInstance.h	/^	static dgVector m_padding;$/;"	m	class:dgCollisionInstance
m_pairActiveCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt16 m_pairActiveCount;$/;"	m	class:dgJointInfo
m_pairCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt16 m_pairCount;$/;"	m	class:dgJointInfo
m_pairStart	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_pairStart;$/;"	m	class:dgJointInfo
m_pairsAtomicCounter	libs/Newton/include/dgBroadPhase.h	/^		dgInt32 m_pairsAtomicCounter;$/;"	m	class:dgBroadPhase::dgBroadphaseSyncDescriptor
m_param	libs/Newton/include/NewtonClass.h	/^	dgContraintDescritor* m_param;$/;"	m	class:NewtonUserJoint
m_paramArray	libs/Newton/include/Newton.h	/^			dFloat m_paramArray[64];		    \/\/ user define collision can use this to store information$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_paramArray	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_paramArray[32];$/;"	m	union:dgCollisionInfo::__anon21
m_parent	libs/Newton/include/dgBroadPhase.h	/^	dgBroadPhaseNode* m_parent;$/;"	m	class:dgBroadPhaseNode
m_parent	libs/Newton/include/dgCollisionCompound.h	/^		dgNodeBase* m_parent;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_parent	libs/Newton/include/dgCollisionInstance.h	/^	const dgCollisionInstance* m_parent;$/;"	m	class:dgCollisionInstance
m_parent	libs/Newton/include/dgMeshEffect.h	/^			dgMeshBVHNode* m_parent;$/;"	m	class:dgMeshEffect::dgMeshBVH::dgMeshBVHNode
m_parent	libs/Newton/include/dgTree.h	/^	dgRedBackNode* m_parent;$/;"	m	class:dgRedBackNode
m_particleToEddgeMap	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^	dgSoftBodyEdge** m_particleToEddgeMap;$/;"	m	class:dgCollisionDeformableClothPatch
m_particles	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgParticle m_particles;$/;"	m	class:dgCollisionDeformableMesh
m_passes	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_passes;$/;"	m	class:dgParallelSolverSyncData
m_path	libs/Newton/include/dgAmpInstance.h	/^		char m_path[128];$/;"	m	class:dgAmpInstance::dgAcceleratorDescription
m_penetration	libs/Newton/include/Newton.h	/^		dFloat m_penetration;                   \/\/ contact penetration at collision point$/;"	m	struct:NewtonWorldConvexCastReturnInfo
m_penetration	libs/Newton/include/dgAmpInstance.h	/^			float m_penetration;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_penetration	libs/Newton/include/dgBroadPhase.h	/^	dgFloat32 m_penetration;                \/\/ contact penetration at collision point$/;"	m	class:dgConvexCastReturnInfo
m_penetration	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_penetration[DG_CONSTRAINT_MAX_ROWS];$/;"	m	class:dgContraintDescritor
m_penetration	libs/Newton/include/dgContact.h	/^	dgFloat32 m_penetration;$/;"	m	class:dgContactPoint
m_penetration	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_penetration;$/;"	m	class:dgJacobianMatrixElement
m_penetrationStiffness	libs/Newton/include/dgAmpInstance.h	/^			float m_penetrationStiffness;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_penetrationStiffness	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_penetrationStiffness[DG_CONSTRAINT_MAX_ROWS];$/;"	m	class:dgContraintDescritor
m_penetrationStiffness	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_penetrationStiffness;$/;"	m	class:dgJacobianMatrixElement
m_perInstanceData	libs/Newton/include/dgWorld.h	/^	dgTree<void*, unsigned> m_perInstanceData;$/;"	m	class:dgWorld
m_persist	libs/Newton/include/dgBroadPhase.h	/^		m_persist,$/;"	e	enum:dgBroadPhase::dgContactCode
m_persistentBroadphase	libs/Newton/include/dgWorld.h	/^		m_persistentBroadphase,$/;"	e	enum:dgWorld::dgBroadPhaseType
m_point	libs/Newton/include/Newton.h	/^		dFloat m_point[4];						\/\/ collision point in global space$/;"	m	struct:NewtonWorldConvexCastReturnInfo
m_point	libs/Newton/include/dgBroadPhase.h	/^	dgFloat32 m_point[4];					\/\/ collision point in global space$/;"	m	class:dgConvexCastReturnInfo
m_point	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgFloat32 m_point[10]; \/\/ 3 point, 3 normal. 2 uv0, 2 uv1$/;"	m	class:dgCollisionCompoundFractured::dgFlatVertex
m_point	libs/Newton/include/dgContact.h	/^	dgVector m_point;$/;"	m	class:dgContactPoint
m_pointCollision	libs/Newton/include/dgWorld.h	/^	dgCollisionInstance* m_pointCollision;$/;"	m	class:dgWorld
m_pointCount	libs/Newton/include/dgMeshEffect.h	/^	dgInt32 m_pointCount;$/;"	m	class:dgMeshEffect
m_points	libs/Newton/include/dgConvexHull3d.h	/^	dgArray<dgBigVector> m_points;$/;"	m	class:dgConvexHull3d
m_points	libs/Newton/include/dgConvexHull4d.h	/^	dgArray<dgHullVector> m_points;$/;"	m	class:dgConvexHull4d
m_points	libs/Newton/include/dgMeshEffect.h	/^	dgBigVector* m_points;$/;"	m	class:dgMeshEffect
m_polyMeshData	libs/Newton/include/dgContact.h	/^	dgPolygonMeshDesc* m_polyMeshData;$/;"	m	class:dgCollisionParamProxy
m_polySoupBody	libs/Newton/include/Newton.h	/^		NewtonBody* m_polySoupBody;             	\/\/ pointer to the rigid body owner of this collision tree $/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_polySoupBody	libs/Newton/include/dgCollisionMesh.h	/^	dgBody *m_polySoupBody;$/;"	m	class:dgPolygonMeshDesc
m_polySoupCollision	libs/Newton/include/Newton.h	/^		NewtonCollision* m_polySoupCollision;		\/\/ collision shape of the collision tree, (no necessarily the collision of m_polySoupBody)$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_polySoupCollision	libs/Newton/include/dgCollisionMesh.h	/^	dgCollisionInstance* m_polySoupCollision;$/;"	m	class:dgPolygonMeshDesc
m_polygonCollision	libs/Newton/include/dgCollision.h	/^	m_polygonCollision,$/;"	e	enum:dgCollisionID
m_pool	libs/Newton/include/dgFastQueue.h	/^	T* m_pool;$/;"	m	class:dgFastQueue
m_pool	libs/Newton/include/dgHeap.h	/^	RECORD *m_pool;$/;"	m	class:dgHeapBase
m_pool	libs/Newton/include/dgMemory.h	/^		Pool m_pool[DG_TRACK_MEMORY_LEAKS_ENTRIES];$/;"	m	class:dgMemoryAllocator::dgMemoryLeaksTracker
m_pool	libs/Newton/include/dgMemory.h	/^		char m_pool[DG_MEMORY_BIN_SIZE - sizeof (dgMemoryBinInfo) - DG_MEMORY_GRANULARITY * 2];$/;"	m	class:dgMemoryAllocator::dgMemoryBin
m_pool	libs/Newton/include/dgWorldDynamicUpdate.h	/^	T* m_pool;$/;"	m	class:dgQueue
m_posit	libs/Newton/include/dgCollisionDeformableClothPatch.h	/^	dgVector* m_posit;$/;"	m	class:dgCollisionDeformableClothPatch
m_posit	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgVector* m_posit;$/;"	m	class:dgCollisionDeformableMesh::dgParticle
m_posit	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgVector* m_posit;$/;"	m	class:dgCollisionDeformableSolidMesh
m_posit	libs/Newton/include/dgCorkscrewConstraint.h	/^	dgFloat32 m_posit;$/;"	m	class:dgCorkscrewConstraint
m_posit	libs/Newton/include/dgMatrix.h	/^	dgVector m_posit;$/;"	m	class:dgMatrix
m_posit	libs/Newton/include/dgSlidingConstraint.h	/^	dgFloat32 m_posit;$/;"	m	class:dgSlidingConstraint
m_posit0	libs/Newton/include/dgConstraint.h	/^		dgVector m_posit0;$/;"	m	class:dgConstraint::dgPointParam
m_posit1	libs/Newton/include/dgConstraint.h	/^		dgVector m_posit1;$/;"	m	class:dgConstraint::dgPointParam
m_positAcc	libs/Newton/include/dgContact.h	/^	dgVector m_positAcc;$/;"	m	class:dgContact
m_postListener	libs/Newton/include/dgWorld.h	/^	dgListenerList m_postListener;$/;"	m	class:dgWorld
m_preListener	libs/Newton/include/dgWorld.h	/^	dgListenerList m_preListener;$/;"	m	class:dgWorld
m_prev	libs/Newton/include/dgCollisionConvex.h	/^	dgConvexSimplexEdge* m_prev;$/;"	m	class:dgConvexSimplexEdge
m_prev	libs/Newton/include/dgList.h	/^		dgListNode *m_prev;$/;"	m	class:dgList::dgListNode
m_prev	libs/Newton/include/dgMemory.h	/^			dgMemoryBin* m_prev;$/;"	m	class:dgMemoryAllocator::dgMemoryBin::dgMemoryBinInfo
m_prev	libs/Newton/include/dgMemory.h	/^		dgMemoryCacheEntry* m_prev;$/;"	m	class:dgMemoryAllocator::dgMemoryCacheEntry
m_prev	libs/Newton/include/dgPolyhedra.h	/^	dgEdge* m_prev;$/;"	m	class:dgEdge
m_prevExternalForce	libs/Newton/include/dgDynamicBody.h	/^	dgVector m_prevExternalForce;$/;"	m	class:dgDynamicBody
m_prevExternalTorque	libs/Newton/include/dgDynamicBody.h	/^	dgVector m_prevExternalTorque;$/;"	m	class:dgDynamicBody
m_principalAxis	libs/Newton/include/dgDynamicBody.h	/^	dgMatrix m_principalAxis;$/;"	m	class:dgDynamicBody
m_priority	libs/Newton/include/dgConstraint.h	/^	dgInt32 m_priority;$/;"	m	class:dgConstraint
m_priorityOrder	libs/Newton/include/dgCollisionConvex.h	/^	static dgCollisionPriority m_priorityOrder;$/;"	m	class:dgCollisionConvex
m_profile	libs/Newton/include/dgCollisionCylinder.h	/^	dgVector m_profile[4];$/;"	m	class:dgCollisionCylinder
m_ptr	libs/Newton/include/dgList.h	/^		dgListNode *m_ptr;$/;"	m	class:dgList::Iterator
m_ptr	libs/Newton/include/dgMemory.h	/^			void* m_ptr;$/;"	m	class:dgMemoryAllocator::dgMemoryLeaksTracker::Pool
m_ptr	libs/Newton/include/dgMemory.h	/^		void *m_ptr;$/;"	m	class:dgMemoryAllocator::dgMemoryInfo
m_ptr	libs/Newton/include/dgStack.h	/^	const void *m_ptr;$/;"	m	class:dgStackBase
m_ptr	libs/Newton/include/dgTree.h	/^		dgRedBackNode* m_ptr;$/;"	m	class:dgTree::Iterator
m_ptr	libs/Newton/include/dgTypes.h	/^	void* m_ptr;$/;"	m	union:dgDoubleInt
m_q0	libs/Newton/include/dgQuaternion.h	/^	dgFloat32 m_q0;$/;"	m	class:dgQuaternion
m_q1	libs/Newton/include/dgQuaternion.h	/^	dgFloat32 m_q1;$/;"	m	class:dgQuaternion
m_q2	libs/Newton/include/dgQuaternion.h	/^	dgFloat32 m_q2;$/;"	m	class:dgQuaternion
m_q3	libs/Newton/include/dgQuaternion.h	/^	dgFloat32 m_q3;$/;"	m	class:dgQuaternion
m_r	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_r;$/;"	m	struct:dgCollisionInfo::dgChamferCylinderData
m_r	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_r;$/;"	m	struct:dgCollisionInfo::dgConeData
m_r0	libs/Newton/include/dgConstraint.h	/^		dgVector m_r0;$/;"	m	class:dgConstraint::dgPointParam
m_r1	libs/Newton/include/dgConstraint.h	/^		dgVector m_r1;$/;"	m	class:dgConstraint::dgPointParam
m_radio	libs/Newton/include/Newton.h	/^		dFloat m_radio;$/;"	m	struct:NewtonCapsuleParam
m_radio	libs/Newton/include/Newton.h	/^		dFloat m_radio;$/;"	m	struct:NewtonChamferCylinderParam
m_radio	libs/Newton/include/Newton.h	/^		dFloat m_radio;$/;"	m	struct:NewtonConeParam
m_radio	libs/Newton/include/Newton.h	/^		dFloat m_radio;$/;"	m	struct:NewtonCylinderParam
m_radio	libs/Newton/include/Newton.h	/^		dFloat m_radio;$/;"	m	struct:NewtonSphereParam
m_radio	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_radio;$/;"	m	struct:dgCollisionInfo::dgCapsuleData
m_radio0	libs/Newton/include/Newton.h	/^		dFloat m_radio0;$/;"	m	struct:NewtonTaperedCapsuleParam
m_radio0	libs/Newton/include/Newton.h	/^		dFloat m_radio0;$/;"	m	struct:NewtonTaperedCylinderParam
m_radio0	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_radio0;$/;"	m	struct:dgCollisionInfo::dgTaperedCapsuleData
m_radio0	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_radio0;$/;"	m	struct:dgCollisionInfo::dgTaperedCylinderData
m_radio0	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgFloat32 m_radio0;$/;"	m	class:dgCollisionTaperedCapsule
m_radio0	libs/Newton/include/dgCollisionTaperedCylinder.h	/^	dgFloat32 m_radio0;$/;"	m	class:dgCollisionTaperedCylinder
m_radio1	libs/Newton/include/Newton.h	/^		dFloat m_radio1;$/;"	m	struct:NewtonTaperedCapsuleParam
m_radio1	libs/Newton/include/Newton.h	/^		dFloat m_radio1;$/;"	m	struct:NewtonTaperedCylinderParam
m_radio1	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_radio1;$/;"	m	struct:dgCollisionInfo::dgTaperedCapsuleData
m_radio1	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_radio1;$/;"	m	struct:dgCollisionInfo::dgTaperedCylinderData
m_radio1	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgFloat32 m_radio1;$/;"	m	class:dgCollisionTaperedCapsule
m_radio1	libs/Newton/include/dgCollisionTaperedCylinder.h	/^	dgFloat32 m_radio1;$/;"	m	class:dgCollisionTaperedCylinder
m_radius	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_radius;$/;"	m	struct:dgCollisionInfo::dgCylinderData
m_radius	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_radius;$/;"	m	struct:dgCollisionInfo::dgSphereData
m_radius	libs/Newton/include/dgCollisionCapsule.h	/^	dgFloat32 m_radius;$/;"	m	class:dgCollisionCapsule
m_radius	libs/Newton/include/dgCollisionChamferCylinder.h	/^	dgFloat32 m_radius;$/;"	m	class:dgCollisionChamferCylinder
m_radius	libs/Newton/include/dgCollisionCone.h	/^	dgFloat32 m_radius;$/;"	m	class:dgCollisionCone
m_radius	libs/Newton/include/dgCollisionCylinder.h	/^	dgFloat32 m_radius;$/;"	m	class:dgCollisionCylinder
m_radius	libs/Newton/include/dgCollisionSphere.h	/^	dgFloat32 m_radius;$/;"	m	class:dgCollisionSphere
m_rayCastSimplex	libs/Newton/include/dgCollisionConvex.h	/^	static dgInt32 m_rayCastSimplex[4][4];$/;"	m	class:dgCollisionConvex
m_rayHitCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	OnUserMeshRayHitCallback m_rayHitCallback;$/;"	m	class:dgCollisionUserMesh
m_rayHitCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	dgCollisionUserMesh::OnUserMeshRayHitCallback m_rayHitCallback;$/;"	m	class:dgUserMeshCreation
m_reconstructMainMesh	libs/Newton/include/dgCollisionCompoundFractured.h	/^	OnReconstructFractureMainMeshCallBack m_reconstructMainMesh;$/;"	m	class:dgCollisionCompoundFractured
m_recursiveChunks	libs/Newton/include/dgBroadPhase.h	/^	bool m_recursiveChunks;$/;"	m	class:dgBroadPhase
m_ref	libs/Newton/include/dgRef.h	/^	dgUnsigned32 m_ref;$/;"	m	struct:dgRefFlags
m_refCount	libs/Newton/include/dgCollision.h	/^	mutable dgInt32 m_refCount;$/;"	m	class:dgCollision
m_refCount	libs/Newton/include/dgCollisionHeightField.h	/^		dgInt32 m_refCount;$/;"	m	class:dgCollisionHeightField::dgPerIntanceData
m_refCount	libs/Newton/include/dgCollisionInstance.h	/^	dgInt32 m_refCount;$/;"	m	class:dgCollisionInstance
m_refCount	libs/Newton/include/dgRefCounter.h	/^	int m_refCount;$/;"	m	class:dgRefCounter
m_referenceBody	libs/Newton/include/dgContact.h	/^	dgBody* m_referenceBody;$/;"	m	class:dgCollisionParamProxy
m_referenceCollision	libs/Newton/include/dgContact.h	/^	dgCollisionInstance* m_referenceCollision;$/;"	m	class:dgCollisionParamProxy
m_resting	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_resting					: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_restitution	libs/Newton/include/dgAmpInstance.h	/^			float m_restitution;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_restitution	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_restitution[DG_CONSTRAINT_MAX_ROWS];$/;"	m	class:dgContraintDescritor
m_restitution	libs/Newton/include/dgContact.h	/^	dgFloat32 m_restitution;$/;"	m	class:dgContactMaterial
m_restitution	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_restitution;$/;"	m	class:dgJacobianMatrixElement
m_right	libs/Newton/include/dgAABBPolygonSoup.h	/^		dgLeafNodePtr m_right;$/;"	m	class:dgAABBPolygonSoup::dgNode
m_right	libs/Newton/include/dgBroadPhase.h	/^	dgBroadPhaseNode* m_right;$/;"	m	class:dgBroadPhaseTreeNode
m_right	libs/Newton/include/dgCollisionCompound.h	/^		dgNodeBase* m_right;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_right	libs/Newton/include/dgMatrix.h	/^	dgVector m_right;$/;"	m	class:dgMatrix
m_right	libs/Newton/include/dgMeshEffect.h	/^			dgMeshBVHNode* m_right;$/;"	m	class:dgMeshEffect::dgMeshBVH::dgMeshBVHNode
m_right	libs/Newton/include/dgTree.h	/^	dgRedBackNode* m_right;$/;"	m	class:dgRedBackNode
m_root	libs/Newton/include/dgBroadPhaseAggregate.h	/^	dgBroadPhaseNode* m_root;$/;"	m	class:dgBroadPhaseAggregate
m_root	libs/Newton/include/dgCollisionCompound.h	/^	dgNodeBase* m_root;$/;"	m	class:dgCollisionCompound
m_rootNode	libs/Newton/include/dgBroadPhase.h	/^	dgBroadPhaseNode* m_rootNode;$/;"	m	class:dgBroadPhase
m_rootNode	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgDeformableNode* m_rootNode;$/;"	m	class:dgCollisionDeformableMesh
m_rootNode	libs/Newton/include/dgMeshEffect.h	/^		dgMeshBVHNode* m_rootNode;$/;"	m	class:dgMeshEffect::dgMeshBVH
m_rotation	libs/Newton/include/dgBody.h	/^	dgQuaternion m_rotation;$/;"	m	class:dgBody
m_rotationAcc	libs/Newton/include/dgContact.h	/^	dgQuaternion m_rotationAcc;$/;"	m	class:dgContact
m_row	libs/Newton/include/dgAmpInstance.h	/^	float_4 m_row[4];$/;"	m	class:dgAmpMatrix4x4
m_rowCount	libs/Newton/include/dgGeneralMatrix.h	/^	dgInt32 m_rowCount;$/;"	m	class:dgGeneralMatrix
m_rowCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_rowCount;$/;"	m	class:dgParallelSolverSyncData
m_rowIsMotor	libs/Newton/include/dgBilateralConstraint.h	/^	dgInt32	  m_rowIsMotor[DG_BILATERAL_CONTRAINT_DOF];$/;"	m	class:dgBilateralConstraint
m_rowMatrix	libs/Newton/include/dgConstraint.h	/^	dgJacobianMatrixElement *m_rowMatrix;$/;"	m	class:dgJointAccelerationDecriptor
m_rows	libs/Newton/include/NewtonClass.h	/^	dgInt32 m_rows;$/;"	m	class:NewtonUserJoint
m_rows	libs/Newton/include/dgGeneralMatrix.h	/^	dgGeneralVector<T>* m_rows;$/;"	m	class:dgGeneralMatrix
m_rowsCount	libs/Newton/include/dgConstraint.h	/^	dgInt32 m_rowsCount;$/;"	m	class:dgJointAccelerationDecriptor
m_rowsCount	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_rowsCount;$/;"	m	class:dgIsland
m_rowsStart	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_rowsStart;$/;"	m	class:dgIsland
m_rtti	libs/Newton/include/dgBody.h	/^	dgInt32 m_rtti;$/;"	m	class:dgBody
m_rtti	libs/Newton/include/dgCollision.h	/^	dgInt32 m_rtti;$/;"	m	class:dgCollision
m_rtti	libs/Newton/include/dgRef.h	/^	static dgRtti m_rtti;$/;"	m	class:dgRef
m_run	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgInt32 m_run;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_savetimestep	libs/Newton/include/dgWorld.h	/^	dgFloat32 m_savetimestep;$/;"	m	class:dgWorld
m_scale	libs/Newton/include/dgCollisionInstance.h	/^	dgVector m_scale;$/;"	m	class:dgCollisionInstance
m_scaleType	libs/Newton/include/dgCollisionInstance.h	/^	dgScaleType m_scaleType;$/;"	m	class:dgCollisionInstance
m_sceneCollision	libs/Newton/include/Newton.h	/^			NewtonSceneCollisionParam m_sceneCollision;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_sceneCollision	libs/Newton/include/dgCollision.h	/^		dgSceneData m_sceneCollision;$/;"	m	union:dgCollisionInfo::__anon21
m_sceneCollision	libs/Newton/include/dgCollision.h	/^	m_sceneCollision,$/;"	e	enum:dgCollisionID
m_sem	libs/Newton/include/dgThread.h	/^				sem_t m_sem;$/;"	m	class:dgThread::dgSemaphore
m_sem	libs/Newton/include/dgThread.h	/^				sem_t* m_sem;$/;"	m	class:dgThread::dgSemaphore
m_sem	libs/Newton/include/dgThread.h	/^			dgInt32 m_sem;$/;"	m	class:dgThread::dgSemaphore
m_sentinelBody	libs/Newton/include/dgWorld.h	/^	dgDynamicBody* m_sentinelBody;$/;"	m	class:dgWorld
m_separated	libs/Newton/include/dgBroadPhase.h	/^		m_separated,$/;"	e	enum:dgBroadPhase::dgContactCode
m_separtingVector	libs/Newton/include/dgContact.h	/^	dgVector m_separtingVector;$/;"	m	class:dgContact
m_serializeCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	OnUserMeshSerialize m_serializeCallback;$/;"	m	class:dgCollisionUserMesh
m_serializeCallback	libs/Newton/include/dgCollisionUserMesh.h	/^	dgCollisionUserMesh::OnUserMeshSerialize m_serializeCallback;$/;"	m	class:dgUserMeshCreation
m_serializedJointCallback	libs/Newton/include/dgWorld.h	/^	OnJointSerializationCallback m_serializedJointCallback;	$/;"	m	class:dgWorld
m_shape	libs/Newton/include/dgCollisionCompound.h	/^		dgCollisionInstance* m_shape;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_shapeFaceID	libs/Newton/include/dgContact.h	/^	dgUnsigned64 m_shapeFaceID;$/;"	m	class:dgCollisionParamProxy
m_shapeId0	libs/Newton/include/dgContact.h	/^	dgInt64 m_shapeId0;$/;"	m	class:dgContactPoint
m_shapeId1	libs/Newton/include/dgContact.h	/^	dgInt64 m_shapeId1;$/;"	m	class:dgContactPoint
m_shapeNode	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgTreeArray::dgTreeNode* m_shapeNode;$/;"	m	class:dgCollisionCompoundFractured::dgDebriNodeInfo
m_shapePosit	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgVector* m_shapePosit;$/;"	m	class:dgCollisionDeformableSolidMesh
m_shapeRefCount	libs/Newton/include/dgCollisionCapsule.h	/^	static dgInt32 m_shapeRefCount;$/;"	m	class:dgCollisionCapsule
m_shapeRefCount	libs/Newton/include/dgCollisionChamferCylinder.h	/^	static dgInt32 m_shapeRefCount;$/;"	m	class:dgCollisionChamferCylinder
m_shapeRefCount	libs/Newton/include/dgCollisionCone.h	/^	static dgInt32 m_shapeRefCount;$/;"	m	class:dgCollisionCone
m_shapeRefCount	libs/Newton/include/dgCollisionCylinder.h	/^	static dgInt32 m_shapeRefCount;$/;"	m	class:dgCollisionCylinder
m_shapeRefCount	libs/Newton/include/dgCollisionSphere.h	/^	static dgInt32 m_shapeRefCount;$/;"	m	class:dgCollisionSphere
m_shapeRefCount	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	static dgInt32 m_shapeRefCount;$/;"	m	class:dgCollisionTaperedCapsule
m_shapeRefCount	libs/Newton/include/dgCollisionTaperedCylinder.h	/^	static dgInt32 m_shapeRefCount;$/;"	m	class:dgCollisionTaperedCylinder
m_shapesDirs	libs/Newton/include/dgCollisionChamferCylinder.h	/^	static dgVector m_shapesDirs[];$/;"	m	class:dgCollisionChamferCylinder
m_sideNormal	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgVector m_sideNormal;$/;"	m	class:dgCollisionTaperedCapsule
m_sign	libs/Newton/include/dgGoogol.h	/^	dgInt32 m_sign;$/;"	m	class:dgGoogol
m_signMask	libs/Newton/include/dgVector.h	/^	static dgVector m_signMask;$/;"	m	class:dgVector
m_signature	libs/Newton/include/dgCollision.h	/^	dgUnsigned32 m_signature;$/;"	m	class:dgCollision
m_simplex	libs/Newton/include/dgCollisionConvex.h	/^	dgConvexSimplexEdge* m_simplex;$/;"	m	class:dgCollisionConvex
m_simplexVolume	libs/Newton/include/dgCollisionConvex.h	/^	dgFloat32 m_simplexVolume;$/;"	m	class:dgCollisionConvex
m_sinAngle	libs/Newton/include/dgCollisionCone.h	/^	dgFloat32 m_sinAngle;$/;"	m	class:dgCollisionCone
m_size	libs/Newton/include/dgCollisionBox.h	/^	dgVector m_size[2];$/;"	m	class:dgCollisionBox
m_size	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_size;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_size	libs/Newton/include/dgCollisionCompound.h	/^		dgVector m_size;$/;"	m	class:dgCollisionCompound::dgOOBBTestData
m_size	libs/Newton/include/dgMemory.h	/^			dgInt32 m_size;$/;"	m	class:dgMemoryAllocator::dgMemoryLeaksTracker::Pool
m_size	libs/Newton/include/dgMemory.h	/^		dgInt32 m_size;$/;"	m	class:dgMemoryAllocator::dgMemoryInfo
m_size	libs/Newton/include/dgObb.h	/^	dgVector m_size;$/;"	m	class:dgObb
m_size	libs/Newton/include/dgStack.h	/^	dgInt32 m_size;$/;"	m	class:dgStack
m_skeleton	libs/Newton/include/dgSkeletonContainer.h	/^	dgSkeletonGraph* m_skeleton;$/;"	m	class:dgSkeletonContainer
m_skinThickness	libs/Newton/include/Newton.h	/^		dFloat m_skinThickness;                     \/\/ this is the minimum skin separation specified by the material between these two colliding shapes$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_skinThickness	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgFloat32 m_skinThickness;$/;"	m	class:dgCollisionDeformableMesh
m_skinThickness	libs/Newton/include/dgCollisionMesh.h	/^	dgFloat32 m_skinThickness;$/;"	m	class:dgPolygonMeshDesc
m_skinThickness	libs/Newton/include/dgContact.h	/^	dgFloat32 m_skinThickness;$/;"	m	class:dgCollisionParamProxy
m_skinThickness	libs/Newton/include/dgContact.h	/^	dgFloat32 m_skinThickness;$/;"	m	class:dgContactMaterial
m_skinthickness	libs/Newton/include/dgCollisionCylinder.h	/^	dgFloat32 m_skinthickness;$/;"	m	class:dgCollisionCylinder
m_skinthickness	libs/Newton/include/dgCollisionTaperedCylinder.h	/^	dgFloat32 m_skinthickness;$/;"	m	class:dgCollisionTaperedCylinder
m_sleepTable	libs/Newton/include/dgWorld.h	/^	dgSolverSleepTherfesholds m_sleepTable[DG_SLEEP_ENTRIES];$/;"	m	class:dgWorld
m_sleeping	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_sleeping					: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_sleepingCounter	libs/Newton/include/dgDynamicBody.h	/^	dgInt32 m_sleepingCounter;$/;"	m	class:dgDynamicBody
m_sliderConstraint	libs/Newton/include/dgConstraint.h	/^		m_sliderConstraint,$/;"	e	enum:dgConstraint::dgConstraintID
m_softBodyCriticalSectionLock	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgThread::dgCriticalSection m_softBodyCriticalSectionLock;$/;"	m	class:dgWorldDynamicUpdate
m_softness	libs/Newton/include/dgContact.h	/^	dgFloat32 m_softness;$/;"	m	class:dgContactMaterial
m_solverMatrixMemory	libs/Newton/include/dgWorld.h	/^	dgArray<dgUnsigned8> m_solverMatrixMemory;  $/;"	m	class:dgWorld
m_solverMemory	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgJacobianMemory m_solverMemory;$/;"	m	class:dgWorldDynamicUpdate
m_solverMode	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_solverMode;$/;"	m	class:dgWorld
m_solverRightSideMemory	libs/Newton/include/dgWorld.h	/^	dgArray<dgUnsigned8> m_solverRightSideMemory;$/;"	m	class:dgWorld
m_spawnnedFromCallback	libs/Newton/include/dgBody.h	/^			dgUnsigned32 m_spawnnedFromCallback		: 1;$/;"	m	struct:dgBody::__anon19::__anon20
m_sphere	libs/Newton/include/Newton.h	/^			NewtonSphereParam m_sphere;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_sphere	libs/Newton/include/dgCollision.h	/^		dgSphereData m_sphere;$/;"	m	union:dgCollisionInfo::__anon21
m_sphereCollision	libs/Newton/include/dgCollision.h	/^	m_sphereCollision = 0,$/;"	e	enum:dgCollisionID
m_starDiagonals	libs/Newton/include/dgCollisionHeightField.h	/^		m_starDiagonals,$/;"	e	enum:dgCollisionHeightField::dgCollisionHeightFieldGridConstruction
m_starInvertexDiagonals	libs/Newton/include/dgCollisionHeightField.h	/^		m_starInvertexDiagonals,$/;"	e	enum:dgCollisionHeightField::dgCollisionHeightFieldGridConstruction
m_startTime	libs/Newton/include/dgThreadProfiler.h	/^		dgUnsigned32 m_startTime;$/;"	m	class:dgThreadProfiler::dgEvent
m_startTime	libs/Newton/include/dgThreadProfiler.h	/^	dgUnsigned32 m_startTime;$/;"	m	class:dgThreadProfiler
m_staticEntropy	libs/Newton/include/dgBroadPhasePersistent.h	/^	dgFloat64 m_staticEntropy;$/;"	m	class:dgBroadPhasePersistent
m_staticFitness	libs/Newton/include/dgBroadPhasePersistent.h	/^	dgFitnessList m_staticFitness;$/;"	m	class:dgBroadPhasePersistent
m_staticFriction0	libs/Newton/include/dgContact.h	/^	dgFloat32 m_staticFriction0;$/;"	m	class:dgContactMaterial
m_staticFriction1	libs/Newton/include/dgContact.h	/^	dgFloat32 m_staticFriction1;$/;"	m	class:dgContactMaterial
m_staticNeedsUpdate	libs/Newton/include/dgBroadPhasePersistent.h	/^	bool m_staticNeedsUpdate;$/;"	m	class:dgBroadPhasePersistent
m_stepInBites	libs/Newton/include/dgMemory.h	/^			dgInt32 m_stepInBites;$/;"	m	class:dgMemoryAllocator::dgMemoryBin::dgMemoryBinInfo
m_steps	libs/Newton/include/dgWorld.h	/^	dgInt32 m_steps;$/;"	m	class:dgSolverSleepTherfesholds
m_stiffness	libs/Newton/include/Newton.h	/^		dFloat m_stiffness;$/;"	m	struct:NewtonClothPatchMaterial
m_stiffness	libs/Newton/include/dgBilateralConstraint.h	/^	dgFloat32 m_stiffness;$/;"	m	class:dgBilateralConstraint
m_stiffness	libs/Newton/include/dgCollisionDeformableSolidMesh.h	/^	dgFloat32 m_stiffness;$/;"	m	class:dgCollisionDeformableSolidMesh
m_stiffness	libs/Newton/include/dgConstraint.h	/^		dgFloat32 m_stiffness;$/;"	m	class:dgConstraint::dgPointParam
m_stiffness	libs/Newton/include/dgContact.h	/^	dgFloat32 m_stiffness;$/;"	m	class:dgClothPatchMaterial
m_stride	libs/Newton/include/dgCollisionConvexPolygon.h	/^	dgInt32 m_stride;$/;"	m	class:dgCollisionConvexPolygon
m_strideInByte	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgInt32 m_strideInByte;$/;"	m	class:dgIslandCallbackStruct
m_strideInBytes	libs/Newton/include/dgCollision.h	/^		dgInt32 m_strideInBytes;$/;"	m	struct:dgCollisionInfo::dgConvexHullData
m_strideInBytes	libs/Newton/include/dgPolygonSoupDatabase.h	/^	dgInt32 m_strideInBytes;$/;"	m	class:dgPolygonSoupDatabase
m_subCollisionHandle	libs/Newton/include/dgCollisionInstance.h	/^	const void* m_subCollisionHandle;$/;"	m	class:dgCollisionInstance
m_supportTree	libs/Newton/include/dgCollisionConvexHull.h	/^	dgConvexBox* m_supportTree;$/;"	m	class:dgCollisionConvexHull
m_supportTreeCount	libs/Newton/include/dgCollisionConvexHull.h	/^	dgInt32 m_supportTreeCount;$/;"	m	class:dgCollisionConvexHull
m_surfaceArea	libs/Newton/include/dgBroadPhase.h	/^	dgFloat32 m_surfaceArea;$/;"	m	class:dgBroadPhaseNode
m_swapPriority	libs/Newton/include/dgCollisionConvex.h	/^		bool m_swapPriority[m_nullCollision][m_nullCollision];$/;"	m	class:dgCollisionConvex::dgCollisionPriority
m_t	libs/Newton/include/dgCollisionBVH.h	/^		dgFloat32 m_t;$/;"	m	struct:dgCollisionBVH::dgBVHRay
m_tail	libs/Newton/include/dgFastQueue.h	/^    dgInt32 m_tail;$/;"	m	class:dgFastQueue
m_taperedCapsule	libs/Newton/include/Newton.h	/^			NewtonTaperedCapsuleParam m_taperedCapsule;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_taperedCapsule	libs/Newton/include/dgCollision.h	/^		dgTaperedCapsuleData m_taperedCapsule;$/;"	m	union:dgCollisionInfo::__anon21
m_taperedCapsuleCollision	libs/Newton/include/dgCollision.h	/^	m_taperedCapsuleCollision,$/;"	e	enum:dgCollisionID
m_taperedCylinder	libs/Newton/include/Newton.h	/^			NewtonTaperedCylinderParam m_taperedCylinder;$/;"	m	union:NewtonCollisionInfoRecord::__anon18
m_taperedCylinder	libs/Newton/include/dgCollision.h	/^		dgTaperedCylinderData m_taperedCylinder;$/;"	m	union:dgCollisionInfo::__anon21
m_taperedCylinderCollision	libs/Newton/include/dgCollision.h	/^	m_taperedCylinderCollision,$/;"	e	enum:dgCollisionID
m_terminate	libs/Newton/include/dgThread.h	/^	dgInt32 m_terminate;$/;"	m	class:dgThread
m_threadIndex	libs/Newton/include/dgConstraint.h	/^	dgInt32 m_threadIndex;$/;"	m	class:dgContraintDescritor
m_threadIndex	libs/Newton/include/dgContact.h	/^	dgInt32 m_threadIndex;$/;"	m	class:dgCollisionParamProxy
m_threadNumber	libs/Newton/include/Newton.h	/^		int m_threadNumber;							\/\/ current thread executing this query$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_threadNumber	libs/Newton/include/dgCollisionMesh.h	/^	dgInt32 m_threadNumber;$/;"	m	class:dgPolygonMeshDesc
m_threadRunning	libs/Newton/include/dgThread.h	/^	dgInt32 m_threadRunning;$/;"	m	class:dgThread
m_three	libs/Newton/include/dgGoogol.h	/^	static dgGoogol m_three; $/;"	m	class:dgGoogol
m_three	libs/Newton/include/dgVector.h	/^	static dgVector m_three;$/;"	m	class:dgVector
m_timeOfImpact	libs/Newton/include/dgBroadPhase.h	/^		dgFloat32 m_timeOfImpact;$/;"	m	class:dgBroadPhase::dgPair
m_timeOfImpact	libs/Newton/include/dgContact.h	/^	dgFloat32 m_timeOfImpact;$/;"	m	class:dgContact
m_timeStep	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_timeStep;$/;"	m	class:dgJointAccelerationDecriptor
m_timestep	libs/Newton/include/Newton.h	/^		dFloat m_timestep;$/;"	m	struct:NewtonHingeSliderUpdateDesc
m_timestep	libs/Newton/include/dgBroadPhase.h	/^		dgFloat32 m_timestep;$/;"	m	class:dgBroadPhase::dgBroadphaseSyncDescriptor
m_timestep	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_timestep;$/;"	m	class:dgContraintDescritor
m_timestep	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_timestep;$/;"	m	class:dgJointCallbackParam
m_timestep	libs/Newton/include/dgContact.h	/^	dgFloat32 m_timestep;$/;"	m	class:dgCollisionParamProxy
m_timestep	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_timestep;$/;"	m	class:dgParallelSolverSyncData
m_timestepRK	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_timestepRK;$/;"	m	class:dgParallelSolverSyncData
m_torque	libs/Newton/include/dgDeformableBody.h	/^	dgVector m_torque;$/;"	m	class:dgDeformableBody
m_totalAllocatedBytes	libs/Newton/include/dgMemory.h	/^		dgInt32 m_totalAllocatedBytes; $/;"	m	class:dgMemoryAllocator::dgMemoryLeaksTracker
m_totalAllocatedCalls	libs/Newton/include/dgMemory.h	/^		dgInt32 m_totalAllocatedCalls; $/;"	m	class:dgMemoryAllocator::dgMemoryLeaksTracker
m_totalCount	libs/Newton/include/dgMemory.h	/^			dgInt32 m_totalCount;$/;"	m	class:dgMemoryAllocator::dgMemoryBin::dgMemoryBinInfo
m_tree	libs/Newton/include/dgTree.h	/^		const dgTree* m_tree;$/;"	m	class:dgTree::Iterator
m_treeEntropy	libs/Newton/include/dgBroadPhaseAggregate.h	/^	dgFloat64 m_treeEntropy;$/;"	m	class:dgBroadPhaseAggregate
m_treeEntropy	libs/Newton/include/dgBroadPhaseDefault.h	/^	dgFloat64 m_treeEntropy;$/;"	m	class:dgBroadPhaseDefault
m_treeEntropy	libs/Newton/include/dgCollisionCompound.h	/^	dgFloat64 m_treeEntropy;$/;"	m	class:dgCollisionCompound
m_treeNode	libs/Newton/include/dgCollisionCompound.h	/^		const void* m_treeNode;$/;"	m	class:dgCollisionCompound::dgNodePairs
m_treeNodeIsLeaf	libs/Newton/include/dgCollisionCompound.h	/^		dgInt32 m_treeNodeIsLeaf;$/;"	m	class:dgCollisionCompound::dgNodePairs
m_triangleCount	libs/Newton/include/Newton.h	/^		int m_triangleCount;$/;"	m	struct:NewtonDeformableMeshParam
m_triangleCount	libs/Newton/include/dgCollision.h	/^		dgInt32 m_triangleCount;$/;"	m	struct:dgCollisionInfo::dgDeformableMeshData
m_triangleCount	libs/Newton/include/dgCollisionMesh.h	/^		dgInt32 m_triangleCount; $/;"	m	class:dgCollisionMesh::dgMeshVertexListIndexList
m_trianglesCount	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgInt32 m_trianglesCount;$/;"	m	class:dgCollisionDeformableMesh
m_triplexMask	libs/Newton/include/dgVector.h	/^	static dgVector m_triplexMask;$/;"	m	class:dgVector
m_twin	libs/Newton/include/dgCollisionConvex.h	/^	dgConvexSimplexEdge* m_twin;$/;"	m	class:dgConvexSimplexEdge
m_twin	libs/Newton/include/dgCollisionConvexPolygon.h	/^		dgClippedFaceEdge* m_twin;$/;"	m	class:dgCollisionConvexPolygon::dgClippedFaceEdge
m_twin	libs/Newton/include/dgConvexHull3d.h	/^	dgList<dgConvexHull3DFace>::dgListNode* m_twin[3];$/;"	m	class:dgConvexHull3DFace
m_twin	libs/Newton/include/dgConvexHull4d.h	/^		dgList<dgConvexHull4dTetraherum>::dgListNode* m_twin;$/;"	m	class:dgConvexHull4dTetraherum::dgTetrahedrumFace
m_twin	libs/Newton/include/dgPolyhedra.h	/^	dgEdge* m_twin;$/;"	m	class:dgEdge
m_twistAngle	libs/Newton/include/dgBallConstraint.h	/^	dgFloat32 m_twistAngle;$/;"	m	class:dgBallConstraint
m_twistLimit	libs/Newton/include/dgBallConstraint.h	/^			dgUnsigned32 m_twistLimit : 1;$/;"	m	struct:dgBallConstraint::__anon22::__anon23
m_two	libs/Newton/include/dgGoogol.h	/^	static dgGoogol m_two; $/;"	m	class:dgGoogol
m_two	libs/Newton/include/dgVector.h	/^	static dgVector m_two;$/;"	m	class:dgVector
m_type	libs/Newton/include/dgBody.h	/^	dgInt32 m_type;$/;"	m	class:dgBody
m_type	libs/Newton/include/dgCollisionCompound.h	/^		dgInt32 m_type;$/;"	m	class:dgCollisionCompound::dgNodeBase
m_type	libs/Newton/include/dgVector.h	/^		__m128 m_type;$/;"	m	union:dgVector::__anon11
m_typeInt	libs/Newton/include/dgVector.h	/^		__m128i m_typeInt;$/;"	m	union:dgVector::__anon11
m_u0	libs/Newton/include/dgMeshEffect.h	/^		dgFloat64 m_u0;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_u1	libs/Newton/include/dgMeshEffect.h	/^		dgFloat64 m_u1;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_uniform	libs/Newton/include/dgCollisionInstance.h	/^		m_uniform,$/;"	e	enum:dgCollisionInstance::dgScaleType
m_uniqueID	libs/Newton/include/dgBody.h	/^	dgInt32 m_uniqueID;$/;"	m	class:dgBody
m_uniqueID	libs/Newton/include/dgConvexHull4d.h	/^	dgInt32 m_uniqueID;$/;"	m	class:dgConvexHull4dTetraherum
m_uniqueID	libs/Newton/include/dgSkeletonContainer.h	/^	static dgInt32 m_uniqueID;$/;"	m	class:dgSkeletonContainer
m_unit	libs/Newton/include/dgCollisionInstance.h	/^		m_unit,$/;"	e	enum:dgCollisionInstance::dgScaleType
m_unitMass	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgFloat32* m_unitMass;$/;"	m	class:dgCollisionDeformableMesh::dgParticle
m_unitSphere	libs/Newton/include/dgCollisionSphere.h	/^	static dgVector m_unitSphere[];$/;"	m	class:dgCollisionSphere
m_universalConstraint	libs/Newton/include/dgConstraint.h	/^		m_universalConstraint,$/;"	e	enum:dgConstraint::dgConstraintID
m_unknownConstraint	libs/Newton/include/dgConstraint.h	/^		m_unknownConstraint$/;"	e	enum:dgConstraint::dgConstraintID
m_unsigned16Bit	libs/Newton/include/dgCollisionHeightField.h	/^		m_unsigned16Bit,$/;"	e	enum:dgCollisionHeightField::dgElevationType
m_up	libs/Newton/include/dgMatrix.h	/^	dgVector m_up;$/;"	m	class:dgMatrix
m_upVectorConstraint	libs/Newton/include/dgConstraint.h	/^		m_upVectorConstraint,$/;"	e	enum:dgConstraint::dgConstraintID
m_updaFeedbackCallback	libs/Newton/include/dgConstraint.h	/^	ConstraintsForceFeeback m_updaFeedbackCallback;$/;"	m	class:dgConstraint
m_updateList	libs/Newton/include/dgBroadPhase.h	/^	dgList<dgBroadPhaseNode*> m_updateList;$/;"	m	class:dgBroadPhase
m_updateNode	libs/Newton/include/dgBroadPhase.h	/^	dgList<dgBroadPhaseNode*>::dgListNode* m_updateNode;$/;"	m	class:dgBroadPhaseBodyNode
m_updateNode	libs/Newton/include/dgBroadPhaseAggregate.h	/^	dgList<dgBroadPhaseNode*>::dgListNode* m_updateNode;$/;"	m	class:dgBroadPhaseAggregate
m_upper	libs/Newton/include/dgConstraint.h	/^	dgFloat32 m_upper;$/;"	m	class:dgBilateralBounds
m_upperBoundFrictionCoefficent	libs/Newton/include/dgAmpInstance.h	/^			float m_upperBoundFrictionCoefficent;$/;"	m	struct:dgAmpMatrixRightSide::__anon26::__anon27
m_upperBoundFrictionCoefficent	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgFloat32 m_upperBoundFrictionCoefficent;$/;"	m	class:dgJacobianMatrixElement
m_useParallelSolver	libs/Newton/include/dgWorld.h	/^	dgUnsigned32 m_useParallelSolver;$/;"	m	class:dgWorld
m_userDadaID	libs/Newton/include/dgCollision.h	/^	dgInt32 m_userDadaID;$/;"	m	class:dgCollisionInfo
m_userData	libs/Newton/include/Newton.h	/^		void* m_userData;                       	\/\/ user data passed to the collision geometry at creation time$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_userData	libs/Newton/include/Newton.h	/^		void* m_userData;                       \/\/ user data passed to the collision geometry at creation time$/;"	m	struct:NewtonUserMeshCollisionRayHitDesc
m_userData	libs/Newton/include/dgBody.h	/^	void* m_userData;$/;"	m	class:dgBody
m_userData	libs/Newton/include/dgCollisionBVH.h	/^		void* m_userData;$/;"	m	struct:dgCollisionBVH::dgBVHRay
m_userData	libs/Newton/include/dgCollisionConvex.h	/^	void* m_userData;$/;"	m	class:dgCollisionConvex
m_userData	libs/Newton/include/dgCollisionMesh.h	/^	void*  m_userData;$/;"	m	class:dgCollisionMeshRayHitDesc
m_userData	libs/Newton/include/dgCollisionMesh.h	/^	void* m_userData;$/;"	m	class:dgPolygonMeshDesc
m_userData	libs/Newton/include/dgCollisionUserMesh.h	/^	void* m_userData;$/;"	m	class:dgCollisionUserMesh
m_userData	libs/Newton/include/dgCollisionUserMesh.h	/^	void* m_userData;$/;"	m	class:dgUserMeshCreation
m_userData	libs/Newton/include/dgConstraint.h	/^	void* m_userData;$/;"	m	class:dgConstraint
m_userData	libs/Newton/include/dgContact.h	/^	void *m_userData;$/;"	m	class:dgContactMaterial
m_userData	libs/Newton/include/dgMeshEffect.h	/^			void* m_userData;$/;"	m	class:dgMeshEffect::dgMeshBVH::dgMeshBVHNode
m_userData	libs/Newton/include/dgPolyhedra.h	/^	dgUnsigned64 m_userData;$/;"	m	class:dgEdge
m_userData	libs/Newton/include/dgWorld.h	/^		void* m_userData;$/;"	m	class:dgWorld::dgListener
m_userData	libs/Newton/include/dgWorld.h	/^	void* m_userData;$/;"	m	class:dgWorld
m_userData0	libs/Newton/include/dgCollisionInstance.h	/^	void* m_userData0;$/;"	m	class:dgCollisionInstance
m_userData1	libs/Newton/include/dgCollisionInstance.h	/^	void* m_userData1;$/;"	m	class:dgCollisionInstance
m_userDataID	libs/Newton/include/dgCollisionInstance.h	/^	dgUnsigned32 m_userDataID;$/;"	m	class:dgCollisionInstance
m_userDataList	libs/Newton/include/dgCollisionMesh.h	/^		dgInt32* m_userDataList;$/;"	m	class:dgCollisionMesh::dgMeshVertexListIndexList
m_userFlag0	libs/Newton/include/dgRef.h	/^	dgUnsigned8 m_userFlag0;$/;"	m	struct:dgRefFlags
m_userFlag1	libs/Newton/include/dgRef.h	/^	dgUnsigned8 m_userFlag1;$/;"	m	struct:dgRefFlags
m_userFlag2	libs/Newton/include/dgRef.h	/^	dgUnsigned8 m_userFlag2;$/;"	m	struct:dgRefFlags
m_userId	libs/Newton/include/dgCollisionMesh.h	/^	dgUnsigned64 m_userId;$/;"	m	class:dgCollisionMeshRayHitDesc
m_userIdOut	libs/Newton/include/Newton.h	/^		dLong m_userIdOut;						\/\/ copy here a user defined id for further feedback  $/;"	m	struct:NewtonUserMeshCollisionRayHitDesc
m_userMesh	libs/Newton/include/dgCollision.h	/^	m_userMesh,$/;"	e	enum:dgCollisionID
m_userRayCastCallback	libs/Newton/include/dgCollisionBVH.h	/^	dgCollisionBVHUserRayCastCallback m_userRayCastCallback;$/;"	m	class:dgCollisionBVH
m_userRayCastCallback	libs/Newton/include/dgCollisionHeightField.h	/^	dgCollisionHeightFieldRayCastCallback m_userRayCastCallback;$/;"	m	class:dgCollisionHeightField
m_uv	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgFloat32 *m_uv;$/;"	m	class:dgCollisionCompoundFractured::dgVertexBuffer
m_uv0	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgFloat32 m_uv0[2];$/;"	m	class:dgCollisionDeformableMesh::dgVisualVertexData
m_v0	libs/Newton/include/dgMeshEffect.h	/^		dgFloat64 m_v0;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_v1	libs/Newton/include/dgMeshEffect.h	/^		dgFloat64 m_v1;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_value	libs/Newton/include/dgGoogol.h	/^	dgFloat64 m_value;$/;"	m	class:dgGoogol
m_veloc	libs/Newton/include/dgBody.h	/^	dgVector m_veloc;$/;"	m	class:dgBody
m_veloc	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgVector* m_veloc;$/;"	m	class:dgCollisionDeformableMesh::dgParticle
m_veloc0	libs/Newton/include/dgConstraint.h	/^		dgVector m_veloc0;$/;"	m	class:dgConstraint::dgPointParam
m_veloc1	libs/Newton/include/dgConstraint.h	/^		dgVector m_veloc1;$/;"	m	class:dgConstraint::dgPointParam
m_velocTol	libs/Newton/include/dgBroadPhase.h	/^	static dgVector m_velocTol;$/;"	m	class:dgBroadPhase
m_velocTol	libs/Newton/include/dgWorldDynamicUpdate.h	/^	static dgVector m_velocTol;$/;"	m	class:dgWorldDynamicUpdate
m_vertex	libs/Newton/include/Newton.h	/^		dFloat* m_vertex;                       	\/\/ the application should set here the pointer to the global vertex of the mesh. $/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_vertex	libs/Newton/include/Newton.h	/^		dFloat* m_vertex;$/;"	m	struct:NewtonConvexHullParam
m_vertex	libs/Newton/include/dgCollision.h	/^		dgVector* m_vertex;$/;"	m	struct:dgCollisionInfo::dgConvexHullData
m_vertex	libs/Newton/include/dgCollisionBox.h	/^	dgVector m_vertex[8];$/;"	m	class:dgCollisionBox
m_vertex	libs/Newton/include/dgCollisionCapsule.h	/^	dgVector m_vertex[2 * DG_CAP_SEGMENTS * DG_CAPSULE_SEGMENTS];$/;"	m	class:dgCollisionCapsule
m_vertex	libs/Newton/include/dgCollisionChamferCylinder.h	/^	dgVector m_vertex[DG_CHAMFERCYLINDER_BRAKES * (DG_CHAMFERCYLINDER_SLICES + 1)];$/;"	m	class:dgCollisionChamferCylinder
m_vertex	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgFloat32 *m_vertex;$/;"	m	class:dgCollisionCompoundFractured::dgVertexBuffer
m_vertex	libs/Newton/include/dgCollisionCone.h	/^	dgVector m_vertex[DG_CONE_SEGMENTS + 1];$/;"	m	class:dgCollisionCone
m_vertex	libs/Newton/include/dgCollisionConvex.h	/^	dgInt32 m_vertex;$/;"	m	class:dgConvexSimplexEdge
m_vertex	libs/Newton/include/dgCollisionConvex.h	/^	dgVector* m_vertex;$/;"	m	class:dgCollisionConvex
m_vertex	libs/Newton/include/dgCollisionConvexPolygon.h	/^	const dgFloat32* m_vertex;$/;"	m	class:dgCollisionConvexPolygon
m_vertex	libs/Newton/include/dgCollisionCylinder.h	/^	dgVector m_vertex[DG_CYLINDER_SEGMENTS * 2];$/;"	m	class:dgCollisionCylinder
m_vertex	libs/Newton/include/dgCollisionHeightField.h	/^		dgVector *m_vertex[DG_MAX_THREADS_HIVE_COUNT];$/;"	m	class:dgCollisionHeightField::dgPerIntanceData
m_vertex	libs/Newton/include/dgCollisionMesh.h	/^	dgFloat32* m_vertex;$/;"	m	class:dgPolygonMeshDesc
m_vertex	libs/Newton/include/dgCollisionSphere.h	/^	dgVector m_vertex[DG_SPHERE_VERTEX_COUNT];$/;"	m	class:dgCollisionSphere
m_vertex	libs/Newton/include/dgCollisionTaperedCapsule.h	/^	dgVector m_vertex[2 * DG_CAP_SEGMENTS * DG_CAPSULE_SEGMENTS];$/;"	m	class:dgCollisionTaperedCapsule
m_vertex	libs/Newton/include/dgCollisionTaperedCylinder.h	/^	dgVector m_vertex[DG_CYLINDER_SEGMENTS * 2];$/;"	m	class:dgCollisionTaperedCylinder
m_vertex	libs/Newton/include/dgMeshEffect.h	/^		dgBigVector m_vertex;$/;"	m	class:dgMeshEffect::dgVertexAtribute
m_vertexBuffer	libs/Newton/include/dgCollisionCompoundFractured.h	/^	dgVertexBuffer* m_vertexBuffer;$/;"	m	class:dgCollisionCompoundFractured
m_vertexCount	libs/Newton/include/Newton.h	/^		int m_vertexCount;$/;"	m	struct:NewtonCollisionTreeParam
m_vertexCount	libs/Newton/include/Newton.h	/^		int m_vertexCount;$/;"	m	struct:NewtonConvexHullParam
m_vertexCount	libs/Newton/include/Newton.h	/^		int m_vertexCount;$/;"	m	struct:NewtonDeformableMeshParam
m_vertexCount	libs/Newton/include/dgCollision.h	/^		dgInt32 m_vertexCount;$/;"	m	struct:dgCollisionInfo::dgCollisionBVHData
m_vertexCount	libs/Newton/include/dgCollision.h	/^		dgInt32 m_vertexCount;$/;"	m	struct:dgCollisionInfo::dgConvexHullData
m_vertexCount	libs/Newton/include/dgCollision.h	/^		dgInt32 m_vertexCount;$/;"	m	struct:dgCollisionInfo::dgDeformableMeshData
m_vertexCount	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 m_vertexCount;$/;"	m	class:dgCollisionCompoundFractured::dgMesh
m_vertexCount	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 m_vertexCount;$/;"	m	class:dgCollisionCompoundFractured::dgVertexBuffer
m_vertexCount	libs/Newton/include/dgCollisionConvex.h	/^	dgUnsigned16 m_vertexCount;$/;"	m	class:dgCollisionConvex
m_vertexCount	libs/Newton/include/dgCollisionHeightField.h	/^		dgInt32 m_vertexCount[DG_MAX_THREADS_HIVE_COUNT];$/;"	m	class:dgCollisionHeightField::dgPerIntanceData
m_vertexCount	libs/Newton/include/dgCollisionMesh.h	/^		dgInt32 m_vertexCount;$/;"	m	class:dgCollisionMesh::dgMeshVertexListIndexList
m_vertexCount	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgInt32 m_vertexCount;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_vertexCount	libs/Newton/include/dgPolygonSoupDatabase.h	/^	dgInt32 m_vertexCount;$/;"	m	class:dgPolygonSoupDatabase
m_vertexIndex	libs/Newton/include/dgCollisionConvexPolygon.h	/^	const dgInt32* m_vertexIndex;$/;"	m	class:dgCollisionConvexPolygon
m_vertexIndex	libs/Newton/include/dgCollisionDeformableMesh.h	/^		dgInt32 m_vertexIndex;$/;"	m	class:dgCollisionDeformableMesh::dgVisualVertexData
m_vertexIndex	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgIndexArray m_vertexIndex;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_vertexList	libs/Newton/include/Newton.h	/^		dFloat *m_vertexList;$/;"	m	struct:NewtonDeformableMeshParam
m_vertexList	libs/Newton/include/dgCollision.h	/^		dgFloat32* m_vertexList;$/;"	m	struct:dgCollisionInfo::dgDeformableMeshData
m_vertexOffsetStart	libs/Newton/include/dgCollisionCompoundFractured.h	/^		dgInt32 m_vertexOffsetStart;$/;"	m	class:dgCollisionCompoundFractured::dgMesh
m_vertexPoints	libs/Newton/include/dgPolygonSoupBuilder.h	/^	dgVertexArray m_vertexPoints;$/;"	m	class:dgPolygonSoupDatabaseBuilder
m_vertexStrideInBytes	libs/Newton/include/Newton.h	/^		int m_vertexStrideInBytes;              	\/\/ the application should set here the size of each vertex$/;"	m	struct:NewtonUserMeshCollisionCollideDesc
m_vertexStrideInBytes	libs/Newton/include/Newton.h	/^		int m_vertexStrideInBytes;$/;"	m	struct:NewtonConvexHullParam
m_vertexStrideInBytes	libs/Newton/include/dgCollision.h	/^		dgInt32 m_vertexStrideInBytes;$/;"	m	struct:dgCollisionInfo::dgDeformableMeshData
m_vertexStrideInBytes	libs/Newton/include/dgCollisionMesh.h	/^		dgInt32 m_vertexStrideInBytes;$/;"	m	class:dgCollisionMesh::dgMeshVertexListIndexList
m_vertexStrideInBytes	libs/Newton/include/dgCollisionMesh.h	/^	dgInt32 m_vertexStrideInBytes;$/;"	m	class:dgPolygonMeshDesc
m_vertexToEdgeMap	libs/Newton/include/dgCollisionBox.h	/^	static dgConvexSimplexEdge* m_vertexToEdgeMap[];$/;"	m	class:dgCollisionBox
m_vertexToEdgeMapping	libs/Newton/include/dgCollisionConvexHull.h	/^	const dgConvexSimplexEdge** m_vertexToEdgeMapping;$/;"	m	class:dgCollisionConvexHull
m_verticalEdgeMap	libs/Newton/include/dgCollisionHeightField.h	/^	static dgInt32 m_verticalEdgeMap[][7];$/;"	m	class:dgCollisionHeightField
m_verticalScale	libs/Newton/include/Newton.h	/^		dFloat m_verticalScale;$/;"	m	struct:NewtonHeightFieldCollisionParam
m_verticalScale	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_verticalScale;$/;"	m	struct:dgCollisionInfo::dgHeightMapCollisionData
m_verticalScale	libs/Newton/include/dgCollisionHeightField.h	/^	dgFloat32 m_verticalScale;$/;"	m	class:dgCollisionHeightField
m_veterxArray	libs/Newton/include/dgCollisionMesh.h	/^		dgFloat32* m_veterxArray;$/;"	m	class:dgCollisionMesh::dgMeshVertexListIndexList
m_visibleFaces	libs/Newton/include/dgCollisionCompoundFractured.h	/^		bool m_visibleFaces;$/;"	m	class:dgCollisionCompoundFractured::dgSubMesh
m_visualSegments	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgList<dgMeshSegment> m_visualSegments;$/;"	m	class:dgCollisionDeformableMesh
m_visualVertexCount	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgInt32 m_visualVertexCount;$/;"	m	class:dgCollisionDeformableMesh
m_visualVertexData	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgVisualVertexData* m_visualVertexData; $/;"	m	class:dgCollisionDeformableMesh
m_vrtexStrideInBytes	libs/Newton/include/Newton.h	/^		int m_vrtexStrideInBytes;$/;"	m	struct:NewtonDeformableMeshParam
m_w	libs/Newton/include/dgVector.h	/^			dgFloat32 m_w;$/;"	m	struct:dgVector::__anon11::__anon12
m_w	libs/Newton/include/dgVector.h	/^			dgFloat32 m_w;$/;"	m	struct:dgVector::__anon8::__anon9
m_w	libs/Newton/include/dgVector.h	/^	T m_w;$/;"	m	class:dgTemplateVector
m_wMask	libs/Newton/include/dgVector.h	/^	static dgVector m_wMask;$/;"	m	class:dgVector
m_wOne	libs/Newton/include/dgVector.h	/^	static dgVector m_wOne;$/;"	m	class:dgVector
m_width	libs/Newton/include/Newton.h	/^		int m_width;$/;"	m	struct:NewtonHeightFieldCollisionParam
m_width	libs/Newton/include/dgCollision.h	/^		dgInt32 m_width;$/;"	m	struct:dgCollisionInfo::dgHeightMapCollisionData
m_width	libs/Newton/include/dgCollisionHeightField.h	/^	dgInt32 m_width;$/;"	m	class:dgCollisionHeightField
m_workerBees	libs/Newton/include/dgThreadHive.h	/^	dgThreadBee* m_workerBees;$/;"	m	class:dgThreadHive
m_workingSize	libs/Newton/include/dgMemory.h	/^		dgInt32 m_workingSize;$/;"	m	class:dgMemoryAllocator::dgMemoryInfo
m_world	libs/Newton/include/dgAmpInstance.h	/^	dgWorld* m_world;$/;"	m	class:dgAmpInstance
m_world	libs/Newton/include/dgBody.h	/^	dgWorld* m_world;$/;"	m	class:dgBody
m_world	libs/Newton/include/dgBroadPhase.h	/^		dgWorld* m_world;$/;"	m	class:dgBroadPhase::dgBroadphaseSyncDescriptor
m_world	libs/Newton/include/dgBroadPhase.h	/^	dgWorld* m_world;$/;"	m	class:dgBroadPhase
m_world	libs/Newton/include/dgCollisionCompound.h	/^	dgWorld* m_world;	$/;"	m	class:dgCollisionCompound
m_world	libs/Newton/include/dgCollisionDeformableMesh.h	/^	dgWorld* m_world;$/;"	m	class:dgCollisionDeformableMesh
m_world	libs/Newton/include/dgCollisionHeightField.h	/^		dgWorld* m_world;$/;"	m	class:dgCollisionHeightField::dgPerIntanceData
m_world	libs/Newton/include/dgCollisionInstance.h	/^	const dgWorld* m_world;$/;"	m	class:dgCollisionInstance
m_world	libs/Newton/include/dgConstraint.h	/^	dgWorld* m_world;$/;"	m	class:dgContraintDescritor
m_world	libs/Newton/include/dgContact.h	/^	dgWorld* m_world;$/;"	m	class:dgContact
m_world	libs/Newton/include/dgSkeletonContainer.h	/^	dgWorld* m_world;$/;"	m	class:dgSkeletonContainer
m_world	libs/Newton/include/dgWorld.h	/^		dgWorld* m_world;$/;"	m	class:dgWorld::dgListener
m_world	libs/Newton/include/dgWorldDynamicUpdate.h	/^	dgWorld* m_world;$/;"	m	class:dgIslandCallbackStruct
m_x	libs/Newton/include/Newton.h	/^		dFloat m_x;$/;"	m	struct:NewtonBoxParam
m_x	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_x;$/;"	m	struct:dgCollisionInfo::dgBoxData
m_x	libs/Newton/include/dgTypes.h	/^	dgFloat32 m_x;$/;"	m	class:dgTriplex
m_x	libs/Newton/include/dgVector.h	/^			dgFloat32 m_x;$/;"	m	struct:dgVector::__anon11::__anon12
m_x	libs/Newton/include/dgVector.h	/^			dgFloat32 m_x;$/;"	m	struct:dgVector::__anon8::__anon9
m_x	libs/Newton/include/dgVector.h	/^	T m_x;$/;"	m	class:dgTemplateVector
m_xMask	libs/Newton/include/dgVector.h	/^	static dgVector m_xMask;$/;"	m	class:dgVector
m_y	libs/Newton/include/Newton.h	/^		dFloat m_y;$/;"	m	struct:NewtonBoxParam
m_y	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_y;$/;"	m	struct:dgCollisionInfo::dgBoxData
m_y	libs/Newton/include/dgTypes.h	/^	dgFloat32 m_y;$/;"	m	class:dgTriplex
m_y	libs/Newton/include/dgVector.h	/^			dgFloat32 m_y;$/;"	m	struct:dgVector::__anon11::__anon12
m_y	libs/Newton/include/dgVector.h	/^			dgFloat32 m_y;$/;"	m	struct:dgVector::__anon8::__anon9
m_y	libs/Newton/include/dgVector.h	/^	T m_y;$/;"	m	class:dgTemplateVector
m_yMask	libs/Newton/include/dgCollisionHeightField.h	/^	static dgVector m_yMask;$/;"	m	class:dgCollisionHeightField
m_yMask	libs/Newton/include/dgVector.h	/^	static dgVector m_yMask;$/;"	m	class:dgVector
m_yzMask	libs/Newton/include/dgCollisionChamferCylinder.h	/^	static dgVector m_yzMask;$/;"	m	class:dgCollisionChamferCylinder
m_z	libs/Newton/include/Newton.h	/^		dFloat m_z;$/;"	m	struct:NewtonBoxParam
m_z	libs/Newton/include/dgCollision.h	/^		dgFloat32 m_z;$/;"	m	struct:dgCollisionInfo::dgBoxData
m_z	libs/Newton/include/dgTypes.h	/^	dgFloat32 m_z;$/;"	m	class:dgTriplex
m_z	libs/Newton/include/dgVector.h	/^			dgFloat32 m_z;$/;"	m	struct:dgVector::__anon11::__anon12
m_z	libs/Newton/include/dgVector.h	/^			dgFloat32 m_z;$/;"	m	struct:dgVector::__anon8::__anon9
m_z	libs/Newton/include/dgVector.h	/^	T m_z;$/;"	m	class:dgTemplateVector
m_zMask	libs/Newton/include/dgVector.h	/^	static dgVector m_zMask;$/;"	m	class:dgVector
m_zero	libs/Newton/include/dgGoogol.h	/^	static dgGoogol m_zero; $/;"	m	class:dgGoogol
m_zero	libs/Newton/include/dgIntersections.h	/^	dgVector m_zero;$/;"	m	class:dgFastRayTest
m_zero	libs/Newton/include/dgVector.h	/^	static dgVector m_zero;$/;"	m	class:dgVector
m_zeroMatrix	libs/Newton/include/dgMatrix.h	/^	static dgMatrix m_zeroMatrix;$/;"	m	class:dgMatrix
main	src/main.c	/^int main(int argc, char **argv) {$/;"	f
mainCam	src/Engine.h	/^    Camera *mainCam;$/;"	m	struct:__anon43
marker	staticbin/stb_image.c	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon31	file:
mat4	src/MatrixMath.h	/^typedef float *mat4;$/;"	t
mat4add	src/MatrixMath.c	/^void mat4add(mat4 A, mat4 B, mat4 target) {$/;"	f
mat4id	src/MatrixMath.c	/^const float mat4id[] = {$/;"	v
mat4mult	src/MatrixMath.c	/^void mat4mult(mat4 A, mat4 B, mat4 target) {$/;"	f
mat4multVec3	src/MatrixMath.c	/^void mat4multVec3(mat4 A, vec3 v, vec3 target) {$/;"	f
mat4multVec4	src/MatrixMath.c	/^void mat4multVec4(mat4 A, vec4 v, vec4 target) {$/;"	f
mat4persp	src/MatrixMath.c	/^void mat4persp(mat4 target, float near, float far, float fov, float ratio) {$/;"	f
mat4perspinf	src/MatrixMath.c	/^void mat4perspinf(mat4 target, float near, float fov, float ratio) {$/;"	f
mat4rotate	src/MatrixMath.c	/^void mat4rotate(mat4 target, float angle, float x, float y, float z) {$/;"	f
mat4scale	src/MatrixMath.c	/^void mat4scale(mat4 target, float x, float y, float z) {$/;"	f
mat4sub	src/MatrixMath.c	/^void mat4sub(mat4 A, mat4 B, mat4 target) {$/;"	f
mat4tmp	src/MatrixMath.c	/^float mat4tmp[16];$/;"	v
mat4trans	src/MatrixMath.c	/^void mat4trans(mat4 target, vec3 pos ) {$/;"	f
mat4transp	src/MatrixMath.c	/^void mat4transp( mat4 A ) {$/;"	f
mats	src/Object.h	/^    Material *mats;$/;"	m	struct:__anon47
maxChildren	libs/Newton/include/dgPathFinder.h	/^	dgInt32 maxChildren;$/;"	m	class:dgPathFinder
max_x	staticbin/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:__anon41	file:
max_y	staticbin/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:__anon41	file:
maxcode	staticbin/stb_image.c	/^   int maxcode[17];$/;"	m	struct:__anon34	file:
maxcode	staticbin/stb_image.c	/^   unsigned int maxcode[18];$/;"	m	struct:__anon30	file:
mesh	src/Object.h	/^    Mesh *mesh;$/;"	m	struct:__anon47
mode	src/Mesh.h	/^    GLenum mode;$/;"	m	struct:__anon44
mode_t	libs/Newton/include/semaphore.h	/^typedef unsigned int mode_t;$/;"	t
mouseGrab	src/Camera.h	/^    uint8 mouseGrab;$/;"	m	struct:__anon52
mtxExclusiveAccess	libs/Newton/include/implement.h	/^  pthread_mutex_t mtxExclusiveAccess;$/;"	m	struct:pthread_rwlock_t_
mtxSharedAccessCompleted	libs/Newton/include/implement.h	/^  pthread_mutex_t mtxSharedAccessCompleted;$/;"	m	struct:pthread_rwlock_t_
mtxUnblockLock	libs/Newton/include/implement.h	/^  pthread_mutex_t mtxUnblockLock;	\/* Mutex that guards access to          *\/$/;"	m	struct:pthread_cond_t_
mult	libs/Newton/include/dgPolyhedraMassProperties.h	/^	dgFloat32 mult[10];$/;"	m	class:dgPolyhedraMassProperties
mutex	libs/Newton/include/benchtest.h	/^  HANDLE mutex;$/;"	m	struct:old_mutex_t_
mutex	libs/Newton/include/implement.h	/^    pthread_mutex_t mutex;	\/* mutex if single cpu.            *\/$/;"	m	union:pthread_spinlock_t_::__anon25
mx	libs/Newton/include/implement.h	/^  pthread_mutex_t mx;$/;"	m	struct:ptw32_robust_node_t_
nCompletedSharedAccessCount	libs/Newton/include/implement.h	/^  int nCompletedSharedAccessCount;$/;"	m	struct:pthread_rwlock_t_
nCurrentBarrierHeight	libs/Newton/include/implement.h	/^  unsigned int nCurrentBarrierHeight;$/;"	m	struct:pthread_barrier_t_
nExclusiveAccessCount	libs/Newton/include/implement.h	/^  int nExclusiveAccessCount;$/;"	m	struct:pthread_rwlock_t_
nInitialBarrierHeight	libs/Newton/include/implement.h	/^  unsigned int nInitialBarrierHeight;$/;"	m	struct:pthread_barrier_t_
nMagic	libs/Newton/include/implement.h	/^  int nMagic;$/;"	m	struct:pthread_rwlock_t_
nSharedAccessCount	libs/Newton/include/implement.h	/^  int nSharedAccessCount;$/;"	m	struct:pthread_rwlock_t_
nWaitersBlocked	libs/Newton/include/implement.h	/^  long nWaitersBlocked;		\/* Number of threads blocked            *\/$/;"	m	struct:pthread_cond_t_
nWaitersGone	libs/Newton/include/implement.h	/^  long nWaitersGone;		\/* Number of threads timed out          *\/$/;"	m	struct:pthread_cond_t_
nWaitersToUnblock	libs/Newton/include/implement.h	/^  long nWaitersToUnblock;	\/* Number of threads to unblock         *\/$/;"	m	struct:pthread_cond_t_
nbody	src/Mesh.h	/^    NewtonBody *nbody;$/;"	m	struct:__anon44
ncol	src/Mesh.h	/^    NewtonCollision *ncol;$/;"	m	struct:__anon44
nearClip	src/Camera.h	/^    float nearClip;$/;"	m	struct:__anon52
newCamera	src/Camera.c	/^Camera *newCamera(float x, float y, float z) {$/;"	f
newContext	src/Context.c	/^Context *newContext(uint32 xRes, uint32 yRes, const char *title) {$/;"	f
newMaterial	src/Material.c	/^Material *newMaterial() {$/;"	f
newMesh	src/Mesh.c	/^Mesh *newMesh() {$/;"	f
newObject	src/Object.c	/^Object *newObject() {$/;"	f
newShader	src/Shader.c	/^Shader *newShader() {$/;"	f
newState	src/State.c	/^State *newState() {$/;"	f
next	libs/Newton/include/implement.h	/^  pthread_cond_t next;		\/* Doubly linked list                   *\/$/;"	m	struct:pthread_cond_t_
next	libs/Newton/include/implement.h	/^  ptw32_robust_node_t* next;$/;"	m	struct:ptw32_robust_node_t_
next	libs/Newton/include/implement.h	/^  struct ptw32_mcs_node_t_  *next;        \/* ptr to successor in queue *\/$/;"	m	struct:ptw32_mcs_node_t_	typeref:struct:ptw32_mcs_node_t_::ptw32_mcs_node_t_
nextAssoc	libs/Newton/include/implement.h	/^  void *nextAssoc;$/;"	m	struct:ptw32_thread_t_
nextFlag	libs/Newton/include/implement.h	/^  HANDLE                     nextFlag;    \/* set after 'next' ptr is set by$/;"	m	struct:ptw32_mcs_node_t_
nextKey	libs/Newton/include/implement.h	/^  ThreadKeyAssoc *nextKey;$/;"	m	struct:ThreadKeyAssoc
nextThread	libs/Newton/include/implement.h	/^  ThreadKeyAssoc *nextThread;$/;"	m	struct:ThreadKeyAssoc
nomore	staticbin/stb_image.c	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon31	file:
num_bits	staticbin/stb_image.c	/^   int num_bits;$/;"	m	struct:__anon35	file:
nworld	src/Engine.h	/^    NewtonWorld *nworld;$/;"	m	struct:__anon43
obj	libs/Newton/include/pthread.h	/^          void    *       obj;$/;"	m	class:PThreadCleanup
objCount	src/Engine.h	/^    uint32 objCount;$/;"	m	struct:__anon43
objMV	src/Shader.c	/^void objMV(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
objMVnoTrans	src/Shader.c	/^void objMVnoTrans(GLint loc, Camera *cam, State *objState, double globalTime) {$/;"	f
objects	src/Engine.h	/^    Object **objects;$/;"	m	struct:__anon43
old_mutex_t	libs/Newton/include/benchtest.h	/^typedef struct old_mutex_t_ * old_mutex_t;$/;"	t	typeref:struct:old_mutex_t_
old_mutex_t_	libs/Newton/include/benchtest.h	/^struct old_mutex_t_ {$/;"	s
old_mutexattr_t	libs/Newton/include/benchtest.h	/^typedef struct old_mutexattr_t_ * old_mutexattr_t;$/;"	t	typeref:struct:old_mutexattr_t_
old_mutexattr_t_	libs/Newton/include/benchtest.h	/^struct old_mutexattr_t_ {$/;"	s
onTransform	src/State.c	/^void onTransform( const NewtonBody* body, const float* const mat, int tid ) {$/;"	f
operator %	libs/Newton/include/dgVector.h	/^	DG_INLINE T operator% (const dgTemplateVector<T>& A) const$/;"	f	class:dgTemplateVector
operator %	libs/Newton/include/dgVector.h	/^	DG_INLINE dgFloat32 operator% (const dgVector& A) const$/;"	f	class:dgVector
operator &	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator& (const dgVector& data) const$/;"	f	class:dgVector
operator *	libs/Newton/include/dgList.h	/^		T &operator* () const$/;"	f	class:dgList::Iterator
operator *	libs/Newton/include/dgQuaternion.h	/^inline dgQuaternion dgQuaternion::operator* (const dgQuaternion &B) const$/;"	f	class:dgQuaternion
operator *	libs/Newton/include/dgTree.h	/^		OBJECT &operator* () const $/;"	f	class:dgTree::Iterator
operator *	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> operator* (const dgTemplateVector<T>& B) const$/;"	f	class:dgTemplateVector
operator *	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator* (const dgVector& B) const$/;"	f	class:dgVector
operator +	libs/Newton/include/dgQuaternion.h	/^inline dgQuaternion dgQuaternion::operator+ (const dgQuaternion &B) const$/;"	f	class:dgQuaternion
operator +	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> operator+ (const dgTemplateVector<T>& B) const$/;"	f	class:dgTemplateVector
operator +	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator+ (const dgVector& A) const$/;"	f	class:dgVector
operator ++	libs/Newton/include/dgList.h	/^		void operator++ ()$/;"	f	class:dgList::Iterator
operator ++	libs/Newton/include/dgList.h	/^		void operator++ (dgInt32)$/;"	f	class:dgList::Iterator
operator ++	libs/Newton/include/dgTree.h	/^		void operator++ ()$/;"	f	class:dgTree::Iterator
operator ++	libs/Newton/include/dgTree.h	/^		void operator++ (dgInt32)$/;"	f	class:dgTree::Iterator
operator +=	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::operator+= (const dgGeneralVector<T> &A)$/;"	f	class:dgGeneralVector
operator +=	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T>& operator+= (const dgTemplateVector<T>& A) $/;"	f	class:dgTemplateVector
operator +=	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector &operator+= (const dgVector& A)$/;"	f	class:dgVector
operator -	libs/Newton/include/dgQuaternion.h	/^inline dgQuaternion dgQuaternion::operator- (const dgQuaternion &B) const$/;"	f	class:dgQuaternion
operator -	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T> operator- (const dgTemplateVector<T>& A) const$/;"	f	class:dgTemplateVector
operator -	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator- (const dgVector& A) const $/;"	f	class:dgVector
operator --	libs/Newton/include/dgList.h	/^		void operator-- () $/;"	f	class:dgList::Iterator
operator --	libs/Newton/include/dgList.h	/^		void operator-- (dgInt32) $/;"	f	class:dgList::Iterator
operator --	libs/Newton/include/dgTree.h	/^		void operator-- () $/;"	f	class:dgTree::Iterator
operator --	libs/Newton/include/dgTree.h	/^		void operator-- (dgInt32) $/;"	f	class:dgTree::Iterator
operator -=	libs/Newton/include/dgGeneralVector.h	/^void dgGeneralVector<T>::operator-= (const dgGeneralVector<T> &A) $/;"	f	class:dgGeneralVector
operator -=	libs/Newton/include/dgVector.h	/^	DG_INLINE dgTemplateVector<T>& operator-= (const dgTemplateVector<T>& A) $/;"	f	class:dgTemplateVector
operator -=	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector &operator-= (const dgVector& A)$/;"	f	class:dgVector
operator <	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator< (const dgVector& data) const$/;"	f	class:dgVector
operator <=	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator<= (const dgVector& data) const$/;"	f	class:dgVector
operator =	libs/Newton/include/dgConvexHull4d.h	/^	void operator = (const dgBigVector& a) $/;"	f	class:dgHullVector
operator =	libs/Newton/include/dgObb.h	/^inline dgObb &dgObb::operator= (const dgMatrix &arg)$/;"	f	class:dgObb
operator =	libs/Newton/include/dgRef.h	/^inline dgInt32 dgRefFlags::operator = (dgInt32 val)$/;"	f	class:dgRefFlags
operator ==	libs/Newton/include/dgList.h	/^		bool operator== (const Iterator &target) const$/;"	f	class:dgList::Iterator
operator ==	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator== (const dgVector& data) const$/;"	f	class:dgVector
operator >	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator> (const dgVector& data) const$/;"	f	class:dgVector
operator >=	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator>= (const dgVector& data) const$/;"	f	class:dgVector
operator []	libs/Newton/include/dgArray.h	/^T& dgArray<T>::operator[] (dgInt32 i)$/;"	f	class:dgArray
operator []	libs/Newton/include/dgArray.h	/^const T& dgArray<T>::operator[] (dgInt32 i) const$/;"	f	class:dgArray
operator []	libs/Newton/include/dgGeneralMatrix.h	/^const dgGeneralVector<T>& dgGeneralMatrix<T>::operator[] (dgInt32 i) const$/;"	f	class:dgGeneralMatrix
operator []	libs/Newton/include/dgGeneralMatrix.h	/^dgGeneralVector<T>& dgGeneralMatrix<T>::operator[] (dgInt32 i)$/;"	f	class:dgGeneralMatrix
operator []	libs/Newton/include/dgGeneralVector.h	/^T& dgGeneralVector<T>::operator[] (dgInt32 i)$/;"	f	class:dgGeneralVector
operator []	libs/Newton/include/dgGeneralVector.h	/^const T& dgGeneralVector<T>::operator[] (dgInt32 i) const$/;"	f	class:dgGeneralVector
operator []	libs/Newton/include/dgHeap.h	/^const OBJECT& dgHeapBase<OBJECT,KEY>::operator[] (dgInt32 i) const$/;"	f	class:dgHeapBase
operator []	libs/Newton/include/dgMatrix.h	/^DG_INLINE const dgVector& dgMatrix::operator[] (dgInt32  i) const$/;"	f	class:dgMatrix
operator []	libs/Newton/include/dgMatrix.h	/^DG_INLINE dgVector& dgMatrix::operator[] (dgInt32  i)$/;"	f	class:dgMatrix
operator []	libs/Newton/include/dgStack.h	/^T& dgStack<T>::operator[] (dgInt32 entry) $/;"	f	class:dgStack
operator []	libs/Newton/include/dgStack.h	/^const T& dgStack<T>::operator[] (dgInt32 entry) const$/;"	f	class:dgStack
operator []	libs/Newton/include/dgVector.h	/^	DG_INLINE T& operator[] (dgInt32 i)$/;"	f	class:dgTemplateVector
operator []	libs/Newton/include/dgVector.h	/^	DG_INLINE const T& operator[] (dgInt32 i) const$/;"	f	class:dgTemplateVector
operator []	libs/Newton/include/dgVector.h	/^	DG_INLINE const dgFloat32& operator[] (dgInt32 i) const$/;"	f	class:dgVector
operator []	libs/Newton/include/dgVector.h	/^	DG_INLINE dgFloat32& operator[] (dgInt32 i)$/;"	f	class:dgVector
operator ^	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator^ (const dgVector& data) const$/;"	f	class:dgVector
operator dgInt32	libs/Newton/include/dgList.h	/^		operator dgInt32() const$/;"	f	class:dgList::Iterator
operator dgInt32	libs/Newton/include/dgList.h	/^dgList<T>::operator dgInt32() const$/;"	f	class:dgList
operator dgInt32	libs/Newton/include/dgTree.h	/^		operator dgInt32() const $/;"	f	class:dgTree::Iterator
operator dgInt32	libs/Newton/include/dgTree.h	/^dgTree<OBJECT, KEY>::operator dgInt32() const$/;"	f	class:dgTree
operator |	libs/Newton/include/dgVector.h	/^	DG_INLINE dgVector operator| (const dgVector& data) const$/;"	f	class:dgVector
order	staticbin/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon31	file:
orientation	src/State.h	/^    float orientation[4];$/;"	m	struct:__anon51
other	libs/Newton/include/dgAmpAllocator.h	/^		typedef dgAmpAllocator<_Tp1> other;$/;"	t	struct:dgAmpAllocator::rebind
out	staticbin/stb_image.c	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon37	file:
out	staticbin/stb_image.c	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon41	file:
overlayVAO	src/Mesh.c	/^void overlayVAO( GLfloat size, GLfloat texres, Mesh *mesh ) {$/;"	f
ownerThread	libs/Newton/include/implement.h	/^  pthread_t ownerThread;$/;"	m	struct:pthread_mutex_t_
p	libs/Newton/include/pthread.h	/^    void * p;                   \/* Pointer to actual object *\/$/;"	m	struct:__anon2
pal	staticbin/stb_image.c	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon41	file:
param	libs/Newton/include/implement.h	/^  struct sched_param param;$/;"	m	struct:pthread_attr_t_	typeref:struct:pthread_attr_t_::sched_param
parent	libs/Newton/include/dgNode.h	/^	dgBaseNode* parent;$/;"	m	class:dgBaseNode
parms	libs/Newton/include/implement.h	/^  void *parms;$/;"	m	struct:ptw32_thread_t_
parse	staticbin/stb_image.c	/^   int parse, step;$/;"	m	struct:__anon41	file:
pauseGlobalTime	src/Timestep.c	/^void pauseGlobalTime() {$/;"	f
paused	src/Timestep.c	/^static uint8 paused = 0;$/;"	v	file:
perspective	src/Camera.h	/^    float perspective[16];$/;"	m	struct:__anon52
pid_t	libs/Newton/include/sched.h	/^   typedef int pid_t;$/;"	t
pid_t	libs/Newton/include/sched.h	/^ typedef int pid_t;$/;"	t
planeVAO	src/Mesh.c	/^void planeVAO( GLfloat size, GLfloat texres, Mesh *mesh ) {$/;"	f
pointer	libs/Newton/include/dgAmpAllocator.h	/^	typedef T* pointer;$/;"	t	class:dgAmpAllocator
popFloat	src/LuaScript.h	38;"	d
popInt	src/LuaScript.h	33;"	d
popString	src/LuaScript.h	43;"	d
popStringAlloc	src/LuaScript.h	52;"	d
position	src/State.h	/^    float position[3];$/;"	m	struct:__anon51
prefix	staticbin/stb_image.c	/^   stbi__int16 prefix;$/;"	m	struct:__anon40	file:
prev	libs/Newton/include/implement.h	/^  pthread_cond_t prev;$/;"	m	struct:pthread_cond_t_
prev	libs/Newton/include/implement.h	/^  ptw32_robust_node_t* prev;$/;"	m	struct:ptw32_robust_node_t_
prev	libs/Newton/include/pthread.h	/^  struct ptw32_cleanup_t *prev;$/;"	m	struct:ptw32_cleanup_t	typeref:struct:ptw32_cleanup_t::ptw32_cleanup_t
prevKey	libs/Newton/include/implement.h	/^  ThreadKeyAssoc *prevKey;$/;"	m	struct:ThreadKeyAssoc
prevReuse	libs/Newton/include/implement.h	/^  ptw32_thread_t * prevReuse;	\/* Links threads on reuse stack *\/$/;"	m	struct:ptw32_thread_t_
prevThread	libs/Newton/include/implement.h	/^  ThreadKeyAssoc *prevThread;$/;"	m	struct:ThreadKeyAssoc
printBuf	src/MatrixMath.h	12;"	d
program	src/Shader.h	/^    GLuint program;$/;"	m	struct:__anon42
proxynode	libs/Newton/include/implement.h	/^  ptw32_mcs_local_node_t proxynode;$/;"	m	struct:pthread_barrier_t_
pshared	libs/Newton/include/benchtest.h	/^  int pshared;$/;"	m	struct:old_mutexattr_t_
pshared	libs/Newton/include/implement.h	/^  int pshared;$/;"	m	struct:pthread_barrier_t_
pshared	libs/Newton/include/implement.h	/^  int pshared;$/;"	m	struct:pthread_barrierattr_t_
pshared	libs/Newton/include/implement.h	/^  int pshared;$/;"	m	struct:pthread_condattr_t_
pshared	libs/Newton/include/implement.h	/^  int pshared;$/;"	m	struct:pthread_mutexattr_t_
pshared	libs/Newton/include/implement.h	/^  int pshared;$/;"	m	struct:pthread_rwlockattr_t_
ptErrno	libs/Newton/include/implement.h	/^  int ptErrno;$/;"	m	struct:ptw32_thread_t_
ptHandle	libs/Newton/include/implement.h	/^  pthread_t ptHandle;		\/* This thread's permanent pthread_t handle *\/$/;"	m	struct:ptw32_thread_t_
pthread_attr_t	libs/Newton/include/pthread.h	/^typedef struct pthread_attr_t_ * pthread_attr_t;$/;"	t	typeref:struct:pthread_attr_t_
pthread_attr_t_	libs/Newton/include/implement.h	/^struct pthread_attr_t_$/;"	s
pthread_barrier_t	libs/Newton/include/pthread.h	/^typedef struct pthread_barrier_t_ * pthread_barrier_t;$/;"	t	typeref:struct:pthread_barrier_t_
pthread_barrier_t_	libs/Newton/include/implement.h	/^struct pthread_barrier_t_$/;"	s
pthread_barrierattr_t	libs/Newton/include/pthread.h	/^typedef struct pthread_barrierattr_t_ * pthread_barrierattr_t;$/;"	t	typeref:struct:pthread_barrierattr_t_
pthread_barrierattr_t_	libs/Newton/include/implement.h	/^struct pthread_barrierattr_t_$/;"	s
pthread_cleanup_pop	libs/Newton/include/pthread.h	763;"	d
pthread_cleanup_pop	libs/Newton/include/pthread.h	788;"	d
pthread_cleanup_pop	libs/Newton/include/pthread.h	866;"	d
pthread_cleanup_push	libs/Newton/include/pthread.h	754;"	d
pthread_cleanup_push	libs/Newton/include/pthread.h	782;"	d
pthread_cleanup_push	libs/Newton/include/pthread.h	861;"	d
pthread_cond_t	libs/Newton/include/pthread.h	/^typedef struct pthread_cond_t_ * pthread_cond_t;$/;"	t	typeref:struct:pthread_cond_t_
pthread_cond_t_	libs/Newton/include/implement.h	/^struct pthread_cond_t_$/;"	s
pthread_condattr_t	libs/Newton/include/pthread.h	/^typedef struct pthread_condattr_t_ * pthread_condattr_t;$/;"	t	typeref:struct:pthread_condattr_t_
pthread_condattr_t_	libs/Newton/include/implement.h	/^struct pthread_condattr_t_$/;"	s
pthread_key_t	libs/Newton/include/pthread.h	/^typedef struct pthread_key_t_ * pthread_key_t;$/;"	t	typeref:struct:pthread_key_t_
pthread_key_t_	libs/Newton/include/implement.h	/^struct pthread_key_t_$/;"	s
pthread_mutex_t	libs/Newton/include/pthread.h	/^typedef struct pthread_mutex_t_ * pthread_mutex_t;$/;"	t	typeref:struct:pthread_mutex_t_
pthread_mutex_t_	libs/Newton/include/implement.h	/^struct pthread_mutex_t_$/;"	s
pthread_mutexattr_t	libs/Newton/include/pthread.h	/^typedef struct pthread_mutexattr_t_ * pthread_mutexattr_t;$/;"	t	typeref:struct:pthread_mutexattr_t_
pthread_mutexattr_t_	libs/Newton/include/implement.h	/^struct pthread_mutexattr_t_$/;"	s
pthread_once_t	libs/Newton/include/pthread.h	/^typedef struct pthread_once_t_ pthread_once_t;$/;"	t	typeref:struct:pthread_once_t_
pthread_once_t_	libs/Newton/include/pthread.h	/^struct pthread_once_t_$/;"	s
pthread_rwlock_t	libs/Newton/include/pthread.h	/^typedef struct pthread_rwlock_t_ * pthread_rwlock_t;$/;"	t	typeref:struct:pthread_rwlock_t_
pthread_rwlock_t_	libs/Newton/include/implement.h	/^struct pthread_rwlock_t_$/;"	s
pthread_rwlockattr_t	libs/Newton/include/pthread.h	/^typedef struct pthread_rwlockattr_t_ * pthread_rwlockattr_t;$/;"	t	typeref:struct:pthread_rwlockattr_t_
pthread_rwlockattr_t_	libs/Newton/include/implement.h	/^struct pthread_rwlockattr_t_$/;"	s
pthread_spinlock_t	libs/Newton/include/pthread.h	/^typedef struct pthread_spinlock_t_ * pthread_spinlock_t;$/;"	t	typeref:struct:pthread_spinlock_t_
pthread_spinlock_t_	libs/Newton/include/implement.h	/^struct pthread_spinlock_t_$/;"	s
pthread_t	libs/Newton/include/pthread.h	/^typedef ptw32_handle_t pthread_t;$/;"	t
ptw32_cleanup_callback_t	libs/Newton/include/pthread.h	/^typedef void (* PTW32_CDECL ptw32_cleanup_callback_t)(void *);$/;"	t
ptw32_cleanup_t	libs/Newton/include/pthread.h	/^struct ptw32_cleanup_t$/;"	s
ptw32_cleanup_t	libs/Newton/include/pthread.h	/^typedef struct ptw32_cleanup_t ptw32_cleanup_t;$/;"	t	typeref:struct:ptw32_cleanup_t
ptw32_exception	libs/Newton/include/pthread.h	/^class ptw32_exception {};$/;"	c
ptw32_exception_cancel	libs/Newton/include/pthread.h	/^class ptw32_exception_cancel : public ptw32_exception {};$/;"	c
ptw32_exception_exit	libs/Newton/include/pthread.h	/^class ptw32_exception_exit   : public ptw32_exception {};$/;"	c
ptw32_features	libs/Newton/include/pthread.h	/^enum ptw32_features {$/;"	g
ptw32_handle_t	libs/Newton/include/pthread.h	/^} ptw32_handle_t;$/;"	t	typeref:struct:__anon2
ptw32_mcs_local_node_t	libs/Newton/include/implement.h	/^typedef struct ptw32_mcs_node_t_     ptw32_mcs_local_node_t;$/;"	t	typeref:struct:ptw32_mcs_node_t_
ptw32_mcs_lock_t	libs/Newton/include/implement.h	/^typedef struct ptw32_mcs_node_t_*    ptw32_mcs_lock_t;$/;"	t	typeref:struct:ptw32_mcs_node_t_
ptw32_mcs_node_t_	libs/Newton/include/implement.h	/^struct ptw32_mcs_node_t_$/;"	s
ptw32_robust_node_t	libs/Newton/include/implement.h	/^typedef struct ptw32_robust_node_t_  ptw32_robust_node_t;$/;"	t	typeref:struct:ptw32_robust_node_t_
ptw32_robust_node_t_	libs/Newton/include/implement.h	/^struct ptw32_robust_node_t_$/;"	s
ptw32_robust_state_t	libs/Newton/include/implement.h	/^typedef enum ptw32_robust_state_t_   ptw32_robust_state_t;$/;"	t	typeref:enum:ptw32_robust_state_t_
ptw32_robust_state_t_	libs/Newton/include/implement.h	/^enum ptw32_robust_state_t_$/;"	g
ptw32_thread_t	libs/Newton/include/implement.h	/^typedef struct ptw32_thread_t_       ptw32_thread_t;$/;"	t	typeref:struct:ptw32_thread_t_
ptw32_thread_t_	libs/Newton/include/implement.h	/^struct ptw32_thread_t_$/;"	s
pushTableKey	src/LuaScript.h	75;"	d
putKeyInt	src/LuaScript.h	89;"	d
putKeyString	src/LuaScript.h	94;"	d
quat	src/MatrixMath.h	/^typedef float *quat;$/;"	t
quatDot	src/MatrixMath.c	/^float quatDot( quat q1, quat q2 ) {$/;"	f
quatInv	src/MatrixMath.c	/^void quatInv(quat q) {$/;"	f
quatMult	src/MatrixMath.c	/^void quatMult(quat q, quat r, quat target) {$/;"	f
quatNorm	src/MatrixMath.c	/^void quatNorm(quat q) {$/;"	f
quatSet	src/MatrixMath.c	/^void quatSet(quat target, float angle, float x, float y, float z) {$/;"	f
quatSlerp	src/MatrixMath.c	/^void quatSlerp( quat q1, quat q2, quat target, float t ) {$/;"	f
quatToMat	src/MatrixMath.c	/^void quatToMat(mat4 target, quat q) {$/;"	f
ralloc	src/Util.h	140;"	d
rand_r	libs/Newton/include/test.h	53;"	d
ratio	staticbin/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon41	file:
raw_data	staticbin/stb_image.c	/^      void *raw_data;$/;"	m	struct:__anon31::__anon32	file:
read	src/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon50
read_from_callbacks	staticbin/stb_image.c	/^   int read_from_callbacks;$/;"	m	struct:__anon28	file:
readyFlag	libs/Newton/include/implement.h	/^  HANDLE                     readyFlag;   \/* set after lock is released by$/;"	m	struct:ptw32_mcs_node_t_
rebind	libs/Newton/include/dgAmpAllocator.h	/^	struct rebind$/;"	s	class:dgAmpAllocator
recursive_count	libs/Newton/include/implement.h	/^  int recursive_count;		\/* Number of unlocks a thread needs to perform$/;"	m	struct:pthread_mutex_t_
reloadScene	src/SceneManager.c	/^void reloadScene(Engine *renderer) {$/;"	f
render	src/Engine.c	/^void render(Object *obj, Engine *renderer, float alpha ) {$/;"	f
renderer	src/main.h	/^Engine *renderer;$/;"	v
resample	staticbin/stb_image.c	/^   resample_row_func resample;$/;"	m	struct:__anon33	file:
resample_row_1	staticbin/stb_image.c	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	file:
resample_row_func	staticbin/stb_image.c	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t	file:
reserved1	libs/Newton/include/pthread.h	/^  int          reserved1;$/;"	m	struct:pthread_once_t_
reserved2	libs/Newton/include/pthread.h	/^  int          reserved2;$/;"	m	struct:pthread_once_t_
resizeCB	src/Context.c	/^void resizeCB(GLFWwindow *win, int w, int h) {$/;"	f
restart_interval	staticbin/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon31	file:
restrict	libs/Newton/include/dgAmpInstance.h	/^	dgAmpMatrix4x4 (const float_4& v0, const float_4& v1, const float_4& v2, const float_4& v3)  restrict(amp,cpu)$/;"	f	class:dgAmpMatrix4x4
restrict	libs/Newton/include/dgAmpInstance.h	/^inline dgAmpMatrix4x4 dgAmpInstance::Multiply (const dgAmpMatrix4x4& matrixA, const dgAmpMatrix4x4& matrixB) restrict(amp,cpu)$/;"	f
restrict	libs/Newton/include/dgAmpInstance.h	/^inline dgAmpMatrix4x4 dgAmpInstance::Transpose (const dgAmpMatrix4x4& matrix) restrict(amp,cpu)$/;"	f
restrict	libs/Newton/include/dgAmpInstance.h	/^inline float dgAmpInstance::Dot (const float_4& vectorA, const float_4& vectorB) restrict(amp,cpu)$/;"	f
restrict	libs/Newton/include/dgAmpInstance.h	/^inline float_4 dgAmpInstance::RotateVector (const dgAmpMatrix4x4& matrix, const float_4& vector) restrict(amp,cpu)$/;"	f
restrict	libs/Newton/include/dgAmpInstance.h	/^inline float_4 dgAmpInstance::Scale (const float_4& vector, float scale) restrict(amp,cpu)$/;"	f
restrict	libs/Newton/include/dgAmpInstance.h	/^inline float_4 dgAmpInstance::TransformVector (const dgAmpMatrix4x4& matrix, const float_4& vector) restrict(amp,cpu)$/;"	f
restrict	libs/Newton/include/dgAmpInstance.h	/^inline float_4 dgAmpInstance::UnrotateVector (const dgAmpMatrix4x4& matrix, const float_4& vector) restrict(amp,cpu)$/;"	f
restrict	libs/Newton/include/dgAmpInstance.h	/^inline float_4 dgAmpInstance::UntransformVector (const dgAmpMatrix4x4& matrix, const float_4& vector) restrict(amp,cpu)$/;"	f
return_guard	src/Util.h	48;"	d
right	src/State.h	/^    float right[3];$/;"	m	struct:__anon51
robustMxList	libs/Newton/include/implement.h	/^                  robustMxList; \/* List of currenty held robust mutexes *\/$/;"	m	struct:ptw32_thread_t_
robustMxListLock	libs/Newton/include/implement.h	/^              robustMxListLock; \/* robustMxList lock *\/$/;"	m	struct:ptw32_thread_t_
robustNode	libs/Newton/include/implement.h	/^                    robustNode; \/* Extra state for robust mutexes  *\/$/;"	m	struct:pthread_mutex_t_
robustness	libs/Newton/include/implement.h	/^  int robustness;$/;"	m	struct:pthread_mutexattr_t_
rotate3D	src/MatrixMath.c	/^void rotate3D(quat target, vec3 angles) {$/;"	f
routine	libs/Newton/include/pthread.h	/^  ptw32_cleanup_callback_t routine;$/;"	m	struct:ptw32_cleanup_t
s	staticbin/stb_image.c	/^   stbi__context *s;$/;"	m	struct:__anon31	file:
s	staticbin/stb_image.c	/^   stbi__context *s;$/;"	m	struct:__anon37	file:
scan_n	staticbin/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon31	file:
sched_param	libs/Newton/include/sched.h	/^struct sched_param {$/;"	s
sched_priority	libs/Newton/include/implement.h	/^  int sched_priority;		\/* As set, not as currently is *\/$/;"	m	struct:ptw32_thread_t_
sched_priority	libs/Newton/include/sched.h	/^  int sched_priority;$/;"	m	struct:sched_param
sched_rr_get_interval	libs/Newton/include/sched.h	171;"	d
screenshot	src/Camera.c	/^void screenshot() {$/;"	f
script	src/LuaScript.h	/^typedef lua_State script;$/;"	t
scrollCB	src/InputManager.c	/^void scrollCB(GLFWwindow *win, double xoffset, double yoffset) {$/;"	f
sem	libs/Newton/include/implement.h	/^  HANDLE sem;$/;"	m	struct:sem_t_
semBarrierBreeched	libs/Newton/include/implement.h	/^  sem_t semBarrierBreeched;$/;"	m	struct:pthread_barrier_t_
semBlockLock	libs/Newton/include/implement.h	/^  sem_t semBlockLock;		\/* Semaphore that guards access to      *\/$/;"	m	struct:pthread_cond_t_
semBlockQueue	libs/Newton/include/implement.h	/^  sem_t semBlockQueue;		\/* Queue up threads waiting for the     *\/$/;"	m	struct:pthread_cond_t_
sem_t	libs/Newton/include/semaphore.h	/^typedef struct sem_t_ * sem_t;$/;"	t	typeref:struct:sem_t_
sem_t_	libs/Newton/include/implement.h	/^struct sem_t_$/;"	s
sensitivity	src/Camera.h	/^    float sensitivity;$/;"	m	struct:__anon52
seqNumber	libs/Newton/include/implement.h	/^  unsigned __int64 seqNumber;	\/* Process-unique thread sequence number *\/$/;"	m	struct:ptw32_thread_t_
setBuf	src/MatrixMath.h	14;"	d
shader	src/Object.h	/^    Shader *shader;$/;"	m	struct:__anon47
shaderCache	src/Engine.h	/^    Cache *shaderCache;$/;"	m	struct:__anon43
sibling	libs/Newton/include/dgNode.h	/^	dgBaseNode* sibling;$/;"	m	class:dgBaseNode
sigmask	libs/Newton/include/implement.h	/^  sigset_t sigmask;$/;"	m	struct:pthread_attr_t_
sigmask	libs/Newton/include/implement.h	/^  sigset_t sigmask;$/;"	m	struct:ptw32_thread_t_
size	staticbin/stb_image.c	/^   stbi_uc  size[257];$/;"	m	struct:__anon30	file:
size	staticbin/stb_image.c	/^   stbi_uc  size[288];$/;"	m	struct:__anon34	file:
size	staticbin/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon39	file:
size_type	libs/Newton/include/dgAmpAllocator.h	/^	typedef size_t size_type;$/;"	t	class:dgAmpAllocator
skip	src/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon50
smoothing	src/Camera.h	/^    float smoothing;$/;"	m	struct:__anon52
sphereInVAO	src/Mesh.c	/^void sphereInVAO( GLfloat size, GLfloat texres, Mesh *mesh ) {$/;"	f
sphereMap	src/MatrixMath.h	20;"	d
sphereOutVAO	src/Mesh.c	/^void sphereOutVAO( GLfloat size, GLfloat texres, Mesh *mesh ) {$/;"	f
stackaddr	libs/Newton/include/implement.h	/^  void *stackaddr;$/;"	m	struct:pthread_attr_t_
stacksize	libs/Newton/include/implement.h	/^  size_t stacksize;$/;"	m	struct:pthread_attr_t_
start	libs/Newton/include/implement.h	/^  void *(PTW32_CDECL *start) (void *);$/;"	m	struct:ThreadParms
start	src/Timestep.c	/^static double start, current, elapsed;$/;"	v	file:
startTimer	src/Timestep.c	/^void startTimer() {$/;"	f
start_mark	libs/Newton/include/implement.h	/^  jmp_buf start_mark;		\/* Jump buffer follows void* so should be aligned *\/$/;"	m	struct:ptw32_thread_t_
start_x	staticbin/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:__anon41	file:
start_y	staticbin/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:__anon41	file:
state	libs/Newton/include/implement.h	/^  volatile PThreadState state;$/;"	m	struct:ptw32_thread_t_
state	src/Camera.h	/^    State *state;$/;"	m	struct:__anon52
state	src/Object.h	/^    State *state;$/;"	m	struct:__anon47
stateInconsistent	libs/Newton/include/implement.h	/^  ptw32_robust_state_t stateInconsistent;$/;"	m	struct:ptw32_robust_node_t_
stateLock	libs/Newton/include/implement.h	/^  ptw32_mcs_lock_t stateLock;	\/* Used for async-cancel safety *\/$/;"	m	struct:ptw32_thread_t_
staticTextVAO	src/Mesh.c	/^void staticTextVAO( const char* text, GLfloat size, GLfloat texres, Mesh *mesh ) {$/;"	f
stbi_YCbCr_to_RGB_run	src/stb_image.h	/^typedef void (*stbi_YCbCr_to_RGB_run)(stbi_uc *output, stbi_uc const  *y, stbi_uc const *cb, stbi_uc const *cr, int count, int step);$/;"	t
stbi__DNL	staticbin/stb_image.c	1274;"	d	file:
stbi__EOI	staticbin/stb_image.c	1276;"	d	file:
stbi__SOF	staticbin/stb_image.c	1277;"	d	file:
stbi__SOI	staticbin/stb_image.c	1275;"	d	file:
stbi__SOS	staticbin/stb_image.c	1278;"	d	file:
stbi__YCbCr_installed	staticbin/stb_image.c	/^static stbi_YCbCr_to_RGB_run stbi__YCbCr_installed = stbi__YCbCr_to_RGB_row;$/;"	v	file:
stbi__YCbCr_to_RGB_row	staticbin/stb_image.c	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f	file:
stbi__at_eof	staticbin/stb_image.c	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	file:
stbi__bit_reverse	staticbin/stb_image.c	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	file:
stbi__bitcount	staticbin/stb_image.c	/^static int stbi__bitcount(unsigned int a)$/;"	f	file:
stbi__bitreverse16	staticbin/stb_image.c	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	file:
stbi__bmask	staticbin/stb_image.c	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v	file:
stbi__bmp_info	staticbin/stb_image.c	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__bmp_load	staticbin/stb_image.c	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:
stbi__bmp_test	staticbin/stb_image.c	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	file:
stbi__bmp_test_raw	staticbin/stb_image.c	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	file:
stbi__build_huffman	staticbin/stb_image.c	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	file:
stbi__check_png_header	staticbin/stb_image.c	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	file:
stbi__clamp	staticbin/stb_image.c	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	file:
stbi__cleanup_jpeg	staticbin/stb_image.c	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	file:
stbi__compute_huffman_codes	staticbin/stb_image.c	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	file:
stbi__compute_transparency	staticbin/stb_image.c	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	file:
stbi__compute_y	staticbin/stb_image.c	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	file:
stbi__context	staticbin/stb_image.c	/^} stbi__context;$/;"	t	typeref:struct:__anon28	file:
stbi__convert_format	staticbin/stb_image.c	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f	file:
stbi__copyval	staticbin/stb_image.c	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	file:
stbi__create_png_image	staticbin/stb_image.c	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, int interlaced)$/;"	f	file:
stbi__create_png_image_raw	staticbin/stb_image.c	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y)$/;"	f	file:
stbi__de_iphone	staticbin/stb_image.c	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	file:
stbi__de_iphone_flag	staticbin/stb_image.c	/^static int stbi__de_iphone_flag = 0;$/;"	v	file:
stbi__div16	staticbin/stb_image.c	1386;"	d	file:
stbi__div4	staticbin/stb_image.c	1337;"	d	file:
stbi__do_png	staticbin/stb_image.c	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f	file:
stbi__do_zlib	staticbin/stb_image.c	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	file:
stbi__err	staticbin/stb_image.c	/^static int stbi__err(const char *str)$/;"	f	file:
stbi__err	staticbin/stb_image.c	191;"	d	file:
stbi__err	staticbin/stb_image.c	193;"	d	file:
stbi__err	staticbin/stb_image.c	195;"	d	file:
stbi__errpf	staticbin/stb_image.c	198;"	d	file:
stbi__errpuc	staticbin/stb_image.c	199;"	d	file:
stbi__expand_png_palette	staticbin/stb_image.c	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	file:
stbi__extend_receive	staticbin/stb_image.c	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	file:
stbi__f2f	staticbin/stb_image.c	884;"	d	file:
stbi__fill_bits	staticbin/stb_image.c	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	file:
stbi__fill_gif_background	staticbin/stb_image.c	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f	file:
stbi__float2int	staticbin/stb_image.c	576;"	d	file:
stbi__fsh	staticbin/stb_image.c	885;"	d	file:
stbi__g_failure_reason	staticbin/stb_image.c	/^static const char *stbi__g_failure_reason;$/;"	v	file:
stbi__get16be	staticbin/stb_image.c	/^static int stbi__get16be(stbi__context *s)$/;"	f	file:
stbi__get16le	staticbin/stb_image.c	/^static int stbi__get16le(stbi__context *s)$/;"	f	file:
stbi__get32be	staticbin/stb_image.c	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	file:
stbi__get32le	staticbin/stb_image.c	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	file:
stbi__get8	staticbin/stb_image.c	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	file:
stbi__get_chunk_header	staticbin/stb_image.c	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	file:
stbi__get_marker	staticbin/stb_image.c	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	file:
stbi__getn	staticbin/stb_image.c	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	file:
stbi__gif	staticbin/stb_image.c	/^} stbi__gif;$/;"	t	typeref:struct:__anon41	file:
stbi__gif_header	staticbin/stb_image.c	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	file:
stbi__gif_info	staticbin/stb_image.c	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__gif_info_raw	staticbin/stb_image.c	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__gif_load	staticbin/stb_image.c	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:
stbi__gif_load_next	staticbin/stb_image.c	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f	file:
stbi__gif_lzw	staticbin/stb_image.c	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon40	file:
stbi__gif_parse_colortable	staticbin/stb_image.c	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f	file:
stbi__gif_test	staticbin/stb_image.c	/^static int stbi__gif_test(stbi__context *s)$/;"	f	file:
stbi__gif_test_raw	staticbin/stb_image.c	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	file:
stbi__grow_buffer_unsafe	staticbin/stb_image.c	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	file:
stbi__h2l_gamma_i	staticbin/stb_image.c	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	file:
stbi__h2l_scale_i	staticbin/stb_image.c	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	file:
stbi__hdr_convert	staticbin/stb_image.c	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	file:
stbi__hdr_gettoken	staticbin/stb_image.c	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	file:
stbi__hdr_info	staticbin/stb_image.c	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__hdr_load	staticbin/stb_image.c	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:
stbi__hdr_test	staticbin/stb_image.c	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	file:
stbi__hdr_test_core	staticbin/stb_image.c	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f	file:
stbi__hdr_to_ldr	staticbin/stb_image.c	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	file:
stbi__high_bit	staticbin/stb_image.c	/^static int stbi__high_bit(unsigned int z)$/;"	f	file:
stbi__huffman	staticbin/stb_image.c	/^} stbi__huffman;$/;"	t	typeref:struct:__anon30	file:
stbi__idct_block	staticbin/stb_image.c	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)$/;"	f	file:
stbi__idct_installed	staticbin/stb_image.c	/^static stbi_idct_8x8 stbi__idct_installed = stbi__idct_block;$/;"	v	file:
stbi__info_main	staticbin/stb_image.c	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__init_zdefaults	staticbin/stb_image.c	/^static void stbi__init_zdefaults(void)$/;"	f	file:
stbi__int16	staticbin/stb_image.c	/^typedef   signed short stbi__int16;$/;"	t	file:
stbi__int16	staticbin/stb_image.c	/^typedef int16_t  stbi__int16;$/;"	t	file:
stbi__int32	staticbin/stb_image.c	/^typedef   signed int   stbi__int32;$/;"	t	file:
stbi__int32	staticbin/stb_image.c	/^typedef int32_t  stbi__int32;$/;"	t	file:
stbi__jpeg	staticbin/stb_image.c	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon31	file:
stbi__jpeg_decode_block	staticbin/stb_image.c	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, int b)$/;"	f	file:
stbi__jpeg_dezigzag	staticbin/stb_image.c	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v	file:
stbi__jpeg_huff_decode	staticbin/stb_image.c	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	file:
stbi__jpeg_info	staticbin/stb_image.c	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__jpeg_info_raw	staticbin/stb_image.c	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	file:
stbi__jpeg_load	staticbin/stb_image.c	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:
stbi__jpeg_reset	staticbin/stb_image.c	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	file:
stbi__jpeg_test	staticbin/stb_image.c	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	file:
stbi__l2h_gamma	staticbin/stb_image.c	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	file:
stbi__l2h_scale	staticbin/stb_image.c	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	file:
stbi__ldr_to_hdr	staticbin/stb_image.c	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	file:
stbi__out_gif_code	staticbin/stb_image.c	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	file:
stbi__paeth	staticbin/stb_image.c	/^static int stbi__paeth(int a, int b, int c)$/;"	f	file:
stbi__parse_entropy_coded_data	staticbin/stb_image.c	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	file:
stbi__parse_huffman_block	staticbin/stb_image.c	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	file:
stbi__parse_png_file	staticbin/stb_image.c	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	file:
stbi__parse_uncomperssed_block	staticbin/stb_image.c	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f	file:
stbi__parse_zlib	staticbin/stb_image.c	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	file:
stbi__parse_zlib_header	staticbin/stb_image.c	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	file:
stbi__pic_info	staticbin/stb_image.c	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__pic_is4	staticbin/stb_image.c	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	file:
stbi__pic_load	staticbin/stb_image.c	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f	file:
stbi__pic_load_core	staticbin/stb_image.c	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f	file:
stbi__pic_packet	staticbin/stb_image.c	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon39	file:
stbi__pic_test	staticbin/stb_image.c	/^static int stbi__pic_test(stbi__context *s)$/;"	f	file:
stbi__pic_test_core	staticbin/stb_image.c	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	file:
stbi__png	staticbin/stb_image.c	/^} stbi__png;$/;"	t	typeref:struct:__anon37	file:
stbi__png_info	staticbin/stb_image.c	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__png_info_raw	staticbin/stb_image.c	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	file:
stbi__png_load	staticbin/stb_image.c	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:
stbi__png_test	staticbin/stb_image.c	/^static int stbi__png_test(stbi__context *s)$/;"	f	file:
stbi__pngchunk	staticbin/stb_image.c	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon36	file:
stbi__process_frame_header	staticbin/stb_image.c	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	file:
stbi__process_gif_raster	staticbin/stb_image.c	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	file:
stbi__process_marker	staticbin/stb_image.c	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	file:
stbi__process_scan_header	staticbin/stb_image.c	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	file:
stbi__psd_info	staticbin/stb_image.c	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__psd_load	staticbin/stb_image.c	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:
stbi__psd_test	staticbin/stb_image.c	/^static int stbi__psd_test(stbi__context *s)$/;"	f	file:
stbi__readval	staticbin/stb_image.c	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	file:
stbi__refill_buffer	staticbin/stb_image.c	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	file:
stbi__resample	staticbin/stb_image.c	/^} stbi__resample;$/;"	t	typeref:struct:__anon33	file:
stbi__resample_row_generic	staticbin/stb_image.c	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	file:
stbi__resample_row_h_2	staticbin/stb_image.c	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	file:
stbi__resample_row_hv_2	staticbin/stb_image.c	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	file:
stbi__resample_row_v_2	staticbin/stb_image.c	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	file:
stbi__rewind	staticbin/stb_image.c	/^static void stbi__rewind(stbi__context *s)$/;"	f	file:
stbi__shiftsigned	staticbin/stb_image.c	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f	file:
stbi__skip	staticbin/stb_image.c	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	file:
stbi__start_callbacks	staticbin/stb_image.c	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	file:
stbi__start_file	staticbin/stb_image.c	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	file:
stbi__start_mem	staticbin/stb_image.c	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	file:
stbi__stdio_callbacks	staticbin/stb_image.c	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v	file:
stbi__stdio_eof	staticbin/stb_image.c	/^static int stbi__stdio_eof(void *user)$/;"	f	file:
stbi__stdio_read	staticbin/stb_image.c	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	file:
stbi__stdio_skip	staticbin/stb_image.c	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	file:
stbi__tga_info	staticbin/stb_image.c	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	file:
stbi__tga_load	staticbin/stb_image.c	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:
stbi__tga_test	staticbin/stb_image.c	/^static int stbi__tga_test(stbi__context *s)$/;"	f	file:
stbi__uint16	staticbin/stb_image.c	/^typedef uint16_t stbi__uint16;$/;"	t	file:
stbi__uint16	staticbin/stb_image.c	/^typedef unsigned short stbi__uint16;$/;"	t	file:
stbi__uint32	staticbin/stb_image.c	/^typedef uint32_t stbi__uint32;$/;"	t	file:
stbi__uint32	staticbin/stb_image.c	/^typedef unsigned int   stbi__uint32;$/;"	t	file:
stbi__unpremultiply_on_load	staticbin/stb_image.c	/^static int stbi__unpremultiply_on_load = 0;$/;"	v	file:
stbi__zbuf	staticbin/stb_image.c	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon35	file:
stbi__zbuild_huffman	staticbin/stb_image.c	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f	file:
stbi__zdefault_distance	staticbin/stb_image.c	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v	file:
stbi__zdefault_length	staticbin/stb_image.c	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v	file:
stbi__zdist_base	staticbin/stb_image.c	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v	file:
stbi__zdist_extra	staticbin/stb_image.c	/^static int stbi__zdist_extra[32] =$/;"	v	file:
stbi__zexpand	staticbin/stb_image.c	/^static int stbi__zexpand(stbi__zbuf *z, int n)  \/\/ need to make room for n bytes$/;"	f	file:
stbi__zget8	staticbin/stb_image.c	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	file:
stbi__zhuffman	staticbin/stb_image.c	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon34	file:
stbi__zhuffman_decode	staticbin/stb_image.c	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	file:
stbi__zlength_base	staticbin/stb_image.c	/^static int stbi__zlength_base[31] = {$/;"	v	file:
stbi__zlength_extra	staticbin/stb_image.c	/^static int stbi__zlength_extra[31]= $/;"	v	file:
stbi__zreceive	staticbin/stb_image.c	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	file:
stbi_convert_iphone_png_to_rgb	staticbin/stb_image.c	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_dequantize_t	staticbin/stb_image.c	/^typedef stbi_uc stbi_dequantize_t;$/;"	t	file:
stbi_dequantize_t	staticbin/stb_image.c	/^typedef unsigned short stbi_dequantize_t;$/;"	t	file:
stbi_failure_reason	staticbin/stb_image.c	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	staticbin/stb_image.c	/^void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	staticbin/stb_image.c	/^void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_idct_8x8	src/stb_image.h	/^typedef void (*stbi_idct_8x8)(stbi_uc *out, int out_stride, short data[64], unsigned short *dequantize);$/;"	t
stbi_image_free	staticbin/stb_image.c	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	staticbin/stb_image.c	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	staticbin/stb_image.c	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	staticbin/stb_image.c	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	staticbin/stb_image.c	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	staticbin/stb_image.c	21;"	d	file:
stbi_inline	staticbin/stb_image.c	23;"	d	file:
stbi_inline	staticbin/stb_image.c	26;"	d	file:
stbi_install_YCbCr_to_RGB	staticbin/stb_image.c	/^STBIDEF void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func)$/;"	f
stbi_install_idct	staticbin/stb_image.c	/^STBIDEF void stbi_install_idct(stbi_idct_8x8 func)$/;"	f
stbi_io_callbacks	src/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon50
stbi_is_hdr	staticbin/stb_image.c	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	staticbin/stb_image.c	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	staticbin/stb_image.c	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	staticbin/stb_image.c	/^int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	staticbin/stb_image.c	/^void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	staticbin/stb_image.c	/^void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	staticbin/stb_image.c	/^STBIDEF unsigned char *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_callbacks	staticbin/stb_image.c	/^unsigned char *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	staticbin/stb_image.c	/^STBIDEF unsigned char *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	staticbin/stb_image.c	/^STBIDEF unsigned char *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_main	staticbin/stb_image.c	/^static unsigned char *stbi_load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:
stbi_loadf	staticbin/stb_image.c	/^float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	staticbin/stb_image.c	/^float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	staticbin/stb_image.c	/^float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	staticbin/stb_image.c	/^float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_main	staticbin/stb_image.c	/^float *stbi_loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	staticbin/stb_image.c	57;"	d	file:
stbi_lrot	staticbin/stb_image.c	59;"	d	file:
stbi_set_unpremultiply_on_load	staticbin/stb_image.c	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	src/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_zlib_decode_buffer	staticbin/stb_image.c	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	staticbin/stb_image.c	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	staticbin/stb_image.c	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	staticbin/stb_image.c	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	staticbin/stb_image.c	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	staticbin/stb_image.c	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
step	staticbin/stb_image.c	/^   int parse, step;$/;"	m	struct:__anon41	file:
suffix	staticbin/stb_image.c	/^   stbi_uc suffix;$/;"	m	struct:__anon40	file:
t_ContinueSearh	libs/Newton/include/dgIntersections.h	/^	t_ContinueSearh$/;"	e	enum:dgIntersectStatus
t_StopSearh	libs/Newton/include/dgIntersections.h	/^	t_StopSearh,$/;"	e	enum:dgIntersectStatus
table	src/LuaScript.h	/^typedef lua_State table;$/;"	t
target	src/Material.h	/^    GLenum target;$/;"	m	struct:__anon45
targetAngles	src/State.h	/^    float targetAngles[3];$/;"	m	struct:__anon51
targetOrien	src/State.h	/^    float targetOrien[4];$/;"	m	struct:__anon51
targetVelocity	src/State.h	/^    float targetVelocity[3];$/;"	m	struct:__anon51
terminate	src/Engine.c	/^void terminate(Engine *renderer) {$/;"	f
terrainVAO	src/Mesh.c	/^void terrainVAO( GLfloat size, GLfloat texres, Mesh *mesh ) {$/;"	f
texCount	src/Engine.h	/^    uint32 texCount;$/;"	m	struct:__anon43
texCount	src/Material.h	/^    uint32 texCount;$/;"	m	struct:__anon46
texData	src/Material.c	/^uint8 *texData(const char *file, int *width, int *height, int *compr ) {$/;"	f
texDataCache	src/Engine.h	/^    Cache *texDataCache;$/;"	m	struct:__anon43
textureCache	src/Engine.h	/^    Cache *textureCache;$/;"	m	struct:__anon43
textures	src/Engine.h	/^    Object **textures;$/;"	m	struct:__anon43
textures	src/Material.h	/^    Texture **textures;$/;"	m	struct:__anon46
thread	libs/Newton/include/implement.h	/^  DWORD thread;			\/* Win32 thread ID *\/$/;"	m	struct:ptw32_thread_t_
thread	libs/Newton/include/implement.h	/^  ptw32_thread_t * thread;$/;"	m	struct:ThreadKeyAssoc
threadH	libs/Newton/include/implement.h	/^  HANDLE threadH;		\/* Win32 thread handle - POSIX thread is invalid if threadH == 0 *\/$/;"	m	struct:ptw32_thread_t_
threadLock	libs/Newton/include/implement.h	/^  ptw32_mcs_lock_t threadLock;	\/* Used for serialised access to public thread state *\/$/;"	m	struct:ptw32_thread_t_
threads	libs/Newton/include/implement.h	/^  void *threads;$/;"	m	struct:pthread_key_t_
tid	libs/Newton/include/implement.h	/^  pthread_t tid;$/;"	m	struct:ThreadParms
timespec	libs/Newton/include/pthread.h	/^struct timespec {$/;"	s
todo	staticbin/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon31	file:
torque	src/State.h	/^    float torque[3];$/;"	m	struct:__anon51
torque	src/main.c	/^float torque[] = { 0.0f, 0.0f, 0.0f };$/;"	v
tq	staticbin/stb_image.c	/^      int tq;$/;"	m	struct:__anon31::__anon32	file:
transparent	staticbin/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon41	file:
tv_nsec	libs/Newton/include/pthread.h	/^        long tv_nsec;$/;"	m	struct:timespec
tv_sec	libs/Newton/include/pthread.h	/^        time_t tv_sec;$/;"	m	struct:timespec
type	staticbin/stb_image.c	/^   stbi__uint32 type;$/;"	m	struct:__anon36	file:
type	staticbin/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon39	file:
u	libs/Newton/include/implement.h	/^  } u;$/;"	m	struct:pthread_spinlock_t_	typeref:union:pthread_spinlock_t_::__anon25
uint16	src/common.h	/^typedef unsigned short uint16;$/;"	t
uint32	src/common.h	/^typedef unsigned int uint32;$/;"	t
uint64	src/common.h	/^typedef unsigned long uint64;$/;"	t
uint8	src/common.h	/^typedef unsigned char uint8;$/;"	t
uniforms	src/Shader.h	/^    Cache *uniforms;$/;"	m	struct:__anon42
unpackScene	scripts/loadScene.lua	/^function unpackScene(s)$/;"	f
up	src/State.h	/^    float up[3];$/;"	m	struct:__anon51
updateCam	src/Camera.c	/^void updateCam( Camera *cam ) {$/;"	f
updateGlobalTime	src/Timestep.c	/^void updateGlobalTime() {$/;"	f
v	staticbin/stb_image.c	/^      int h,v;$/;"	m	struct:__anon31::__anon32	file:
valid	libs/Newton/include/implement.h	/^  unsigned long valid;$/;"	m	struct:pthread_attr_t_
validate_uint32	staticbin/stb_image.c	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t	file:
value	libs/Newton/include/implement.h	/^  int value;$/;"	m	struct:sem_t_
value	staticbin/stb_image.c	/^   stbi__uint16 value[288]; $/;"	m	struct:__anon34	file:
values	staticbin/stb_image.c	/^   stbi_uc  values[256];$/;"	m	struct:__anon30	file:
vaoId	src/Mesh.h	/^    GLuint vaoId;$/;"	m	struct:__anon44
vboId	src/Mesh.h	/^    GLuint vboId;$/;"	m	struct:__anon44
vec3	src/MatrixMath.h	/^typedef float *vec3;$/;"	t
vec3add	src/MatrixMath.c	/^void vec3add( vec3 a, vec3 b, vec3 target ) {$/;"	f
vec3cross	src/MatrixMath.c	/^void vec3cross( vec3 a, vec3 b, vec3 target ) {$/;"	f
vec3dot	src/MatrixMath.c	/^float vec3dot( vec3 a, vec3 b ) {$/;"	f
vec3norm	src/MatrixMath.c	/^float vec3norm( vec3 v ) {$/;"	f
vec3normalize	src/MatrixMath.c	/^void vec3normalize( vec3 v ) {$/;"	f
vec3rota	src/MatrixMath.c	/^void vec3rota( vec3 v, quat q, vec3 target ) {$/;"	f
vec3scale	src/MatrixMath.c	/^void vec3scale( float s, vec3 target ) {$/;"	f
vec3sub	src/MatrixMath.c	/^void vec3sub( vec3 a, vec3 b, vec3 target ) {$/;"	f
vec3tmp	src/MatrixMath.c	/^float vec3tmp[3];$/;"	v
vec4	src/MatrixMath.h	/^typedef float *vec4;$/;"	t
vec4tmp	src/MatrixMath.c	/^float vec4tmp[4];$/;"	v
velocity	src/State.h	/^    float velocity[3];$/;"	m	struct:__anon51
vs	staticbin/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon33	file:
w	staticbin/stb_image.c	/^   int w,h;$/;"	m	struct:__anon41	file:
w2	staticbin/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon31::__anon32	file:
w_lores	staticbin/stb_image.c	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon33	file:
wait	src/Timestep.c	/^void wait(long nanosec) {$/;"	f
warn	src/Util.h	31;"	d
warn_guard	src/Util.h	37;"	d
watch	src/Util.h	90;"	d
watchlog	src/main.h	/^FILE *watchlog;$/;"	v
width	src/Material.h	/^    uint32 width;$/;"	m	struct:__anon45
win	src/Context.h	/^    GLFWwindow* win;$/;"	m	struct:__anon48
wireframe	src/Camera.h	/^    uint8 wireframe;$/;"	m	struct:__anon52
x	libs/Newton/include/pthread.h	/^    unsigned int x;             \/* Extra information - reuse count etc *\/$/;"	m	struct:__anon2
x	staticbin/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon31::__anon32	file:
xRes	src/Context.h	/^    uint32 xRes;$/;"	m	struct:__anon48
y	staticbin/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon31::__anon32	file:
yRes	src/Context.h	/^    uint32 yRes;$/;"	m	struct:__anon48
ypos	staticbin/stb_image.c	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon33	file:
ystep	staticbin/stb_image.c	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon33	file:
z_distance	staticbin/stb_image.c	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon35	file:
z_expandable	staticbin/stb_image.c	/^   int   z_expandable;$/;"	m	struct:__anon35	file:
z_length	staticbin/stb_image.c	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon35	file:
zbuffer	staticbin/stb_image.c	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon35	file:
zbuffer_end	staticbin/stb_image.c	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon35	file:
zout	staticbin/stb_image.c	/^   char *zout;$/;"	m	struct:__anon35	file:
zout_end	staticbin/stb_image.c	/^   char *zout_end;$/;"	m	struct:__anon35	file:
zout_start	staticbin/stb_image.c	/^   char *zout_start;$/;"	m	struct:__anon35	file:
~Iterator	libs/Newton/include/dgList.h	/^		~Iterator ()$/;"	f	class:dgList::Iterator
~Iterator	libs/Newton/include/dgTree.h	/^		~Iterator()$/;"	f	class:dgTree::Iterator
~PThreadCleanup	libs/Newton/include/pthread.h	/^          ~PThreadCleanup()$/;"	f	class:PThreadCleanup
~dgAmpAllocator	libs/Newton/include/dgAmpAllocator.h	/^	~dgAmpAllocator() throw() $/;"	f	class:dgAmpAllocator
~dgArray	libs/Newton/include/dgArray.h	/^dgArray<T>::~dgArray ()$/;"	f	class:dgArray
~dgBroadPhaseNode	libs/Newton/include/dgBroadPhase.h	/^	virtual ~dgBroadPhaseNode()$/;"	f	class:dgBroadPhaseNode
~dgBroadPhaseTreeNode	libs/Newton/include/dgBroadPhase.h	/^	virtual ~dgBroadPhaseTreeNode()$/;"	f	class:dgBroadPhaseTreeNode
~dgConstraint	libs/Newton/include/dgConstraint.h	/^inline dgConstraint::~dgConstraint()$/;"	f	class:dgConstraint
~dgCriticalSection	libs/Newton/include/dgThread.h	/^DG_INLINE dgThread::dgCriticalSection::~dgCriticalSection()$/;"	f	class:dgThread::dgCriticalSection
~dgEdge	libs/Newton/include/dgPolyhedra.h	/^DG_INLINE dgEdge::~dgEdge ()$/;"	f	class:dgEdge
~dgFastQueue	libs/Newton/include/dgFastQueue.h	/^dgFastQueue<T, sizeInPowerOfTwo>::~dgFastQueue ()$/;"	f	class:dgFastQueue
~dgFloatExceptions	libs/Newton/include/dgTypes.h	/^	~dgFloatExceptions()$/;"	f	class:dgFloatExceptions
~dgGeneralMatrix	libs/Newton/include/dgGeneralMatrix.h	/^dgGeneralMatrix<T>::~dgGeneralMatrix ()$/;"	f	class:dgGeneralMatrix
~dgGeneralVector	libs/Newton/include/dgGeneralVector.h	/^dgGeneralVector<T>::~dgGeneralVector ()$/;"	f	class:dgGeneralVector
~dgGraph	libs/Newton/include/dgGraph.h	/^dgGraph<dgNodeData, dgEdgeData>::~dgGraph () $/;"	f	class:dgGraph
~dgGraphEdge	libs/Newton/include/dgGraph.h	/^dgGraphEdge<dgNodeData, dgEdgeData>::~dgGraphEdge() $/;"	f	class:dgGraphEdge
~dgGraphNode	libs/Newton/include/dgGraph.h	/^dgGraphNode<dgNodeData, dgEdgeData>::~dgGraphNode() $/;"	f	class:dgGraphNode
~dgHeapBase	libs/Newton/include/dgHeap.h	/^dgHeapBase<OBJECT,KEY>::~dgHeapBase ()$/;"	f	class:dgHeapBase
~dgList	libs/Newton/include/dgList.h	/^dgList<T>::~dgList () $/;"	f	class:dgList
~dgListNode	libs/Newton/include/dgList.h	/^		virtual ~dgListNode()$/;"	f	class:dgList::dgListNode
~dgListener	libs/Newton/include/dgWorld.h	/^		~dgListener()$/;"	f	class:dgWorld::dgListener
~dgListenerList	libs/Newton/include/dgWorld.h	/^		~dgListenerList()$/;"	f	class:dgWorld::dgListenerList
~dgMeshSegment	libs/Newton/include/dgCollisionDeformableMesh.h	/^		~dgMeshSegment ()$/;"	f	class:dgCollisionDeformableMesh::dgMeshSegment
~dgNode	libs/Newton/include/dgNode.h	/^dgNode<T>::~dgNode () $/;"	f	class:dgNode
~dgPathFinder	libs/Newton/include/dgPathFinder.h	/^dgPathFinder<NODEID, COST>::~dgPathFinder()$/;"	f	class:dgPathFinder
~dgPolygonSoupDatabase	libs/Newton/include/dgPolygonSoupDatabase.h	/^inline dgPolygonSoupDatabase::~dgPolygonSoupDatabase ()$/;"	f	class:dgPolygonSoupDatabase
~dgRedBackNode	libs/Newton/include/dgTree.h	/^	virtual ~dgRedBackNode () $/;"	f	class:dgRedBackNode
~dgRef	libs/Newton/include/dgRef.h	/^inline dgRef::~dgRef () $/;"	f	class:dgRef
~dgRefCounter	libs/Newton/include/dgRefCounter.h	/^inline dgRefCounter::~dgRefCounter(void)$/;"	f	class:dgRefCounter
~dgSetPrecisionDouble	libs/Newton/include/dgTypes.h	/^	~dgSetPrecisionDouble()$/;"	f	class:dgSetPrecisionDouble
~dgStack	libs/Newton/include/dgStack.h	/^dgStack<T>::~dgStack ()$/;"	f	class:dgStack
~dgStackBase	libs/Newton/include/dgStack.h	/^inline dgStackBase::~dgStackBase ()$/;"	f	class:dgStackBase
~dgThreadHiveScopeLock	libs/Newton/include/dgThreadHive.h	/^	~dgThreadHiveScopeLock()$/;"	f	class:dgThreadHiveScopeLock
~dgTree	libs/Newton/include/dgTree.h	/^dgTree<OBJECT, KEY>::~dgTree () $/;"	f	class:dgTree
~dgTreeNode	libs/Newton/include/dgTree.h	/^		~dgTreeNode () $/;"	f	class:dgTree::dgTreeNode
